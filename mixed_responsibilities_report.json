{
  "summary": {
    "files_analyzed": 121,
    "functions_analyzed": 1750,
    "violations_found": 799,
    "critical_violations": 211,
    "high_violations": 261,
    "medium_violations": 327
  },
  "violations_by_severity": {
    "CRITICAL": [
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 99,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def __init__(self, \n                 framework_db_path: str, \n                 timer_db_path: Optional[str] = None,\n                 enable_cache: bool = True,\n                 cache_debug: bool = False):\n        \"\"\"\n        Initialize cached database manager.\n        \n        Args:\n            ...",
        "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "_calculate_daily_focus_trends",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 320,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _calculate_daily_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[str, float]:\n        \"\"\"Calculate daily focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        daily_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n     ...",
        "suggested_refactor": "Extract UI rendering to _calculate_daily_focus_trends_ui_layer() + Extract logging to _calculate_daily_focus_trends_audit_layer() + Extract business logic to _calculate_daily_focus_trends_processor()"
      },
      {
        "function_name": "_calculate_daily_metrics",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 436,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _calculate_daily_metrics(self, timer_sessions: List[Dict], tasks: List[Dict]) -> List[Dict[str, Any]]:\n        \"\"\"Calculate daily metrics for the report.\"\"\"\n        \n        from collections import defaultdict\n        daily_data = defaultdict(lambda: {\n            \"date\": \"\",\n            \"se...",
        "suggested_refactor": "Extract UI rendering to _calculate_daily_metrics_ui_layer() + Extract logging to _calculate_daily_metrics_audit_layer() + Extract business logic to _calculate_daily_metrics_processor()"
      },
      {
        "function_name": "_calculate_elapsed_time",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 927,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _calculate_elapsed_time(self, session: Dict[str, Any]) -> int:\n        \"\"\"Calculate elapsed time for active session.\"\"\"\n        start_time = session['start_time']\n        was_utc_format = False\n        \n        if isinstance(start_time, str):\n            # Normaliza ISO 8601 com sufixo 'Z' (...",
        "suggested_refactor": "Extract UI rendering to _calculate_elapsed_time_ui_layer() + Extract logging to _calculate_elapsed_time_audit_layer() + Extract business logic to _calculate_elapsed_time_processor()"
      },
      {
        "function_name": "_calculate_hourly_focus_trends",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 340,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _calculate_hourly_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[int, float]:\n        \"\"\"Calculate hourly focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        hourly_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n  ...",
        "suggested_refactor": "Extract UI rendering to _calculate_hourly_focus_trends_ui_layer() + Extract logging to _calculate_hourly_focus_trends_audit_layer() + Extract business logic to _calculate_hourly_focus_trends_processor()"
      },
      {
        "function_name": "_call",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 298,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _call():\n        try:\n            if user_id is not None:\n                return get_user_stats(user_id)  # type: ignore[call-arg]\n        except TypeError:\n            try:\n                return get_user_stats(user_id=user_id)  # type: ignore[call-arg]\n            except TypeError:\n       ...",
        "suggested_refactor": "Extract UI rendering to _call_ui_layer() + Extract logging to _call_audit_layer()"
      },
      {
        "function_name": "_cleanup_old_backups",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 397,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _cleanup_old_backups(self) -> None:\n        \"\"\"Clean up old backups based on retention policies.\"\"\"\n        current_time = datetime.now()\n        \n        # Count backups by type\n        auto_backups = []\n        manual_backups = []\n        \n        for backup_info in self._backup_index.valu...",
        "suggested_refactor": "Extract database operations to _cleanup_old_backups_data_layer() + Extract UI rendering to _cleanup_old_backups_ui_layer() + Extract logging to _cleanup_old_backups_audit_layer()"
      },
      {
        "function_name": "_configure_streamlit_dos_protection",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 164,
        "responsibilities": [
          "auth",
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _configure_streamlit_dos_protection(self):\n        \"\"\"Configure DoS protection for Streamlit operations.\"\"\"\n        if not self.dos_protector:\n            return\n        \n        # Add circuit breakers for critical operations\n        try:\n            from circuit_breaker import CircuitBreake...",
        "suggested_refactor": "Extract UI rendering to _configure_streamlit_dos_protection_ui_layer() + Extract logging to _configure_streamlit_dos_protection_audit_layer()"
      },
      {
        "function_name": "_create_backup",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 117,
        "responsibilities": [
          "logging",
          "network",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _create_backup(self, backup_name: str, backup_type: BackupType, description: str) -> Optional[BackupInfo]:\n        \"\"\"Create a backup with specified parameters.\"\"\"\n        backup_file = self.backup_dir / f\"{backup_name}.zip\"\n        \n        try:\n            with zipfile.ZipFile(backup_file,...",
        "suggested_refactor": "Extract UI rendering to _create_backup_ui_layer() + Extract logging to _create_backup_audit_layer()"
      },
      {
        "function_name": "_create_log_entry",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 299,
        "responsibilities": [
          "ui",
          "business_logic",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _create_log_entry(self, level: LogLevel, event_type: EventType, \n                         component: str, operation: str, message: str,\n                         extra_data: Optional[Dict[str, Any]] = None,\n                         performance_data: Optional[PerformanceData] = None,\n         ...",
        "suggested_refactor": "Extract UI rendering to _create_log_entry_ui_layer() + Extract logging to _create_log_entry_audit_layer() + Extract business logic to _create_log_entry_processor()"
      },
      {
        "function_name": "_create_service",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 303,
        "responsibilities": [
          "logging",
          "database",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _create_service(self, service_name: str, validate_only: bool = False) -> BaseService:\n        if service_name not in self._service_classes:\n            raise ServiceError(f\"Unknown service: {service_name}\")\n\n        cls = self._service_classes[service_name]\n        try:\n            if self.u...",
        "suggested_refactor": "Extract database operations to _create_service_data_layer() + Extract UI rendering to _create_service_ui_layer() + Extract logging to _create_service_audit_layer() + Extract validation to _create_service_validator()"
      },
      {
        "function_name": "_delete_from_disk",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 513,
        "responsibilities": [
          "logging",
          "database",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _delete_from_disk(self, cache_key: str) -> bool:\n        \"\"\"Delete value from disk cache.\"\"\"\n        if not self.cache_dir:\n            return False\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(cache_ke...",
        "suggested_refactor": "Extract database operations to _delete_from_disk_data_layer() + Extract UI rendering to _delete_from_disk_ui_layer() + Extract logging to _delete_from_disk_audit_layer() + Extract validation to _delete_from_disk_validator()"
      },
      {
        "function_name": "_display_client_results",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 711,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _display_client_results(clients_result, all_clients, filtered_clients, db_manager):\n    \"\"\"Display client results with count and debug info.\"\"\"\n    # Display results count\n    total_count = clients_result.get(\"total\", len(all_clients)) if isinstance(clients_result, dict) else len(all_clients)\n  ...",
        "suggested_refactor": "Extract database operations to _display_client_results_data_layer() + Extract UI rendering to _display_client_results_ui_layer() + Extract logging to _display_client_results_audit_layer()"
      },
      {
        "function_name": "_execute_with_retry",
        "file_path": "streamlit_extension/utils/circuit_breaker.py",
        "line_number": 156,
        "responsibilities": [
          "business_logic",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _execute_with_retry(self, func: Callable, *args, **kwargs) -> Any:\n        \"\"\"Execute function with exponential backoff retry logic.\"\"\"\n        last_exception: Optional[Exception] = None\n        for attempt in range(self.config.max_retry_attempts):\n            try:\n                result = f...",
        "suggested_refactor": "Extract database operations to _execute_with_retry_data_layer() + Extract UI rendering to _execute_with_retry_ui_layer() + Extract logging to _execute_with_retry_audit_layer() + Extract business logic to _execute_with_retry_processor()"
      },
      {
        "function_name": "_generate_fallback_report",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 252,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _generate_fallback_report(self, days: int) -> AnalyticsReport:\n        \"\"\"Generate analytics report using database queries when engine unavailable.\"\"\"\n        \n        if not self.db_manager:\n            # Return empty report\n            return AnalyticsReport(\n                period_days=da...",
        "suggested_refactor": "Extract database operations to _generate_fallback_report_data_layer() + Extract UI rendering to _generate_fallback_report_ui_layer() + Extract business logic to _generate_fallback_report_processor()"
      },
      {
        "function_name": "_generate_user_message",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 107,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _generate_user_message(self) -> str:\n        \"\"\"Generate user-friendly error message.\"\"\"\n        exception_type = type(self.exception).__name__\n        \n        # Map common exceptions to user-friendly messages\n        user_messages = {\n            \"sqlite3.OperationalError\": \"Database tempo...",
        "suggested_refactor": "Extract database operations to _generate_user_message_data_layer() + Extract UI rendering to _generate_user_message_ui_layer() + Extract logging to _generate_user_message_audit_layer()"
      },
      {
        "function_name": "_get_client_ip",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 576,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_client_ip(self) -> Optional[str]:\n        \"\"\"Extract client IP address from Streamlit context.\"\"\"\n        try:\n            import streamlit as st\n            from streamlit.runtime.scriptrunner import get_script_run_ctx\n            \n            ctx = get_script_run_ctx()\n            if ...",
        "suggested_refactor": "Extract UI rendering to _get_client_ip_ui_layer() + Extract logging to _get_client_ip_audit_layer()"
      },
      {
        "function_name": "_get_fallback_analytics",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 258,
        "responsibilities": [
          "auth",
          "database",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_fallback_analytics(self, days: int) -> Dict[str, Any]:\n        \"\"\"Fallback analytics using database manager.\"\"\"\n        if not self.db_manager:\n            return {\"error\": \"No analytics data available\"}\n        \n        # Get basic stats from database\n        user_stats = self.db_manag...",
        "suggested_refactor": "Extract database operations to _get_fallback_analytics_data_layer() + Extract UI rendering to _get_fallback_analytics_ui_layer()"
      },
      {
        "function_name": "_get_from_disk",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 410,
        "responsibilities": [
          "logging",
          "validation",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_from_disk(self, cache_key: str) -> Optional[Any]:\n        \"\"\"Get value from disk cache.\"\"\"\n        if not self.cache_dir:\n            return None\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(cache_...",
        "suggested_refactor": "Extract UI rendering to _get_from_disk_ui_layer() + Extract logging to _get_from_disk_audit_layer() + Extract validation to _get_from_disk_validator()"
      },
      {
        "function_name": "_get_last_session_info",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 518,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_last_session_info(self) -> Dict[str, Any]:\n        \"\"\"Get information about the last session.\"\"\"\n        if not self.db_manager:\n            return {}\n        \n        recent_sessions = self.db_manager.get_timer_sessions(1)\n        if not recent_sessions:\n            return {}\n        \n...",
        "suggested_refactor": "Extract database operations to _get_last_session_info_data_layer() + Extract UI rendering to _get_last_session_info_ui_layer() + Extract logging to _get_last_session_info_audit_layer()"
      },
      {
        "function_name": "_get_session_info",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 79,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_session_info(self) -> Dict[str, Any]:\n        \"\"\"Extract session information\"\"\"\n        session_info: Dict[str, Any] = {}\n\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            session_info[\"session_id\"] = st.session_state.get(\"session_id\", \"unknown\")\n     ...",
        "suggested_refactor": "Extract database operations to _get_session_info_data_layer() + Extract UI rendering to _get_session_info_ui_layer() + Extract logging to _get_session_info_audit_layer()"
      },
      {
        "function_name": "_get_user_agent",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 606,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _get_user_agent(self) -> Optional[str]:\n        \"\"\"Extract user agent from Streamlit context.\"\"\"\n        try:\n            from streamlit.runtime.scriptrunner import get_script_run_ctx\n            \n            ctx = get_script_run_ctx()\n            if ctx and hasattr(ctx, 'session_info'):\n   ...",
        "suggested_refactor": "Extract UI rendering to _get_user_agent_ui_layer() + Extract logging to _get_user_agent_audit_layer()"
      },
      {
        "function_name": "_has_recent_activity",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 501,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _has_recent_activity(self) -> bool:\n        \"\"\"Check if there's been recent activity (last 2 hours).\"\"\"\n        if not self.db_manager:\n            return False\n        \n        recent_sessions = self.db_manager.get_timer_sessions(1)  # Last day\n        if not recent_sessions:\n            re...",
        "suggested_refactor": "Extract database operations to _has_recent_activity_data_layer() + Extract UI rendering to _has_recent_activity_ui_layer() + Extract logging to _has_recent_activity_audit_layer()"
      },
      {
        "function_name": "_initialize_clients_page",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 529,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _initialize_clients_page():\n    \"\"\"Initialize page, check dependencies and authentication.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    if not DATABASE_UTILS_AVAILABLE:\n        st.error(\n            ErrorMessages.LOADING_ERROR.format(\n          ...",
        "suggested_refactor": "Extract UI rendering to _initialize_clients_page_ui_layer() + Extract logging to _initialize_clients_page_audit_layer() + Extract validation to _initialize_clients_page_validator()"
      },
      {
        "function_name": "_load_and_display_clients",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 662,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _load_and_display_clients(db_manager, filter_values):\n    \"\"\"Load clients from database, apply filters and display results.\"\"\"\n    with streamlit_error_boundary(\"client_loading\"):\n        # Check rate limit for database read\n        db_read_allowed, db_read_error = check_rate_limit(\"db_read\") if...",
        "suggested_refactor": "Extract database operations to _load_and_display_clients_data_layer() + Extract UI rendering to _load_and_display_clients_ui_layer() + Extract logging to _load_and_display_clients_audit_layer() + Extract validation to _load_and_display_clients_validator()"
      },
      {
        "function_name": "_parse_epic_id",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 88,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _parse_epic_id(query_params: Dict[str, str]) -> Tuple[Optional[int], Optional[Dict[str, Any]]]:\n    \"\"\"Helper \u00fanico para ler/validar epic_id.\"\"\"\n    epic_id_str = query_params.get(\"epic_id\")\n    if not epic_id_str:\n        return None, create_api_error_response(\"Missing required parameter: epic_...",
        "suggested_refactor": "Extract database operations to _parse_epic_id_data_layer() + Extract UI rendering to _parse_epic_id_ui_layer() + Extract logging to _parse_epic_id_audit_layer()"
      },
      {
        "function_name": "_persist_focus_session",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 419,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _persist_focus_session(self, ts: TimerSession) -> bool:\n        if not DATABASE_AVAILABLE:\n            if STREAMLIT_AVAILABLE:\n                st.info(\"\u2139\ufe0f Banco indispon\u00edvel \u2014 sess\u00e3o n\u00e3o foi salva.\")\n            return False\n\n        payload = {\n            \"task_id\": ts.task_id,\n           ...",
        "suggested_refactor": "Extract database operations to _persist_focus_session_data_layer() + Extract UI rendering to _persist_focus_session_ui_layer() + Extract logging to _persist_focus_session_audit_layer()"
      },
      {
        "function_name": "_render_epic_selection_and_tasks",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 156,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _render_epic_selection_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]) -> None:\n    \"\"\"\n    Internal function to render epic selection dropdown and task list.\n    \n    Args:\n        epics: List of available epics\n        selected_epic_id: Currently selected epic ID\n    \"\"...",
        "suggested_refactor": "Extract database operations to _render_epic_selection_and_tasks_data_layer() + Extract UI rendering to _render_epic_selection_and_tasks_ui_layer() + Extract logging to _render_epic_selection_and_tasks_audit_layer()"
      },
      {
        "function_name": "_render_health_debug",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 116,
        "responsibilities": [
          "logging",
          "validation",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _render_health_debug() -> None:\n    \"\"\"Render health status debugging information.\"\"\"\n    st.markdown(\"#### \ud83c\udfe5 System Health\")\n    \n    # Overall health status\n    health = get_session_value(\"health\", {})\n    \n    if health:\n        overall = health.get(\"overall\", {})\n        status = overall.get...",
        "suggested_refactor": "Extract UI rendering to _render_health_debug_ui_layer() + Extract logging to _render_health_debug_audit_layer() + Extract validation to _render_health_debug_validator()"
      },
      {
        "function_name": "_render_raw_data_debug",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 260,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _render_raw_data_debug() -> None:\n    \"\"\"Render raw data for advanced debugging.\"\"\"\n    st.markdown(\"#### \ud83d\udccb Raw Debug Data\")\n    \n    debug_data = {\n        \"health\": get_session_value(\"health\"),\n        \"error_stats\": safe_streamlit_operation(get_error_statistics, default_return={}),\n        \"t...",
        "suggested_refactor": "Extract UI rendering to _render_raw_data_debug_ui_layer() + Extract logging to _render_raw_data_debug_audit_layer()"
      },
      {
        "function_name": "_render_session_debug",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 159,
        "responsibilities": [
          "ui",
          "auth",
          "network",
          "file_io",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _render_session_debug() -> None:\n    \"\"\"Render session state debugging information.\"\"\"\n    st.markdown(\"#### \ud83d\udcca Session State\")\n    \n    if SESSION_MANAGER_AVAILABLE:\n        # Session summary\n        summary = get_session_state_summary()\n        \n        col1, col2, col3 = st.columns(3)\n        ...",
        "suggested_refactor": "Extract UI rendering to _render_session_debug_ui_layer() + Extract logging to _render_session_debug_audit_layer()"
      },
      {
        "function_name": "_render_ui",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 181,
        "responsibilities": [
          "auth",
          "database",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _render_ui(self, get_current_task_id: Optional[Callable[[], Optional[int]]]) -> Dict[str, Any]:\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cfg: Dict[str, Any] = st.session_state.get(SK_CFG, DEFAULT_CFG)\n\n        # Header\n        st.markdown(\"## \u23f1\ufe0f Focus Tim...",
        "suggested_refactor": "Extract database operations to _render_ui_data_layer() + Extract UI rendering to _render_ui_ui_layer()"
      },
      {
        "function_name": "_set_to_disk",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 463,
        "responsibilities": [
          "logging",
          "validation",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _set_to_disk(self, cache_key: str, value: Any, ttl: int) -> None:\n        \"\"\"Set value to disk cache.\"\"\"\n        if not self.cache_dir:\n            return\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(ca...",
        "suggested_refactor": "Extract UI rendering to _set_to_disk_ui_layer() + Extract logging to _set_to_disk_audit_layer() + Extract validation to _set_to_disk_validator()"
      },
      {
        "function_name": "_setup_database_connection",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 572,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def _setup_database_connection():\n    \"\"\"Setup and return database manager instance.\"\"\"\n    with streamlit_error_boundary(\"database_initialization\"):\n        config = safe_streamlit_operation(\n            load_config,\n            default_return=None,\n            operation_name=\"load_config\",\n       ...",
        "suggested_refactor": "Extract database operations to _setup_database_connection_data_layer() + Extract UI rendering to _setup_database_connection_ui_layer() + Extract logging to _setup_database_connection_audit_layer()"
      },
      {
        "function_name": "_setup_prometheus_metrics",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 197,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _setup_prometheus_metrics(self):\n        \"\"\"Setup Prometheus metrics for monitoring.\"\"\"\n        if not PROMETHEUS_AVAILABLE:\n            return\n        \n        # Application metrics\n        self.request_count = Counter(\n            'tdd_framework_requests_total',\n            'Total number o...",
        "suggested_refactor": "Extract UI rendering to _setup_prometheus_metrics_ui_layer() + Extract logging to _setup_prometheus_metrics_audit_layer() + Extract business logic to _setup_prometheus_metrics_processor()"
      },
      {
        "function_name": "_validate_dag_structure",
        "file_path": "streamlit_extension/services/task_execution_planner.py",
        "line_number": 245,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def _validate_dag_structure(self, context: PlanningContext) -> Dict[str, Any]:\n        \"\"\"Valida estrutura DAG usando GraphAlgorithms\"\"\"\n        try:\n            # Inverter grafo para ordena\u00e7\u00e3o correta (prerequisite -> dependent)\n            inverted_graph = defaultdict(set)\n            for depe...",
        "suggested_refactor": "Extract UI rendering to _validate_dag_structure_ui_layer() + Extract logging to _validate_dag_structure_audit_layer() + Extract validation to _validate_dag_structure_validator() + Extract business logic to _validate_dag_structure_processor()"
      },
      {
        "function_name": "api_request",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 509,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def api_request(self, method: str, endpoint: str, status_code: int, \n                   duration_ms: float, user_id: Optional[str] = None):\n        \"\"\"Log API request.\"\"\"\n        \n        # Update Prometheus metrics\n        if PROMETHEUS_AVAILABLE:\n            self.request_count.labels(method=me...",
        "suggested_refactor": "Extract UI rendering to api_request_ui_layer() + Extract logging to api_request_audit_layer()"
      },
      {
        "function_name": "authenticate_api_request",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 102,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def authenticate_api_request(query_params: Dict[str, str]) -> Tuple[bool, Optional[str], Optional[str]]:\n    \"\"\"\n    Authenticate API request using multiple methods.\n    \n    Args:\n        query_params: Query parameters from request\n        \n    Returns:\n        Tuple of (is_authenticated, user_id, ...",
        "suggested_refactor": "Extract database operations to authenticate_api_request_data_layer() + Extract UI rendering to authenticate_api_request_ui_layer() + Extract logging to authenticate_api_request_audit_layer() + Extract validation to authenticate_api_request_validator()"
      },
      {
        "function_name": "benchmark_crud_operations",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 182,
        "responsibilities": [
          "network",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def benchmark_crud_operations(self, iterations: int = 1000) -> Dict[str, Any]:\n        \"\"\"Benchmark CRUD operations performance.\"\"\"\n        results = {}\n        \n        # Test client operations\n        with self.profiler.profile_operation(\"client_create\"):\n            for i in range(iterations)...",
        "suggested_refactor": "Extract database operations to benchmark_crud_operations_data_layer() + Extract UI rendering to benchmark_crud_operations_ui_layer()"
      },
      {
        "function_name": "calculate_epic_duration",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2186,
        "responsibilities": [
          "business_logic",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def calculate_epic_duration(self, epic_id: int) -> float:\n        \"\"\"Calculate total duration for an epic based on task dates.\n        \n        Args:\n            epic_id: ID of the epic to calculate duration for\n            \n        Returns:\n            Duration in days (float), or 0.0 if calcul...",
        "suggested_refactor": "Extract database operations to calculate_epic_duration_data_layer() + Extract UI rendering to calculate_epic_duration_ui_layer() + Extract logging to calculate_epic_duration_audit_layer() + Extract business logic to calculate_epic_duration_processor()"
      },
      {
        "function_name": "calculate_streaks",
        "file_path": "streamlit_extension/components/sidebar/streaks.py",
        "line_number": 16,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def calculate_streaks(timer_sessions: List[Dict[str, Any]]) -> Tuple[int, str]:\n    \"\"\"Calculate current streak from timer sessions.\"\"\"\n    if not timer_sessions:\n        return 0, \"daily focus\"\n    \n    # Group sessions by date\n    sessions_by_date = defaultdict(list)\n    \n    for session in timer_...",
        "suggested_refactor": "Extract UI rendering to calculate_streaks_ui_layer() + Extract logging to calculate_streaks_audit_layer() + Extract business logic to calculate_streaks_processor()"
      },
      {
        "function_name": "cancel_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 669,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def cancel_session(self, session_id: int, reason: Optional[str] = None) -> ServiceResult[bool]:\n        \"\"\"\n        Cancel a work session.\n        \n        Args:\n            session_id: Session ID to cancel\n            reason: Optional cancellation reason\n            \n        Returns:\n          ...",
        "suggested_refactor": "Extract database operations to cancel_session_data_layer() + Extract UI rendering to cancel_session_ui_layer() + Extract logging to cancel_session_audit_layer() + Extract business logic to cancel_session_processor()"
      },
      {
        "function_name": "check_comprehensive_protection",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 517,
        "responsibilities": [
          "ui",
          "auth",
          "file_io",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def check_comprehensive_protection(self, \n                                     operation_type: str,\n                                     endpoint: str = \"unknown\",\n                                     request_size: int = 0,\n                                     user_id: Optional[str] = None,\n    ...",
        "suggested_refactor": "Extract UI rendering to check_comprehensive_protection_ui_layer() + Extract logging to check_comprehensive_protection_audit_layer() + Extract validation to check_comprehensive_protection_validator()"
      },
      {
        "function_name": "check_database_connection",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 233,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def check_database_connection() -> bool:\n    \"\"\"\n    Verify connection via modular API (preferred).\n    \"\"\"\n    if not MODULAR_DB_AVAILABLE or get_connection is None:\n        _logger.warning(\"Modular DB API unavailable; skipping ping.\")\n        return False\n    try:\n        conn = get_connection()\n ...",
        "suggested_refactor": "Extract database operations to check_database_connection_data_layer() + Extract UI rendering to check_database_connection_ui_layer() + Extract logging to check_database_connection_audit_layer()"
      },
      {
        "function_name": "check_database_health",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1312,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def check_database_health(self) -> Dict[str, Any]:\n        \"\"\"Comprehensive database health check with diagnostics.\n\n        Performs connection tests against both framework and timer databases and\n        reports the availability of optional dependencies used by the\n        application.\n\n      ...",
        "suggested_refactor": "Extract database operations to check_database_health_data_layer() + Extract logging to check_database_health_audit_layer() + Extract validation to check_database_health_validator()"
      },
      {
        "function_name": "check_rate_limit",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 368,
        "responsibilities": [
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def check_rate_limit(self, \n                        operation_type: str, \n                        user_id: Optional[str] = None,\n                        ip_address: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n        \"\"\"\n        Check if operation is within rate limits.\n        \n       ...",
        "suggested_refactor": "Extract UI rendering to check_rate_limit_ui_layer() + Extract logging to check_rate_limit_audit_layer() + Extract validation to check_rate_limit_validator()"
      },
      {
        "function_name": "check_service_health",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 402,
        "responsibilities": [
          "logging",
          "network",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def check_service_health() -> Dict[str, Any]:\n    try:\n        container = get_service_container()\n        validation = container.validate_services()\n        status = container.get_service_status()\n        all_ok = all(validation.values())\n        return {\n            \"overall_health\": \"healthy\" if ...",
        "suggested_refactor": "Extract UI rendering to check_service_health_ui_layer() + Extract logging to check_service_health_audit_layer() + Extract validation to check_service_health_validator()"
      },
      {
        "function_name": "check_streamlit_helpers_health",
        "file_path": "streamlit_extension/utils/streamlit_helpers.py",
        "line_number": 106,
        "responsibilities": [
          "auth",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def check_streamlit_helpers_health() -> Dict[str, Any]:\n    \"\"\"Check health of Streamlit helpers.\"\"\"\n    return {\n        \"streamlit_available\": is_ui(),\n        \"ui_available\": is_ui(),\n        \"headless_mode\": is_headless(),\n        \"project_root\": str(get_project_root()),\n        \"debug_mode\": is...",
        "suggested_refactor": "Extract UI rendering to check_streamlit_helpers_health_ui_layer() + Extract logging to check_streamlit_helpers_health_audit_layer()"
      },
      {
        "function_name": "classify_exception",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 208,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def classify_exception(self, exception: Exception, context: Optional[Dict[str, Any]] = None) -> Tuple[str, str]:\n        \"\"\"\n        Classify exception by category and severity.\n        \n        Args:\n            exception: The exception to classify\n            context: Optional context informat...",
        "suggested_refactor": "Extract UI rendering to classify_exception_ui_layer() + Extract logging to classify_exception_audit_layer() + Extract validation to classify_exception_validator()"
      },
      {
        "function_name": "cleanup_application",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 379,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def cleanup_application() -> None:\n    \"\"\"\n    Release app resources. Call on shutdown.\n    - Shut down ServiceContainer\n    - Drop singleton references\n    - Clear session_state (if exists)\n    \"\"\"\n    global _service_container_singleton, _db_manager_singleton\n\n    try:\n        try:\n            shu...",
        "suggested_refactor": "Extract database operations to cleanup_application_data_layer() + Extract UI rendering to cleanup_application_ui_layer() + Extract logging to cleanup_application_audit_layer()"
      },
      {
        "function_name": "clear_health_cache",
        "file_path": "streamlit_extension/components/health_widgets.py",
        "line_number": 97,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def clear_health_cache() -> None:\n    \"\"\"Clear health-related caches using same logic as streamlit_app._clear_caches().\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n      ...",
        "suggested_refactor": "Extract UI rendering to clear_health_cache_ui_layer() + Extract logging to clear_health_cache_audit_layer()"
      },
      {
        "function_name": "clear_specific_cache",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 177,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def clear_specific_cache(cache_key: str) -> None:\n    \"\"\"Clear specific cache by key pattern.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n        \n    try:\n        # Clear specific function caches\n        if cache_key == \"user_stats\":\n            fetch_user_stats.clear()\n        elif cache_key...",
        "suggested_refactor": "Extract UI rendering to clear_specific_cache_ui_layer() + Extract logging to clear_specific_cache_audit_layer()"
      },
      {
        "function_name": "create",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 202,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create(self, epic_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new epic and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_epics (\n                    epic_key, title, description, project_id, status, priority,\n                    di...",
        "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
      },
      {
        "function_name": "create",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 247,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create(self, task_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new task and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_tasks (\n                    task_key, title, description, epic_id, status, tdd_phase,\n                    prio...",
        "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
      },
      {
        "function_name": "create_backup",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 146,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def create_backup(path: str) -> str:\n    \"\"\"\n    Cria backup no caminho informado.\n    - Se 'path' aponta para diret\u00f3rio, gera nome com timestamp.\n    - Garante diret\u00f3rio existente.\n    - Prefer\u00eancia: m\u00e9todo do manager; fallback: SQLite Backup API.\n    \"\"\"\n    p = Path(path)\n    if p.suffix == \"\" or...",
        "suggested_refactor": "Extract database operations to create_backup_data_layer() + Extract UI rendering to create_backup_ui_layer() + Extract logging to create_backup_audit_layer()"
      },
      {
        "function_name": "create_client",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 264,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_client(self, client_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new client with validation.\n        \n        Args:\n            client_data: Client information dictionary\n            \n        Returns:\n            ServiceResult with client ID if successful\n...",
        "suggested_refactor": "Extract UI rendering to create_client_ui_layer() + Extract logging to create_client_audit_layer() + Extract validation to create_client_validator() + Extract business logic to create_client_processor()"
      },
      {
        "function_name": "create_epic",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 540,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_epic(self, epic_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new epic with validation and gamification.\n        \n        Args:\n            epic_data: Epic information dictionary\n            \n        Returns:\n            ServiceResult with epic ID if succes...",
        "suggested_refactor": "Extract UI rendering to create_epic_ui_layer() + Extract logging to create_epic_audit_layer() + Extract validation to create_epic_validator() + Extract business logic to create_epic_processor()"
      },
      {
        "function_name": "create_performance_test_suite",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 517,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def create_performance_test_suite(db_manager) -> Dict[str, Any]:\n    \"\"\"Create comprehensive performance test suite.\"\"\"\n    \n    # Initialize components\n    db_tester = DatabasePerformanceTester(db_manager)\n    load_tester = LoadTester(db_manager)\n    monitor = PerformanceMonitor()\n    reporter = Pe...",
        "suggested_refactor": "Extract database operations to create_performance_test_suite_data_layer() + Extract UI rendering to create_performance_test_suite_ui_layer() + Extract logging to create_performance_test_suite_audit_layer()"
      },
      {
        "function_name": "create_project",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 407,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_project(self, project_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new project with validation.\n        \n        Args:\n            project_data: Project information dictionary\n            \n        Returns:\n            ServiceResult with project ID if succe...",
        "suggested_refactor": "Extract UI rendering to create_project_ui_layer() + Extract logging to create_project_audit_layer() + Extract validation to create_project_validator() + Extract business logic to create_project_processor()"
      },
      {
        "function_name": "create_request_context",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 478,
        "responsibilities": [
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_request_context(self, \n                              endpoint: str = \"unknown\",\n                              request_size: int = 0,\n                              user_id: Optional[str] = None) -> Optional[Any]:\n        \"\"\"Create RequestContext for DoS protection from Streamlit sessio...",
        "suggested_refactor": "Extract UI rendering to create_request_context_ui_layer() + Extract logging to create_request_context_audit_layer() + Extract validation to create_request_context_validator()"
      },
      {
        "function_name": "create_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 149,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_session(self, session_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new work session and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO work_sessions (\n                    task_id, epic_id, session_type, status, start_time,\n             ...",
        "suggested_refactor": "Extract database operations to create_session_data_layer() + Extract UI rendering to create_session_ui_layer() + Extract logging to create_session_audit_layer()"
      },
      {
        "function_name": "create_task",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 580,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def create_task(self, task_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new task with TDD workflow validation.\n        \n        Args:\n            task_data: Task information dictionary\n            \n        Returns:\n            ServiceResult with task ID if successful...",
        "suggested_refactor": "Extract UI rendering to create_task_ui_layer() + Extract logging to create_task_audit_layer() + Extract validation to create_task_validator() + Extract business logic to create_task_processor()"
      },
      {
        "function_name": "decorator",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 32,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def decorator(func: Callable):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.session_state:\n                st.error(\"\ud83d\udd12 Access denied. Please log in.\")\n                st.stop()\n            \n            auth_ma...",
        "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
      },
      {
        "function_name": "delete",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 314,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete(self, task_id: int) -> bool:\n        \"\"\"Delete task (hard delete since tasks are granular).\"\"\"\n        try:\n            # First delete related work sessions\n            self.db_manager.execute_update(\n                \"DELETE FROM work_sessions WHERE task_id = ?\", \n                (tas...",
        "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
      },
      {
        "function_name": "delete_backup",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 348,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_backup(self, backup_name: str) -> bool:\n        \"\"\"Delete a backup.\"\"\"\n        if backup_name not in self._backup_index:\n            return False\n        \n        backup_info = self._backup_index[backup_name]\n        \n        # Delete file\n        try:\n            if backup_info.file_...",
        "suggested_refactor": "Extract database operations to delete_backup_data_layer() + Extract UI rendering to delete_backup_ui_layer() + Extract logging to delete_backup_audit_layer()"
      },
      {
        "function_name": "delete_client",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 380,
        "responsibilities": [
          "logging",
          "database",
          "ui",
          "business_logic",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_client(self, client_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete client (soft delete).\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_clie...",
        "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer() + Extract business logic to delete_client_processor()"
      },
      {
        "function_name": "delete_client",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 312,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_client(self, client_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.delete_client(client_id, soft_delete=soft_delete)\n            \n            if result:\n                self._inval...",
        "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer() + Extract validation to delete_client_validator()"
      },
      {
        "function_name": "delete_client",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3413,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_client(self, client_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete client record (soft or hard delete).\n\n        Removes client from active use. Soft delete preserves data for audit\n        purposes. Hard delete permanently removes all data.\n\n        Args:\n            c...",
        "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer()"
      },
      {
        "function_name": "delete_epic",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 687,
        "responsibilities": [
          "logging",
          "database",
          "ui",
          "business_logic",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_epic(self, epic_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete epic (soft delete).\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_epic\", epic_id...",
        "suggested_refactor": "Extract database operations to delete_epic_data_layer() + Extract UI rendering to delete_epic_ui_layer() + Extract logging to delete_epic_audit_layer() + Extract business logic to delete_epic_processor()"
      },
      {
        "function_name": "delete_project",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 538,
        "responsibilities": [
          "logging",
          "database",
          "ui",
          "business_logic",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_project(self, project_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete project (soft delete).\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete...",
        "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer() + Extract business logic to delete_project_processor()"
      },
      {
        "function_name": "delete_project",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 417,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_project(self, project_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.delete_project(project_id, soft_delete=soft_delete)\n            \n            if result:\n                self._...",
        "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer() + Extract validation to delete_project_validator()"
      },
      {
        "function_name": "delete_project",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3549,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_project(self, project_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete a project (soft delete by default).\n        \n        Args:\n            project_id: ID of the project to delete\n            soft_delete: If True, mark as deleted instead of removing\n            \n       ...",
        "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer()"
      },
      {
        "function_name": "delete_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 214,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_session(self, session_id: int) -> bool:\n        \"\"\"Delete work session.\"\"\"\n        try:\n            query = \"DELETE FROM work_sessions WHERE id = ?\"\n            affected_rows = self.db_manager.execute_update(query, (session_id,))\n            return affected_rows > 0\n        except Exc...",
        "suggested_refactor": "Extract database operations to delete_session_data_layer() + Extract UI rendering to delete_session_ui_layer() + Extract logging to delete_session_audit_layer()"
      },
      {
        "function_name": "delete_task",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 727,
        "responsibilities": [
          "logging",
          "database",
          "ui",
          "business_logic",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_task(self, task_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete task (hard delete).\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_task\", task_id...",
        "suggested_refactor": "Extract database operations to delete_task_data_layer() + Extract UI rendering to delete_task_ui_layer() + Extract logging to delete_task_audit_layer() + Extract business logic to delete_task_processor()"
      },
      {
        "function_name": "delete_task",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2049,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def delete_task(self, task_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete a task (soft delete by default).\n        \n        Args:\n            task_id: ID of the task to delete\n            soft_delete: If True, mark as deleted; if False, actually delete\n            \n        Returns...",
        "suggested_refactor": "Extract database operations to delete_task_data_layer() + Extract UI rendering to delete_task_ui_layer() + Extract logging to delete_task_audit_layer()"
      },
      {
        "function_name": "execute_with_retry",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 210,
        "responsibilities": [
          "business_logic",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def execute_with_retry(self, func: Callable, *args, **kwargs):\n        \"\"\"Execute function with retry logic\"\"\"\n        last_exception = None\n        \n        for attempt in range(self.config.max_attempts):\n            try:\n                return func(*args, **kwargs)\n            except Exception...",
        "suggested_refactor": "Extract database operations to execute_with_retry_data_layer() + Extract UI rendering to execute_with_retry_ui_layer() + Extract logging to execute_with_retry_audit_layer() + Extract business logic to execute_with_retry_processor()"
      },
      {
        "function_name": "fetch_user_stats",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 297,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def fetch_user_stats(user_id: Optional[int] = None) -> Dict[str, Any]:\n    def _call():\n        try:\n            if user_id is not None:\n                return get_user_stats(user_id)  # type: ignore[call-arg]\n        except TypeError:\n            try:\n                return get_user_stats(user_id=u...",
        "suggested_refactor": "Extract UI rendering to fetch_user_stats_ui_layer() + Extract logging to fetch_user_stats_audit_layer()"
      },
      {
        "function_name": "find_active_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 61,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def find_active_session(self) -> Optional[Dict[str, Any]]:\n        \"\"\"Find currently active work session.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t.task_key,\n                       e.title as epic_title, e.epic_key\n                FROM work_ses...",
        "suggested_refactor": "Extract database operations to find_active_session_data_layer() + Extract UI rendering to find_active_session_ui_layer() + Extract logging to find_active_session_audit_layer()"
      },
      {
        "function_name": "find_recent_sessions",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 128,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def find_recent_sessions(self, days: int = 7, limit: int = 50) -> List[Dict[str, Any]]:\n        \"\"\"Find recent work sessions.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t...",
        "suggested_refactor": "Extract database operations to find_recent_sessions_data_layer() + Extract UI rendering to find_recent_sessions_ui_layer() + Extract logging to find_recent_sessions_audit_layer()"
      },
      {
        "function_name": "find_session_by_id",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 44,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def find_session_by_id(self, session_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find work session by ID.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t.task_key, \n                       e.title as epic_title, e.epic_key\n                FROM wo...",
        "suggested_refactor": "Extract database operations to find_session_by_id_data_layer() + Extract UI rendering to find_session_by_id_ui_layer() + Extract logging to find_session_by_id_audit_layer()"
      },
      {
        "function_name": "find_sessions_by_task",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 80,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def find_sessions_by_task(self, task_id: int, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find all work sessions for a specific task.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT * FROM work_sessions\n                WHERE task_id = ?\n                ORDER B...",
        "suggested_refactor": "Extract database operations to find_sessions_by_task_data_layer() + Extract UI rendering to find_sessions_by_task_ui_layer() + Extract logging to find_sessions_by_task_audit_layer()"
      },
      {
        "function_name": "generate_csrf_token",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 657,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def generate_csrf_token(self, form_id: str) -> str:\n        \"\"\"\n        Generate a secure CSRF token for a form.\n        \n        Args:\n            form_id: Unique identifier for the form\n            \n        Returns:\n            Secure CSRF token string\n        \"\"\"\n        try:\n            impo...",
        "suggested_refactor": "Extract UI rendering to generate_csrf_token_ui_layer() + Extract logging to generate_csrf_token_audit_layer() + Extract validation to generate_csrf_token_validator()"
      },
      {
        "function_name": "get_achievements",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 111,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_achievements(self, user_id: int = 1, **kwargs: Any) -> list[dict]:\n        try:\n            return db_queries.get_achievements(user_id)\n        except Exception as e:\n            self._logger.error(\"get_achievements(%s) failed: %s\", user_id, e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_achievements_ui_layer() + Extract logging to get_achievements_audit_layer()"
      },
      {
        "function_name": "get_achievements",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1079,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_achievements(self, user_id: int = 1) -> List[Dict[str, Any]]:\n        \"\"\"Get user achievements.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                query = \"\"\"\n                    SELECT at.code, at.name, at.description, at.category,\n               ...",
        "suggested_refactor": "Extract database operations to get_achievements_data_layer() + Extract logging to get_achievements_audit_layer()"
      },
      {
        "function_name": "get_active_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 710,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_active_session(self) -> ServiceResult[Optional[Dict[str, Any]]]:\n        \"\"\"\n        Get currently active work session.\n        \n        Returns:\n            ServiceResult with active session or None\n        \"\"\"\n        self.log_operation(\"get_active_session\")\n        \n        try:\n     ...",
        "suggested_refactor": "Extract logging to get_active_session_audit_layer() + Extract business logic to get_active_session_processor()"
      },
      {
        "function_name": "get_api_documentation",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 261,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_api_documentation() -> Dict[str, Any]:\n    \"\"\"\n    Get API documentation for TaskExecutionPlanner endpoints.\n    \n    Returns:\n        Dict containing API documentation\n    \"\"\"\n    return {\n        \"api_version\": \"1.0.0\",\n        \"description\": \"TaskExecutionPlanner API integrated with Strea...",
        "suggested_refactor": "Extract UI rendering to get_api_documentation_ui_layer() + Extract logging to get_api_documentation_audit_layer()"
      },
      {
        "function_name": "get_by_task_key",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 126,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_by_task_key(self, task_key: str) -> Optional[Task]:\n        \"\"\"\n        Busca tarefa por task_key.\n        \n        Args:\n            task_key: Chave \u00fanica da tarefa\n            \n        Returns:\n            Task object ou None se n\u00e3o encontrada\n            \n        Raises:\n            R...",
        "suggested_refactor": "Extract database operations to get_by_task_key_data_layer() + Extract UI rendering to get_by_task_key_ui_layer() + Extract logging to get_by_task_key_audit_layer()"
      },
      {
        "function_name": "get_client",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2623,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_client(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Retrieve single client by ID.\n\n        Args:\n            client_id: Unique client identifier. Must be a positive integer.\n\n        Returns:\n            Optional[Dict[str, Any]]: Client record dictionary or ``None`` if\n ...",
        "suggested_refactor": "Extract database operations to get_client_data_layer() + Extract UI rendering to get_client_ui_layer() + Extract logging to get_client_audit_layer() + Extract validation to get_client_validator()"
      },
      {
        "function_name": "get_client_analytics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 347,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_client_analytics(self, client_id: int, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get analytics for a specific client.\n        \n        Args:\n            client_id: Client ID\n            days: Number of days to include\n            \n        Returns:\n            ...",
        "suggested_refactor": "Extract UI rendering to get_client_analytics_ui_layer() + Extract logging to get_client_analytics_audit_layer() + Extract business logic to get_client_analytics_processor()"
      },
      {
        "function_name": "get_client_by_key",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3267,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_client_by_key(self, client_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get client by client_key.\n        \n        Args:\n            client_key: Client key to search for\n            \n        Returns:\n            Client dictionary if found, None otherwise\n        \"\"\"\n        try:\n   ...",
        "suggested_refactor": "Extract database operations to get_client_by_key_data_layer() + Extract UI rendering to get_client_by_key_ui_layer() + Extract logging to get_client_by_key_audit_layer()"
      },
      {
        "function_name": "get_client_dashboard",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2954,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_client_dashboard(self, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get client dashboard data using the database view.\n        \n        Args:\n            client_id: Get data for specific client (optional)\n            \n        Returns:\n            List of client da...",
        "suggested_refactor": "Extract database operations to get_client_dashboard_data_layer() + Extract UI rendering to get_client_dashboard_ui_layer() + Extract logging to get_client_dashboard_audit_layer()"
      },
      {
        "function_name": "get_daily_summary",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1646,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_daily_summary(self) -> Dict[str, Any]:\n        \"\"\"Get today's activity summary.\"\"\"\n        summary = {\n            \"tasks_completed\": 0,\n            \"tasks_in_progress\": 0,\n            \"tasks_created\": 0,\n            \"focus_time_minutes\": 0,\n            \"timer_sessions\": 0,\n            \"...",
        "suggested_refactor": "Extract database operations to get_daily_summary_data_layer() + Extract UI rendering to get_daily_summary_ui_layer() + Extract logging to get_daily_summary_audit_layer()"
      },
      {
        "function_name": "get_dashboard_summary",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 291,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_dashboard_summary(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get comprehensive dashboard summary metrics.\n        \n        Args:\n            days: Number of days to include in metrics\n            \n        Returns:\n            ServiceResult with dashboard ...",
        "suggested_refactor": "Extract UI rendering to get_dashboard_summary_ui_layer() + Extract logging to get_dashboard_summary_audit_layer() + Extract business logic to get_dashboard_summary_processor()"
      },
      {
        "function_name": "get_epic",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 596,
        "responsibilities": [
          "logging",
          "network",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get epic by ID with project and client information.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with epic data if found\n        \"\"\"\n        self....",
        "suggested_refactor": "Extract UI rendering to get_epic_ui_layer() + Extract logging to get_epic_audit_layer()"
      },
      {
        "function_name": "get_epic_dependency_summary",
        "file_path": "streamlit_extension/repos/deps_repo.py",
        "line_number": 223,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_dependency_summary(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Retorna sum\u00e1rio de depend\u00eancias do \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict com m\u00e9tricas de depend\u00eancias\n            \n        Raises:\n  ...",
        "suggested_refactor": "Extract database operations to get_epic_dependency_summary_data_layer() + Extract UI rendering to get_epic_dependency_summary_ui_layer() + Extract logging to get_epic_dependency_summary_audit_layer()"
      },
      {
        "function_name": "get_epic_effort_summary",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 342,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_effort_summary(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Retorna sum\u00e1rio de esfor\u00e7o do \u00e9pico com prote\u00e7\u00e3o contra divis\u00e3o por zero.\n        \n        PATCH 5: Sum\u00e1rio robusto (divis\u00e3o por zero protegida)\n        \n        Args:\n            epic_id: ID do \u00e9pico\n        ...",
        "suggested_refactor": "Extract database operations to get_epic_effort_summary_data_layer() + Extract UI rendering to get_epic_effort_summary_ui_layer() + Extract logging to get_epic_effort_summary_audit_layer()"
      },
      {
        "function_name": "get_epic_metrics",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 296,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_metrics(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get epic metrics (tasks, progress, time tracking).\"\"\"\n        try:\n            # Task counts by status\n            task_query = \"\"\"\n                SELECT status, COUNT(*) as count\n                FROM framework_tasks\n       ...",
        "suggested_refactor": "Extract database operations to get_epic_metrics_data_layer() + Extract UI rendering to get_epic_metrics_ui_layer() + Extract logging to get_epic_metrics_audit_layer()"
      },
      {
        "function_name": "get_epic_progress",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1202,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_progress(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get detailed progress for an epic with extensive debugging.\"\"\"\n\n        # Early validation\n        if epic_id is None:\n            print(\"DEBUG: get_epic_progress called with epic_id=None\")\n            return self._get_defau...",
        "suggested_refactor": "Extract database operations to get_epic_progress_data_layer() + Extract UI rendering to get_epic_progress_ui_layer() + Extract logging to get_epic_progress_audit_layer()"
      },
      {
        "function_name": "get_epic_summary",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 829,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_summary(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get epic summary with metrics and gamification data.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with epic summary data\n        \"\"\"\n     ...",
        "suggested_refactor": "Extract UI rendering to get_epic_summary_ui_layer() + Extract logging to get_epic_summary_audit_layer() + Extract business logic to get_epic_summary_processor()"
      },
      {
        "function_name": "get_epic_timeline",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2301,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epic_timeline(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get comprehensive timeline information for an epic.\n        \n        Args:\n            epic_id: ID of the epic to get timeline for\n            \n        Returns:\n            Dictionary with timeline data including dates, dura...",
        "suggested_refactor": "Extract database operations to get_epic_timeline_data_layer() + Extract UI rendering to get_epic_timeline_ui_layer() + Extract logging to get_epic_timeline_audit_layer()"
      },
      {
        "function_name": "get_epics_by_project",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 789,
        "responsibilities": [
          "logging",
          "ui",
          "business_logic",
          "file_io",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epics_by_project(self, project_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all epics for a specific project.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with list of epics\n        \"\"\"\n     ...",
        "suggested_refactor": "Extract UI rendering to get_epics_by_project_ui_layer() + Extract logging to get_epics_by_project_audit_layer() + Extract business logic to get_epics_by_project_processor()"
      },
      {
        "function_name": "get_epics_with_hierarchy",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2802,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_epics_with_hierarchy(self, project_id: Optional[int] = None, client_id: Optional[int] = None,\n                               page: int = 1, page_size: int = 25, status_filter: str = \"\") -> Dict[str, Any]:\n        \"\"\"Get epics with complete hierarchy information (client \u2192 project \u2192 epic) ...",
        "suggested_refactor": "Extract database operations to get_epics_with_hierarchy_data_layer() + Extract UI rendering to get_epics_with_hierarchy_ui_layer() + Extract logging to get_epics_with_hierarchy_audit_layer()"
      },
      {
        "function_name": "get_execution_summary",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1199,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_execution_summary(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Obt\u00e9m sum\u00e1rio executivo de um plano de execu\u00e7\u00e3o.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            ServiceResult contendo sum\u00e1rio executivo\n        ...",
        "suggested_refactor": "Extract database operations to get_execution_summary_data_layer() + Extract UI rendering to get_execution_summary_ui_layer() + Extract logging to get_execution_summary_audit_layer()"
      },
      {
        "function_name": "get_focus_time_from_db",
        "file_path": "streamlit_extension/components/sidebar/database_utils.py",
        "line_number": 23,
        "responsibilities": [
          "auth",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_focus_time_from_db(user_id: int = 1) -> tuple[str, Optional[str]]:\n    \"\"\"\n    Get real focus time from work_sessions table.\n    \n    Returns:\n        Tuple of (focus_display, delta_display)\n    \"\"\"\n    if not DATABASE_AVAILABLE or not get_connection_context:\n        return \"2.5h\", \"0.5h\"  #...",
        "suggested_refactor": "Extract database operations to get_focus_time_from_db_data_layer() + Extract UI rendering to get_focus_time_from_db_ui_layer()"
      },
      {
        "function_name": "get_focus_trends",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 101,
        "responsibilities": [
          "business_logic",
          "auth",
          "database",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_focus_trends(self, days: int = 14) -> Dict[str, Any]:\n        \"\"\"Get focus rating trends with caching.\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        timer_sessions = self.db_manager.get_timer_sessions(days)\n   ...",
        "suggested_refactor": "Extract database operations to get_focus_trends_data_layer() + Extract business logic to get_focus_trends_processor()"
      },
      {
        "function_name": "get_gamification_data",
        "file_path": "streamlit_extension/components/sidebar/gamification.py",
        "line_number": 28,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_gamification_data(user_id: int = 1) -> Dict[str, Any]:\n    \"\"\"Get real gamification data from database.\"\"\"\n    if not DATABASE_AVAILABLE:\n        return get_fallback_gamification_data()\n\n    try:\n        if DATABASE_AVAILABLE:\n            # Get user stats (points, completed tasks)\n          ...",
        "suggested_refactor": "Extract logging to get_gamification_data_audit_layer() + Extract business logic to get_gamification_data_processor()"
      },
      {
        "function_name": "get_hierarchy_overview",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2913,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_hierarchy_overview(self, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get complete hierarchy overview using the database view.\n        \n        Args:\n            client_id: Filter by specific client ID (optional)\n            \n        Returns:\n            List of h...",
        "suggested_refactor": "Extract database operations to get_hierarchy_overview_data_layer() + Extract UI rendering to get_hierarchy_overview_ui_layer() + Extract logging to get_hierarchy_overview_audit_layer()"
      },
      {
        "function_name": "get_kanban_tasks",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2094,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_kanban_tasks(self) -> Dict[str, List[Dict[str, Any]]]:\n        \"\"\"Get tasks optimized for Kanban board display (grouped by status).\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                query = \"\"\"\n                    SELECT t.id, t.epic_id, t.title, ...",
        "suggested_refactor": "Extract database operations to get_kanban_tasks_data_layer() + Extract UI rendering to get_kanban_tasks_ui_layer() + Extract logging to get_kanban_tasks_audit_layer()"
      },
      {
        "function_name": "get_optimized_connection",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 233,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_optimized_connection(self) -> Iterator[sqlite3.Connection]:\n        \"\"\"\n        Fornece uma conex\u00e3o otimizada para o thread atual.\n        - Reuso por thread_id\n        - Evic\u00e7\u00e3o LRU se exceder o limite\n        - Cleanup peri\u00f3dico por TTL\n        - Rollback autom\u00e1tico em exce\u00e7\u00e3o com tran...",
        "suggested_refactor": "Extract database operations to get_optimized_connection_data_layer() + Extract UI rendering to get_optimized_connection_ui_layer() + Extract logging to get_optimized_connection_audit_layer()"
      },
      {
        "function_name": "get_pending_notifications",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1768,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_pending_notifications(self) -> List[Dict[str, Any]]:\n        \"\"\"Get pending notifications for the user.\"\"\"\n        notifications = []\n        \n        try:\n            with self.get_connection(\"framework\") as conn:\n                # Check for overdue tasks\n                if SQLALCHEMY_A...",
        "suggested_refactor": "Extract database operations to get_pending_notifications_data_layer() + Extract UI rendering to get_pending_notifications_ui_layer() + Extract logging to get_pending_notifications_audit_layer()"
      },
      {
        "function_name": "get_performance_insights",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 175,
        "responsibilities": [
          "auth",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_performance_insights(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Generate actionable performance insights.\"\"\"\n        \n        if not self.db_manager:\n            return []\n        \n        insights = []\n        timer_sessions = self.db_manager.get_timer_sessions(days)\n    ...",
        "suggested_refactor": "Extract database operations to get_performance_insights_data_layer() + Extract UI rendering to get_performance_insights_ui_layer()"
      },
      {
        "function_name": "get_productivity_metrics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 163,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_productivity_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get productivity and time tracking metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Daily productivity\n            daily_query = \"\"\"\n               ...",
        "suggested_refactor": "Extract database operations to get_productivity_metrics_data_layer() + Extract UI rendering to get_productivity_metrics_ui_layer() + Extract logging to get_productivity_metrics_audit_layer()"
      },
      {
        "function_name": "get_productivity_metrics",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 123,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_productivity_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get detailed productivity metrics with extended caching.\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        # Get data\n        timer_sessions ...",
        "suggested_refactor": "Extract database operations to get_productivity_metrics_data_layer() + Extract UI rendering to get_productivity_metrics_ui_layer() + Extract business logic to get_productivity_metrics_processor()"
      },
      {
        "function_name": "get_productivity_patterns",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 260,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_productivity_patterns(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get productivity patterns for analysis.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Sessions by hour of day\n            hourly_query = \"\"\"\n            ...",
        "suggested_refactor": "Extract database operations to get_productivity_patterns_data_layer() + Extract UI rendering to get_productivity_patterns_ui_layer() + Extract logging to get_productivity_patterns_audit_layer()"
      },
      {
        "function_name": "get_productivity_stats",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1552,
        "responsibilities": [
          "logging",
          "database",
          "business_logic",
          "auth",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_productivity_stats(self, days: int = 7) -> Dict[str, Any]:\n        \"\"\"Get productivity statistics for the last N days.\"\"\"\n        stats = {\n            \"activity_by_date\": {},\n            \"tasks_completed_total\": 0,\n            \"focus_time_total\": 0,\n            \"average_daily_tasks\": 0,...",
        "suggested_refactor": "Extract database operations to get_productivity_stats_data_layer() + Extract logging to get_productivity_stats_audit_layer() + Extract business logic to get_productivity_stats_processor()"
      },
      {
        "function_name": "get_project_by_key",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3298,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_project_by_key(self, client_id: int, project_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get project by client_id and project_key.\n        \n        Args:\n            client_id: Client ID\n            project_key: Project key to search for\n            \n        Returns:\n            Pr...",
        "suggested_refactor": "Extract database operations to get_project_by_key_data_layer() + Extract UI rendering to get_project_by_key_ui_layer() + Extract logging to get_project_by_key_audit_layer()"
      },
      {
        "function_name": "get_project_dashboard",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2996,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_project_dashboard(self, project_id: Optional[int] = None, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get project dashboard data using the database view.\n        \n        Args:\n            project_id: Get data for specific project (optional)\n            client_id...",
        "suggested_refactor": "Extract database operations to get_project_dashboard_data_layer() + Extract UI rendering to get_project_dashboard_ui_layer() + Extract logging to get_project_dashboard_audit_layer()"
      },
      {
        "function_name": "get_project_summary",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 651,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_project_summary(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get project summary with metrics and client information.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project summary dat...",
        "suggested_refactor": "Extract UI rendering to get_project_summary_ui_layer() + Extract logging to get_project_summary_audit_layer() + Extract business logic to get_project_summary_processor()"
      },
      {
        "function_name": "get_query_stats",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 71,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_query_stats() -> Dict[str, Any]:\n    \"\"\"\n    Estat\u00edsticas de queries conforme implementado no manager.\n    Fallback: PRAGMAs b\u00e1sicos (page_count, page_size, freelist_count, cache_size).\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().get_query_statistics()\n    except Exception a...",
        "suggested_refactor": "Extract database operations to get_query_stats_data_layer() + Extract UI rendering to get_query_stats_ui_layer() + Extract logging to get_query_stats_audit_layer()"
      },
      {
        "function_name": "get_real_time_stats",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 146,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_real_time_stats(self) -> Dict[str, Any]:\n        \"\"\"Get real-time statistics (no caching).\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        # Today's stats\n        today_sessions = self._get_today_sessions()\n     ...",
        "suggested_refactor": "Extract database operations to get_real_time_stats_data_layer() + Extract UI rendering to get_real_time_stats_ui_layer() + Extract logging to get_real_time_stats_audit_layer()"
      },
      {
        "function_name": "get_recent_sessions",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 782,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_recent_sessions(self, days: int = 7, limit: int = 50) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get recent work sessions.\n        \n        Args:\n            days: Number of days to look back\n            limit: Maximum number of sessions to return\n            \n        Re...",
        "suggested_refactor": "Extract UI rendering to get_recent_sessions_ui_layer() + Extract logging to get_recent_sessions_audit_layer()"
      },
      {
        "function_name": "get_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 733,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_session(self, session_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get work session by ID.\n        \n        Args:\n            session_id: Session ID\n            \n        Returns:\n            ServiceResult with session data\n        \"\"\"\n        self.log_operation(\"get_ses...",
        "suggested_refactor": "Extract logging to get_session_audit_layer() + Extract business logic to get_session_processor()"
      },
      {
        "function_name": "get_session_services",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 363,
        "responsibilities": [
          "auth",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_session_services() -> Tuple[Optional[\"DatabaseManager\"], Optional[\"ServiceContainer\"]]:\n    \"\"\"\n    Returns (DatabaseManager legacy, ServiceContainer) from Streamlit session.\n    In environments without Streamlit, returns global values.\n    \"\"\"\n    if _is_streamlit():\n        if not st.sessi...",
        "suggested_refactor": "Extract database operations to get_session_services_data_layer() + Extract UI rendering to get_session_services_ui_layer()"
      },
      {
        "function_name": "get_session_state_summary",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 338,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def get_session_state_summary() -> Dict[str, Any]:\n    \"\"\"Get a summary of current session state.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"status\": \"streamlit_unavailable\"}\n    \n    return {\n        \"keys\": list(st.session_state.keys()),\n        \"key_count\": len(st.session_state.keys()),\n...",
        "suggested_refactor": "Extract UI rendering to get_session_state_summary_ui_layer() + Extract logging to get_session_state_summary_audit_layer()"
      },
      {
        "function_name": "get_session_statistics",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 224,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_session_statistics(self, task_id: Optional[int] = None, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get session statistics for analytics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            if task_id:\n                where_clause = ...",
        "suggested_refactor": "Extract database operations to get_session_statistics_data_layer() + Extract UI rendering to get_session_statistics_ui_layer() + Extract logging to get_session_statistics_audit_layer()"
      },
      {
        "function_name": "get_session_statistics",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 805,
        "responsibilities": [
          "ui",
          "business_logic",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_session_statistics(self, task_id: Optional[int] = None, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get session statistics for analytics.\n        \n        Args:\n            task_id: Optional task ID to filter by\n            days: Number of days to analyze\n      ...",
        "suggested_refactor": "Extract UI rendering to get_session_statistics_ui_layer() + Extract logging to get_session_statistics_audit_layer() + Extract business logic to get_session_statistics_processor()"
      },
      {
        "function_name": "get_task",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 636,
        "responsibilities": [
          "logging",
          "network",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_task(self, task_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get task by ID with epic and project information.\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with task data if found\n        \"\"\"\n        self.lo...",
        "suggested_refactor": "Extract UI rendering to get_task_ui_layer() + Extract logging to get_task_audit_layer()"
      },
      {
        "function_name": "get_task_id_to_key_mapping",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 282,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_task_id_to_key_mapping(self, epic_id: int) -> Dict[int, str]:\n        \"\"\"\n        Retorna mapeamento task_id -> task_key para \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict {task_id: task_key}\n            \n        Raises:\n   ...",
        "suggested_refactor": "Extract database operations to get_task_id_to_key_mapping_data_layer() + Extract UI rendering to get_task_id_to_key_mapping_ui_layer() + Extract logging to get_task_id_to_key_mapping_audit_layer()"
      },
      {
        "function_name": "get_task_summary",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 975,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_task_summary(self, task_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get task summary with time tracking and TDD progress.\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with task summary data\n        \"\"\"\n    ...",
        "suggested_refactor": "Extract UI rendering to get_task_summary_ui_layer() + Extract logging to get_task_summary_audit_layer() + Extract business logic to get_task_summary_processor()"
      },
      {
        "function_name": "get_task_time_tracking",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 342,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_task_time_tracking(self, task_id: int) -> Dict[str, Any]:\n        \"\"\"Get time tracking data for a task.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT \n                    COUNT(*) as session_count,\n                    SUM(duration_minutes) as total_minutes,\n             ...",
        "suggested_refactor": "Extract database operations to get_task_time_tracking_data_layer() + Extract UI rendering to get_task_time_tracking_ui_layer() + Extract logging to get_task_time_tracking_audit_layer()"
      },
      {
        "function_name": "get_tasks_by_epic",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 821,
        "responsibilities": [
          "logging",
          "ui",
          "business_logic",
          "file_io",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_tasks_by_epic(self, epic_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all tasks for a specific epic.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with list of tasks\n        \"\"\"\n        self.log_ope...",
        "suggested_refactor": "Extract UI rendering to get_tasks_by_epic_ui_layer() + Extract logging to get_tasks_by_epic_audit_layer() + Extract business logic to get_tasks_by_epic_processor()"
      },
      {
        "function_name": "get_tdd_cycle_metrics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 111,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_tdd_cycle_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get TDD cycle completion metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Tasks by TDD phase\n            phase_query = \"\"\"\n                SELECT \n    ...",
        "suggested_refactor": "Extract database operations to get_tdd_cycle_metrics_data_layer() + Extract UI rendering to get_tdd_cycle_metrics_ui_layer() + Extract logging to get_tdd_cycle_metrics_audit_layer()"
      },
      {
        "function_name": "get_tdd_metrics_report",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 460,
        "responsibilities": [
          "business_logic",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_tdd_metrics_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get TDD-specific metrics and analysis.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with TDD metrics report\n       ...",
        "suggested_refactor": "Extract UI rendering to get_tdd_metrics_report_ui_layer() + Extract logging to get_tdd_metrics_report_audit_layer() + Extract business logic to get_tdd_metrics_report_processor()"
      },
      {
        "function_name": "get_timer_sessions",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 97,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_timer_sessions(self, **kwargs: Any) -> list[dict]:\n        try:\n            return db_queries.list_timer_sessions()\n        except Exception as e:\n            self._logger.error(\"get_timer_sessions failed: %s\", e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_timer_sessions_ui_layer() + Extract logging to get_timer_sessions_audit_layer()"
      },
      {
        "function_name": "get_timer_sessions",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 981,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_timer_sessions(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Get recent timer sessions with short-term caching.\"\"\"\n        if not self.timer_db_path.exists():\n            return []\n        \n        try:\n            with self.get_connection(\"timer\") as conn:\n                qu...",
        "suggested_refactor": "Extract database operations to get_timer_sessions_data_layer() + Extract logging to get_timer_sessions_audit_layer()"
      },
      {
        "function_name": "get_user_achievements",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1815,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_user_achievements(self, limit: int = 10) -> List[Dict[str, Any]]:\n        \"\"\"Get user achievements.\"\"\"\n        achievements = []\n        \n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.exe...",
        "suggested_refactor": "Extract database operations to get_user_achievements_data_layer() + Extract logging to get_user_achievements_audit_layer()"
      },
      {
        "function_name": "get_user_stats",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 104,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_user_stats(self, user_id: int = 1, **kwargs: Any) -> dict:\n        try:\n            return db_queries.get_user_stats(user_id)\n        except Exception as e:\n            self._logger.error(\"get_user_stats(%s) failed: %s\", user_id, e, exc_info=True)\n            return {}\n",
        "suggested_refactor": "Extract UI rendering to get_user_stats_ui_layer() + Extract logging to get_user_stats_audit_layer()"
      },
      {
        "function_name": "get_user_stats",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1011,
        "responsibilities": [
          "logging",
          "auth",
          "database",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def get_user_stats(self, user_id: int = 1) -> Dict[str, Any]:\n        \"\"\"Get user statistics and gamification data.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                stats = {}\n                \n                # Basic stats\n                if SQLALCHEMY_A...",
        "suggested_refactor": "Extract database operations to get_user_stats_data_layer() + Extract logging to get_user_stats_audit_layer()"
      },
      {
        "function_name": "handle_api_request",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 40,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_api_request(api_endpoint: str, query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"Main API request handler for TaskExecutionPlanner endpoints.\"\"\"\n    validation = validate_api_request(query_params)\n    if not validation.get(\"success\"):\n        return create_api_error_response(\n      ...",
        "suggested_refactor": "Extract database operations to handle_api_request_data_layer() + Extract UI rendering to handle_api_request_ui_layer() + Extract logging to handle_api_request_audit_layer()"
      },
      {
        "function_name": "handle_callback",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 94,
        "responsibilities": [
          "auth",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def handle_callback(self, authorization_code: str, state: str) -> Dict[str, Any]:\n        \"\"\"Handle OAuth callback and exchange code for tokens.\"\"\"\n        # Verify CSRF state\n        if state != st.session_state.get('oauth_state'):\n            raise ValueError(\"Invalid OAuth state - possible CS...",
        "suggested_refactor": "Extract UI rendering to handle_callback_ui_layer() + Extract logging to handle_callback_audit_layer()"
      },
      {
        "function_name": "handle_epic_validation",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 153,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_epic_validation(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle epic dependency validation API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to validate\n        \n    Returns:\n        JSON response with validation results\n    \"\"\"\n    epic_id, err ...",
        "suggested_refactor": "Extract database operations to handle_epic_validation_data_layer() + Extract UI rendering to handle_epic_validation_ui_layer() + Extract logging to handle_epic_validation_audit_layer()"
      },
      {
        "function_name": "handle_exception",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 271,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def handle_exception(self,\n                        exception: Exception,\n                        context: Optional[Dict[str, Any]] = None,\n                        show_user_message: bool = True,\n                        attempt_recovery: bool = True) -> StreamlitError:\n        \"\"\"\n        Handle ...",
        "suggested_refactor": "Extract database operations to handle_exception_data_layer() + Extract UI rendering to handle_exception_ui_layer() + Extract logging to handle_exception_audit_layer()"
      },
      {
        "function_name": "handle_execution_planning",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 102,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_execution_planning(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle execution planning API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to plan\n        preset (optional): Scoring preset (default: balanced)\n        custom_weights (optional): JSON ...",
        "suggested_refactor": "Extract database operations to handle_execution_planning_data_layer() + Extract UI rendering to handle_execution_planning_ui_layer() + Extract logging to handle_execution_planning_audit_layer()"
      },
      {
        "function_name": "handle_execution_summary",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 207,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_execution_summary(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle execution summary API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to summarize\n        preset (optional): Scoring preset (default: balanced)\n        \n    Returns:\n        JSON re...",
        "suggested_refactor": "Extract database operations to handle_execution_summary_data_layer() + Extract UI rendering to handle_execution_summary_ui_layer() + Extract logging to handle_execution_summary_audit_layer()"
      },
      {
        "function_name": "handle_presets_list",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 236,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_presets_list(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle scoring presets listing API endpoint.\n    \n    Query params:\n        None required\n        \n    Returns:\n        JSON response with available scoring presets\n    \"\"\"\n    from ..models.scoring import ScoringSy...",
        "suggested_refactor": "Extract database operations to handle_presets_list_data_layer() + Extract UI rendering to handle_presets_list_ui_layer() + Extract logging to handle_presets_list_audit_layer()"
      },
      {
        "function_name": "handle_scoring_analysis",
        "file_path": "streamlit_extension/endpoints/execution_api.py",
        "line_number": 178,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def handle_scoring_analysis(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle task scoring analysis API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to analyze\n        preset (optional): Scoring preset (default: balanced)\n        \n    Returns:\n        JSON r...",
        "suggested_refactor": "Extract database operations to handle_scoring_analysis_data_layer() + Extract UI rendering to handle_scoring_analysis_ui_layer() + Extract logging to handle_scoring_analysis_audit_layer()"
      },
      {
        "function_name": "init_protected_page",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 119,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def init_protected_page(page_title: str, required_roles: Optional[list[UserRole]] = None):\n    \"\"\"Initialize a protected page with authentication checks.\n    \n    Args:\n        page_title: Title to display on the page\n        required_roles: Optional list of required roles\n    \n    Returns:\n        ...",
        "suggested_refactor": "Extract UI rendering to init_protected_page_ui_layer() + Extract logging to init_protected_page_audit_layer()"
      },
      {
        "function_name": "initialize_session_state",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 334,
        "responsibilities": [
          "ui",
          "auth",
          "network",
          "file_io",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def initialize_session_state():\n    if not is_ui():\n        return\n\n    if EXC_AVAILABLE and not st.session_state.get(\"exception_handler_installed\"):\n        install_global_exception_handler()\n        st.session_state.exception_handler_installed = True\n\n    if CONFIG_AVAILABLE and \"config\" not in st...",
        "suggested_refactor": "Extract UI rendering to initialize_session_state_ui_layer() + Extract logging to initialize_session_state_audit_layer()"
      },
      {
        "function_name": "initialize_session_state",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 99,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def initialize_session_state() -> None:\n    \"\"\"\n    Initialize all session state variables and application setup.\n    This function replaces the initialize_session_state from streamlit_app.py\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        # Exception handler setup\n        _...",
        "suggested_refactor": "Extract database operations to initialize_session_state_data_layer() + Extract UI rendering to initialize_session_state_ui_layer() + Extract logging to initialize_session_state_audit_layer()"
      },
      {
        "function_name": "initialize_streamlit_session",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 332,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def initialize_streamlit_session() -> None:\n    \"\"\"\n    Prepare st.session_state and initialize services when necessary.\n    Call early in the app cycle.\n    \"\"\"\n    if not _is_streamlit():\n        return\n\n    ss = st.session_state\n    ss.setdefault(\"services_initialized\", False)\n    ss.setdefault(\"...",
        "suggested_refactor": "Extract database operations to initialize_streamlit_session_data_layer() + Extract UI rendering to initialize_streamlit_session_ui_layer() + Extract logging to initialize_streamlit_session_audit_layer()"
      },
      {
        "function_name": "is_debug_mode",
        "file_path": "streamlit_extension/utils/cache_utils.py",
        "line_number": 108,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def is_debug_mode() -> bool:\n    \"\"\"\n    Check if debug mode is enabled.\n    \n    Returns:\n        True if debug mode enabled, False otherwise\n    \"\"\"\n    # Import session_manager to avoid circular imports\n    try:\n        from .session_manager import get_session_value\n        config = get_session_v...",
        "suggested_refactor": "Extract UI rendering to is_debug_mode_ui_layer() + Extract logging to is_debug_mode_audit_layer()"
      },
      {
        "function_name": "load_config",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 278,
        "responsibilities": [
          "logging",
          "ui",
          "business_logic",
          "auth",
          "file_io",
          "network"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def load_config(env_file: Optional[str] = None) -> StreamlitConfig:\n    \"\"\"\n    Load configuration from environment variables and .env file.\n    \n    Args:\n        env_file: Path to .env file (defaults to .env in current directory)\n    \n    Returns:\n        StreamlitConfig: Loaded and validated conf...",
        "suggested_refactor": "Extract UI rendering to load_config_ui_layer() + Extract logging to load_config_audit_layer() + Extract business logic to load_config_processor()"
      },
      {
        "function_name": "log",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 357,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def log(self, level: LogLevel, event_type: EventType, component: str, \n            operation: str, message: str, **kwargs):\n        \"\"\"Generic structured logging method.\"\"\"\n        \n        log_entry = self._create_log_entry(\n            level, event_type, component, operation, message, **kwargs...",
        "suggested_refactor": "Extract database operations to log_data_layer() + Extract UI rendering to log_ui_layer() + Extract logging to log_audit_layer()"
      },
      {
        "function_name": "log_api_request",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 206,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def log_api_request(query_params: Dict[str, str], user_id: Optional[str], \n                   auth_method: Optional[str], response_time: float = 0.0):\n    \"\"\"\n    Log API request for monitoring and analytics.\n    \n    Args:\n        query_params: Request parameters\n        user_id: Authenticated user...",
        "suggested_refactor": "Extract database operations to log_api_request_data_layer() + Extract UI rendering to log_api_request_ui_layer() + Extract logging to log_api_request_audit_layer()"
      },
      {
        "function_name": "optimize",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 105,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def optimize() -> Dict[str, Any]:\n    \"\"\"\n    Executa rotinas de otimiza\u00e7\u00e3o (VACUUM/ANALYZE/etc.).\n    Prefer\u00eancia: manager. Fallback: modular + PRAGMAs padr\u00e3o.\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().optimize_database()\n    except Exception as e:\n        logger.debug(\"Legacy op...",
        "suggested_refactor": "Extract database operations to optimize_data_layer() + Extract UI rendering to optimize_ui_layer() + Extract logging to optimize_audit_layer()"
      },
      {
        "function_name": "pause_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 590,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def pause_session(self, session_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Pause an active work session.\n        \n        Args:\n            session_id: Session ID to pause\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation...",
        "suggested_refactor": "Extract database operations to pause_session_data_layer() + Extract UI rendering to pause_session_ui_layer() + Extract logging to pause_session_audit_layer() + Extract business logic to pause_session_processor()"
      },
      {
        "function_name": "process_request",
        "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
        "line_number": 57,
        "responsibilities": [
          "auth",
          "logging",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def process_request(self, request: Dict[str, Any]) -> MiddlewareResponse:\n        info = self.extract_request_info(request)\n        if not self.dos.record_request(info[\"ip\"]):\n            self.logger.warning(\n                \"dos_block\",\n                extra={\"ip\": info[\"ip\"], \"endpoint\": info[...",
        "suggested_refactor": "Extract UI rendering to process_request_ui_layer() + Extract logging to process_request_audit_layer()"
      },
      {
        "function_name": "release_connection",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 527,
        "responsibilities": [
          "network",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def release_connection(self, connection: Union[Connection, SQLiteConnection]) -> None:\n        \"\"\"Return connection to pool with cleanup.\n\n        This method is provided for cases where a connection obtained via\n        :meth:`get_connection` needs to be closed manually instead of using the\n   ...",
        "suggested_refactor": "Extract database operations to release_connection_data_layer() + Extract UI rendering to release_connection_ui_layer() + Extract logging to release_connection_audit_layer()"
      },
      {
        "function_name": "render_backup_restore_ui",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 487,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "file_io",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_backup_restore_ui() -> None:\n    \"\"\"Render backup and restore UI in Streamlit.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[BACKUP & RESTORE UI]\")\n        return\n    \n    backup_manager = get_backup_manager()\n    \n    st.markdown(\"### \ud83d\udcbe Configuration Backup & Restore\")\n    \n    # Cr...",
        "suggested_refactor": "Extract database operations to render_backup_restore_ui_data_layer() + Extract UI rendering to render_backup_restore_ui_ui_layer() + Extract logging to render_backup_restore_ui_audit_layer()"
      },
      {
        "function_name": "render_client_card",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 65,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_client_card(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render an individual client card.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.container():\n        # Card header with status indicator\n        status_colors = {\n            StatusValues.ACTIVE....",
        "suggested_refactor": "Extract database operations to render_client_card_data_layer() + Extract UI rendering to render_client_card_ui_layer() + Extract logging to render_client_card_audit_layer() + Extract validation to render_client_card_validator()"
      },
      {
        "function_name": "render_create_client_form",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 368,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_create_client_form(db_manager: DatabaseManager):\n    \"\"\"Render the create new client form.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.expander(\"\u2795 Create New Client\", expanded=False):\n        with st.form(\"create_client_form\"):\n            st.markdown(f\"### {UIConst...",
        "suggested_refactor": "Extract database operations to render_create_client_form_data_layer() + Extract UI rendering to render_create_client_form_ui_layer() + Extract logging to render_create_client_form_audit_layer() + Extract validation to render_create_client_form_validator()"
      },
      {
        "function_name": "render_create_project_form",
        "file_path": "streamlit_extension/pages/projects.py",
        "line_number": 383,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_create_project_form(db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the create new project form.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.expander(\"\u2795 Create New Project\", expanded=False):\n        with st.form(\"create_project_form\"):\n     ...",
        "suggested_refactor": "Extract database operations to render_create_project_form_data_layer() + Extract UI rendering to render_create_project_form_ui_layer() + Extract logging to render_create_project_form_audit_layer() + Extract validation to render_create_project_form_validator()"
      },
      {
        "function_name": "render_current_page",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 505,
        "responsibilities": [
          "auth",
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_current_page(user: Dict[str, Any]):\n    \"\"\"Render the current page based on session state navigation.\"\"\"\n    current_page = st.session_state.get(\"current_page\", \"Dashboard\")\n    \n    # DEBUG: Show current navigation state\n    st.sidebar.write(f\"\ud83d\udd0d DEBUG: Current page = {current_page}\")\n   ...",
        "suggested_refactor": "Extract UI rendering to render_current_page_ui_layer() + Extract logging to render_current_page_audit_layer()"
      },
      {
        "function_name": "render_dashboard_content",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 541,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_dashboard_content(user: Dict[str, Any]):\n    \"\"\"Render the default dashboard content.\"\"\"\n    # Linhas principais do dashboard\n    with streamlit_error_boundary(\"analytics_row\"):\n        stats = fetch_user_stats(user.get(\"id\") if isinstance(user, dict) else None)\n        render_analytics_r...",
        "suggested_refactor": "Extract UI rendering to render_dashboard_content_ui_layer() + Extract logging to render_dashboard_content_audit_layer()"
      },
      {
        "function_name": "render_delete_client_modal",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 297,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_delete_client_modal(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render the delete client confirmation modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Delete Client: {client['name']}\", width=\"medium\"):\n        st.markdown(\"### \u26a0\ufe0f Confirm D...",
        "suggested_refactor": "Extract database operations to render_delete_client_modal_data_layer() + Extract UI rendering to render_delete_client_modal_ui_layer() + Extract logging to render_delete_client_modal_audit_layer() + Extract validation to render_delete_client_modal_validator()"
      },
      {
        "function_name": "render_delete_project_modal",
        "file_path": "streamlit_extension/pages/projects.py",
        "line_number": 338,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_delete_project_modal(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the delete project confirmation modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    # Apply XSS sanitization to modal content\n    safe_project_name = saniti...",
        "suggested_refactor": "Extract database operations to render_delete_project_modal_data_layer() + Extract UI rendering to render_delete_project_modal_ui_layer() + Extract logging to render_delete_project_modal_audit_layer() + Extract validation to render_delete_project_modal_validator()"
      },
      {
        "function_name": "render_edit_client_modal",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 150,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_edit_client_modal(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render the edit client modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Edit Client: {client['name']}\", width=\"large\"):\n        with st.form(f\"edit_client_form_{client['id']}\"):...",
        "suggested_refactor": "Extract database operations to render_edit_client_modal_data_layer() + Extract UI rendering to render_edit_client_modal_ui_layer() + Extract logging to render_edit_client_modal_audit_layer() + Extract validation to render_edit_client_modal_validator()"
      },
      {
        "function_name": "render_edit_project_modal",
        "file_path": "streamlit_extension/pages/projects.py",
        "line_number": 158,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_edit_project_modal(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the edit project modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Edit Project: {project['name']}\", width=\"large\"):\n        with st.form(f\"...",
        "suggested_refactor": "Extract database operations to render_edit_project_modal_data_layer() + Extract UI rendering to render_edit_project_modal_ui_layer() + Extract logging to render_edit_project_modal_audit_layer() + Extract validation to render_edit_project_modal_validator()"
      },
      {
        "function_name": "render_heatmap_and_tasks",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 403,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "file_io",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_heatmap_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]):\n    left, right = st.columns([1.2, 1.0])\n    with left:\n        ProductivityHeatmap.render(activity_data={})\n    with right:\n        if not epics:\n            st.info(\"Nenhum \u00e9pico dispon\u00edvel.\")\n            r...",
        "suggested_refactor": "Extract database operations to render_heatmap_and_tasks_data_layer() + Extract UI rendering to render_heatmap_and_tasks_ui_layer() + Extract logging to render_heatmap_and_tasks_audit_layer()"
      },
      {
        "function_name": "render_login_page",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 310,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_login_page(auth_manager: GoogleOAuthManager):\n    \"\"\"Render the Google OAuth login page.\"\"\"\n    st.title(\"\ud83d\udd10 TDD Framework - Authentication Required\")\n    st.markdown(\"Please sign in with your Google account to access the application.\")\n    \n    # Handle OAuth callback\n    query_params = s...",
        "suggested_refactor": "Extract database operations to render_login_page_data_layer() + Extract UI rendering to render_login_page_ui_layer() + Extract logging to render_login_page_audit_layer()"
      },
      {
        "function_name": "render_project_card",
        "file_path": "streamlit_extension/pages/projects.py",
        "line_number": 52,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_project_card(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render an individual project card.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.container():\n        # Card header with status indicator\n        status_colors = {\n...",
        "suggested_refactor": "Extract database operations to render_project_card_data_layer() + Extract UI rendering to render_project_card_ui_layer() + Extract validation to render_project_card_validator()"
      },
      {
        "function_name": "render_projects_page",
        "file_path": "streamlit_extension/pages/projects.py",
        "line_number": 550,
        "responsibilities": [
          "logging",
          "database",
          "ui",
          "auth",
          "file_io",
          "network",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_projects_page():\n    \"\"\"Render the main projects management page.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    if not DATABASE_UTILS_AVAILABLE:\n        st.error(\n            ErrorMessages.LOADING_ERROR.format(\n                entity=\"data...",
        "suggested_refactor": "Extract database operations to render_projects_page_data_layer() + Extract UI rendering to render_projects_page_ui_layer() + Extract logging to render_projects_page_audit_layer() + Extract validation to render_projects_page_validator()"
      },
      {
        "function_name": "render_sidebar",
        "file_path": "streamlit_extension/components/sidebar/layout.py",
        "line_number": 32,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_sidebar(user_id: int = 1) -> Dict[str, Any]:\n    \"\"\"\n    Render the persistent sidebar with timer and navigation.\n    \n    Returns:\n        Dict containing sidebar state and user actions\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    s...",
        "suggested_refactor": "Extract database operations to render_sidebar_data_layer() + Extract UI rendering to render_sidebar_ui_layer() + Extract logging to render_sidebar_audit_layer()"
      },
      {
        "function_name": "render_theme_selector",
        "file_path": "streamlit_extension/config/themes.py",
        "line_number": 572,
        "responsibilities": [
          "logging",
          "network",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_theme_selector(key: str = \"theme_selector\") -> None:\n    \"\"\"Render a theme selection widget.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[THEME SELECTOR]\")\n        return\n    \n    theme_manager = get_theme_manager()\n    available_themes = theme_manager.get_available_themes()\n    cur...",
        "suggested_refactor": "Extract database operations to render_theme_selector_data_layer() + Extract UI rendering to render_theme_selector_ui_layer() + Extract logging to render_theme_selector_audit_layer()"
      },
      {
        "function_name": "render_timer_and_notifications",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 234,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_timer_and_notifications() -> None:\n    \"\"\"\n    Render timer component and notifications section in two columns.\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        c1, c2 = st.columns([0.65, 0.35])\n        \n        # Left column: Timer\n        with c1:\n           ...",
        "suggested_refactor": "Extract UI rendering to render_timer_and_notifications_ui_layer() + Extract logging to render_timer_and_notifications_audit_layer()"
      },
      {
        "function_name": "render_user_profile",
        "file_path": "streamlit_extension/auth/login_page.py",
        "line_number": 72,
        "responsibilities": [
          "auth",
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def render_user_profile():\n    \"\"\"Render user profile page.\"\"\"\n    if \"current_user\" not in st.session_state:\n        st.error(\"Please log in to view profile.\")\n        return\n    \n    user = st.session_state.current_user\n    auth_manager = AuthManager()\n    \n    st.title(\"\ud83d\udc64 User Profile\")\n    \n    ...",
        "suggested_refactor": "Extract UI rendering to render_user_profile_ui_layer() + Extract logging to render_user_profile_audit_layer()"
      },
      {
        "function_name": "require_auth",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 30,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def require_auth(roles: Optional[list[UserRole]] = None):\n    \"\"\"Decorator to require authentication for Streamlit functions.\"\"\"\n    def decorator(func: Callable):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.sess...",
        "suggested_refactor": "Extract UI rendering to require_auth_ui_layer() + Extract logging to require_auth_audit_layer()"
      },
      {
        "function_name": "reset_dos_protection",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 631,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def reset_dos_protection(self, operation_type: str, user_id: Optional[str] = None):\n        \"\"\"Reset DoS protection for specific user/operation.\"\"\"\n        if not DOS_PROTECTION_AVAILABLE or not self.dos_protector:\n            return\n        \n        try:\n            # Reset rate limits\n        ...",
        "suggested_refactor": "Extract UI rendering to reset_dos_protection_ui_layer() + Extract logging to reset_dos_protection_audit_layer() + Extract validation to reset_dos_protection_validator()"
      },
      {
        "function_name": "reset_rate_limits",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 435,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def reset_rate_limits(self, \n                         operation_type: str,\n                         user_id: Optional[str] = None,\n                         ip_address: Optional[str] = None):\n        \"\"\"Reset rate limits for specific user/operation.\"\"\"\n        if not RATE_LIMITING_AVAILABLE or no...",
        "suggested_refactor": "Extract UI rendering to reset_rate_limits_ui_layer() + Extract logging to reset_rate_limits_audit_layer() + Extract validation to reset_rate_limits_validator()"
      },
      {
        "function_name": "restore_backup",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 184,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def restore_backup(path: str) -> str:\n    \"\"\"\n    Restaura backup a partir de um arquivo existente.\n    Prefer\u00eancia: m\u00e9todo do manager; fallback: SQLite Backup API (copia do arquivo para a DB ativa).\n    \"\"\"\n    p = Path(path)\n    if not p.exists():\n        raise FileNotFoundError(f\"Backup n\u00e3o encon...",
        "suggested_refactor": "Extract database operations to restore_backup_data_layer() + Extract UI rendering to restore_backup_ui_layer() + Extract logging to restore_backup_audit_layer()"
      },
      {
        "function_name": "resume_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 626,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def resume_session(self, session_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Resume a paused work session.\n        \n        Args:\n            session_id: Session ID to resume\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operati...",
        "suggested_refactor": "Extract database operations to resume_session_data_layer() + Extract UI rendering to resume_session_ui_layer() + Extract logging to resume_session_audit_layer() + Extract business logic to resume_session_processor()"
      },
      {
        "function_name": "run_quick_performance_check",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 558,
        "responsibilities": [
          "network",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def run_quick_performance_check(db_manager) -> Dict[str, Any]:\n    \"\"\"Run quick performance check for monitoring.\"\"\"\n    profiler = PerformanceProfiler()\n    \n    # Test basic operations\n    with profiler.profile_operation(\"get_clients\"):\n        db_manager.get_clients(limit=10)\n    \n    with profil...",
        "suggested_refactor": "Extract database operations to run_quick_performance_check_data_layer() + Extract UI rendering to run_quick_performance_check_ui_layer()"
      },
      {
        "function_name": "start_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 456,
        "responsibilities": [
          "business_logic",
          "auth",
          "logging",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def start_session(self, session_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Start a new work session.\n        \n        Args:\n            session_data: Session information dictionary\n            \n        Returns:\n            ServiceResult with session ID if successful\n       ...",
        "suggested_refactor": "Extract UI rendering to start_session_ui_layer() + Extract logging to start_session_audit_layer() + Extract business logic to start_session_processor()"
      },
      {
        "function_name": "stop_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 513,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def stop_session(self, session_id: int, completion_data: Optional[Dict[str, Any]] = None) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Stop/complete a work session.\n        \n        Args:\n            session_id: Session ID to stop\n            completion_data: Optional completion data (r...",
        "suggested_refactor": "Extract database operations to stop_session_data_layer() + Extract UI rendering to stop_session_ui_layer() + Extract logging to stop_session_audit_layer() + Extract business logic to stop_session_processor()"
      },
      {
        "function_name": "suggest_optimal_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 868,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def suggest_optimal_session(self, task_id: Optional[int] = None) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Suggest optimal session configuration based on patterns.\n        \n        Args:\n            task_id: Optional task ID for task-specific suggestions\n            \n        Returns:...",
        "suggested_refactor": "Extract UI rendering to suggest_optimal_session_ui_layer() + Extract logging to suggest_optimal_session_audit_layer()"
      },
      {
        "function_name": "sync_epics_from_json",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 112,
        "responsibilities": [
          "database",
          "ui",
          "file_io",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def sync_epics_from_json(self) -> Dict[str, Any]:\n        \"\"\"\n        Synchronize epic JSON files with database.\n        \n        Returns:\n            Dict with sync results and statistics\n        \"\"\"\n        if not self.epics_dir.exists():\n            return {\"error\": \"Epics directory not found...",
        "suggested_refactor": "Extract database operations to sync_epics_from_json_data_layer() + Extract UI rendering to sync_epics_from_json_ui_layer() + Extract logging to sync_epics_from_json_audit_layer() + Extract validation to sync_epics_from_json_validator()"
      },
      {
        "function_name": "sync_epics_to_json",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 172,
        "responsibilities": [
          "database",
          "ui",
          "network",
          "file_io",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def sync_epics_to_json(self) -> Dict[str, Any]:\n        \"\"\"\n        Export database epics to JSON files.\n        \n        Returns:\n            Dict with export results\n        \"\"\"\n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\", \"exported\": 0}\n      ...",
        "suggested_refactor": "Extract database operations to sync_epics_to_json_data_layer() + Extract UI rendering to sync_epics_to_json_ui_layer() + Extract logging to sync_epics_to_json_audit_layer()"
      },
      {
        "function_name": "topological_sort_simple",
        "file_path": "streamlit_extension/utils/graph_algorithms.py",
        "line_number": 48,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def topological_sort_simple(adjacency: Dict[str, Set[str]]) -> List[str]:\n        \"\"\"\n        Ordena\u00e7\u00e3o topol\u00f3gica simples usando Kahn's algorithm\n        Sem prioriza\u00e7\u00e3o - usado para pr\u00e9-computa\u00e7\u00f5es\n        \n        Args:\n            adjacency: {node: {neighbors}} - grafo dirigido\n            \n...",
        "suggested_refactor": "Extract UI rendering to topological_sort_simple_ui_layer() + Extract logging to topological_sort_simple_audit_layer() + Extract validation to topological_sort_simple_validator() + Extract business logic to topological_sort_simple_processor()"
      },
      {
        "function_name": "update",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 234,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update(self, epic_id: int, epic_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing epic.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_epics SET\n                    epic_key = ?, title = ?, description = ?, project_id = ?,\n                    status = ?, pri...",
        "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
      },
      {
        "function_name": "update",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 279,
        "responsibilities": [
          "logging",
          "database",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update(self, task_id: int, task_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing task.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_tasks SET\n                    task_key = ?, title = ?, description = ?, epic_id = ?,\n                    status = ?, tdd_ph...",
        "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
      },
      {
        "function_name": "update_client",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 330,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_client(self, client_id: int, client_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing client.\n        \n        Args:\n            client_id: Client ID\n            client_data: Updated client information\n            \n        Returns:\n            ServiceRe...",
        "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer() + Extract validation to update_client_validator() + Extract business logic to update_client_processor()"
      },
      {
        "function_name": "update_epic",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 632,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_epic(self, epic_id: int, epic_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing epic.\n        \n        Args:\n            epic_id: Epic ID\n            epic_data: Updated epic information\n            \n        Returns:\n            ServiceResult with succes...",
        "suggested_refactor": "Extract database operations to update_epic_data_layer() + Extract UI rendering to update_epic_ui_layer() + Extract logging to update_epic_audit_layer() + Extract validation to update_epic_validator() + Extract business logic to update_epic_processor()"
      },
      {
        "function_name": "update_project",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 481,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_project(self, project_id: int, project_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing project.\n        \n        Args:\n            project_id: Project ID\n            project_data: Updated project information\n            \n        Returns:\n            S...",
        "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer() + Extract validation to update_project_validator() + Extract business logic to update_project_processor()"
      },
      {
        "function_name": "update_session",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 182,
        "responsibilities": [
          "auth",
          "logging",
          "database",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_session(self, session_id: int, session_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing work session.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE work_sessions SET\n                    status = ?, end_time = ?, duration_minutes = ?,\n                    focus...",
        "suggested_refactor": "Extract database operations to update_session_data_layer() + Extract UI rendering to update_session_ui_layer() + Extract logging to update_session_audit_layer()"
      },
      {
        "function_name": "update_session_ratings",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 895,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "auth",
          "logging"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_session_ratings(self, session_id: int, ratings: Dict[str, int]) -> ServiceResult[bool]:\n        \"\"\"\n        Update session ratings (focus, energy, mood).\n        \n        Args:\n            session_id: Session ID\n            ratings: Dictionary with rating values\n            \n        R...",
        "suggested_refactor": "Extract database operations to update_session_ratings_data_layer() + Extract UI rendering to update_session_ratings_ui_layer() + Extract logging to update_session_ratings_audit_layer() + Extract business logic to update_session_ratings_processor()"
      },
      {
        "function_name": "update_task",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 672,
        "responsibilities": [
          "database",
          "ui",
          "business_logic",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def update_task(self, task_id: int, task_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing task with TDD workflow validation.\n        \n        Args:\n            task_id: Task ID\n            task_data: Updated task information\n            \n        Returns:\n        ...",
        "suggested_refactor": "Extract database operations to update_task_data_layer() + Extract UI rendering to update_task_ui_layer() + Extract logging to update_task_audit_layer() + Extract validation to update_task_validator() + Extract business logic to update_task_processor()"
      },
      {
        "function_name": "validate_api_request",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 130,
        "responsibilities": [
          "database",
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def validate_api_request(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Comprehensive API request validation.\n    \n    Args:\n        query_params: Query parameters from request\n        \n    Returns:\n        Dict with validation results and user info\n    \"\"\"\n    validation_result = {\n  ...",
        "suggested_refactor": "Extract database operations to validate_api_request_data_layer() + Extract UI rendering to validate_api_request_ui_layer() + Extract logging to validate_api_request_audit_layer() + Extract validation to validate_api_request_validator()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 347,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate timer-specific business rules.\"\"\"\n        errors = []\n        \n        # Planned duration validation\n        if 'planned_duration_minutes' in data and data['planned_duration_minutes'] is not None:\n...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 360,
        "responsibilities": [
          "logging",
          "validation",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate epic-specific business rules.\"\"\"\n        errors = []\n        \n        # Epic key format validation (EPIC-X.X or similar)\n        if 'epic_key' in data and data['epic_key']:\n            epic_key_pat...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 408,
        "responsibilities": [
          "ui",
          "business_logic",
          "network",
          "file_io",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate task-specific business rules.\"\"\"\n        errors = []\n        \n        # Task key format validation (TASK-X.X.X or similar)\n        if 'task_key' in data and data['task_key']:\n            task_key_p...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator() + Extract business logic to validate_business_rules_processor()"
      },
      {
        "function_name": "validate_config",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 35,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def validate_config(config: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate configuration dictionary.\n    \n    Args:\n        config: Configuration dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Validate required...",
        "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer() + Extract validation to validate_config_validator()"
      },
      {
        "function_name": "validate_csrf_token",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 702,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_csrf_token(self, form_id: str, provided_token: str, max_age_seconds: int = 3600) -> bool:\n        \"\"\"\n        Validate a CSRF token for a form.\n        \n        Args:\n            form_id: Unique identifier for the form\n            provided_token: Token provided with form submission\n...",
        "suggested_refactor": "Extract UI rendering to validate_csrf_token_ui_layer() + Extract logging to validate_csrf_token_audit_layer() + Extract validation to validate_csrf_token_validator()"
      },
      {
        "function_name": "validate_dag",
        "file_path": "streamlit_extension/utils/graph_algorithms.py",
        "line_number": 302,
        "responsibilities": [
          "business_logic",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_dag(adjacency: Dict[str, Set[str]]) -> Tuple[bool, Optional[str]]:\n        \"\"\"\n        Valida se o grafo \u00e9 um DAG (Directed Acyclic Graph)\n        \n        Args:\n            adjacency: Grafo dirigido\n            \n        Returns:\n            (is_dag, error_message)\n        \"\"\"\n     ...",
        "suggested_refactor": "Extract UI rendering to validate_dag_ui_layer() + Extract logging to validate_dag_audit_layer() + Extract validation to validate_dag_validator() + Extract business logic to validate_dag_processor()"
      },
      {
        "function_name": "validate_database_paths",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 150,
        "responsibilities": [
          "logging",
          "validation",
          "file_io",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def validate_database_paths(config: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate database file paths exist and are accessible.\n    \n    Args:\n        config: Configuration dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    warnings...",
        "suggested_refactor": "Extract UI rendering to validate_database_paths_ui_layer() + Extract logging to validate_database_paths_audit_layer() + Extract validation to validate_database_paths_validator()"
      },
      {
        "function_name": "validate_epic_dependencies",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1233,
        "responsibilities": [
          "logging",
          "database",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_epic_dependencies(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Valida estrutura de depend\u00eancias de um \u00e9pico (DAG validation).\n        \n        Args:\n            epic_id: ID do \u00e9pico para validar\n            \n        Returns:\n            ServiceResult con...",
        "suggested_refactor": "Extract database operations to validate_epic_dependencies_data_layer() + Extract UI rendering to validate_epic_dependencies_ui_layer() + Extract logging to validate_epic_dependencies_audit_layer() + Extract validation to validate_epic_dependencies_validator()"
      },
      {
        "function_name": "validate_epic_references",
        "file_path": "streamlit_extension/repos/deps_repo.py",
        "line_number": 312,
        "responsibilities": [
          "logging",
          "database",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_epic_references(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Valida integridade referencial das depend\u00eancias do \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict com resultados da valida\u00e7\u00e3o\n            \n      ...",
        "suggested_refactor": "Extract database operations to validate_epic_references_data_layer() + Extract UI rendering to validate_epic_references_ui_layer() + Extract logging to validate_epic_references_audit_layer() + Extract validation to validate_epic_references_validator()"
      },
      {
        "function_name": "validate_github_token",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 192,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def validate_github_token(token: str) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate GitHub token format.\n    \n    Args:\n        token: GitHub personal access token\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    if not token:\n        errors.append(\"Gi...",
        "suggested_refactor": "Extract UI rendering to validate_github_token_ui_layer() + Extract logging to validate_github_token_audit_layer() + Extract validation to validate_github_token_validator()"
      },
      {
        "function_name": "validate_project_data",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 532,
        "responsibilities": [
          "logging",
          "network",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def validate_project_data(project: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    \ud83d\udcc1 Validate project data structure and business rules.\n    \n    Args:\n        project: Project dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n  ...",
        "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
      },
      {
        "function_name": "validate_token",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 84,
        "responsibilities": [
          "auth",
          "logging",
          "validation",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "    def validate_token(self, token: str, session_id: str, max_age: int = 3600) -> bool:\n        \"\"\"Validate CSRF token.\"\"\"\n        try:\n            parts = token.split(':')\n            if len(parts) != 3:\n                return False\n            \n            token_session, timestamp, signature = par...",
        "suggested_refactor": "Extract UI rendering to validate_token_ui_layer() + Extract logging to validate_token_audit_layer() + Extract validation to validate_token_validator()"
      },
      {
        "function_name": "verify_api_key",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 38,
        "responsibilities": [
          "ui",
          "auth",
          "network",
          "logging",
          "validation"
        ],
        "severity": "CRITICAL",
        "code_snippet": "def verify_api_key(api_key: str) -> Tuple[bool, Optional[str]]:\n    \"\"\"\n    Verify API key if provided.\n    \n    Args:\n        api_key: API key to verify\n        \n    Returns:\n        Tuple of (is_valid, user_id)\n    \"\"\"\n    if not api_key:\n        return False, None\n    \n    # For demo purposes, ac...",
        "suggested_refactor": "Extract UI rendering to verify_api_key_ui_layer() + Extract logging to verify_api_key_audit_layer() + Extract validation to verify_api_key_validator()"
      },
      {
        "function_name": "wrapper",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 34,
        "responsibilities": [
          "logging",
          "auth",
          "network",
          "ui"
        ],
        "severity": "CRITICAL",
        "code_snippet": "        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.session_state:\n                st.error(\"\ud83d\udd12 Access denied. Please log in.\")\n                st.stop()\n            \n            auth_manager = get_auth_manager()\n            user = auth_manag...",
        "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
      }
    ],
    "HIGH": [
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 147,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, db_manager: Optional[DatabaseManager] = None, use_modular_api: bool = False) -> None:\n        \"\"\"\n        Args:\n            db_manager: Inst\u00e2ncia do DatabaseManager (obrigat\u00f3ria se use_modular_api=False)\n            use_modular_api: True para usar a API modular\n        \"\"\"\n   ...",
        "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 172,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, host: str = \"localhost\", port: int = 6379, db: int = 0,\n                 prefix: str = \"tdd\", ttl: int = 300) -> None:\n        self.host = host\n        self.port = port\n        self.db = db\n        self.prefix = prefix\n        self.ttl = ttl\n        self.logger = create_secure...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer() + Extract validation to __init___validator()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 220,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, \n                 host: str = \"localhost\",\n                 port: int = 6379,\n                 db: int = 0,\n                 password: Optional[str] = None,\n                 max_connections: int = 10,\n                 socket_timeout: float = 5.0,\n                 socket_connec...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer() + Extract validation to __init___validator()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 427,
        "responsibilities": [
          "database",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, framework_db_path: str = \"framework.db\", timer_db_path: str = \"task_timer.db\") -> None:\n        \"\"\"Initialize database manager with connection paths.\n\n        Creates SQLAlchemy engines for both databases when available and sets up\n        internal structures required for cach...",
        "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 90,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self):\n        \"\"\"Initialize security manager with safe defaults.\"\"\"\n        # Initialize secure logging\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('streamlit_security')\n        else:\n            import logging\n            self.logger = log...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 36,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self):\n        \"\"\"Initialize OAuth manager with configuration from Streamlit secrets.\"\"\"\n        if not DEPENDENCIES_AVAILABLE:\n            raise ImportError(\"Required authentication dependencies not installed\")\n        \n        self.client_id = st.secrets[\"google\"][\"client_id\"]\n   ...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 142,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, name: str = \"tdd_framework\", log_dir: str = \"logs\"):\n        self.name = name\n        self.log_dir = Path(log_dir)\n        self.log_dir.mkdir(exist_ok=True)\n        \n        # System information\n        self.hostname = socket.gethostname()\n        self.process_id = os.getpid()...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 85,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def __init__(self, \n                 exception: Exception,\n                 severity: str = ErrorSeverity.MEDIUM,\n                 category: str = ErrorCategory.UNKNOWN,\n                 user_message: Optional[str] = None,\n                 context: Optional[Dict[str, Any]] = None,\n              ...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "_action_start",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 313,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _action_start(self, ts: Optional[TimerSession], cfg: Dict[str, Any],\n                      get_current_task_id: Optional[Callable[[], Optional[int]]]) -> None:\n        # Retomar sess\u00e3o pausada\n        if ts and not ts.is_active:\n            ts.is_active = True\n            ts.started_at = now...",
        "suggested_refactor": "Extract UI rendering to _action_start_ui_layer()"
      },
      {
        "function_name": "_action_stop",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 359,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _action_stop(self, ts: Optional[TimerSession], cfg: Dict[str, Any], save: bool) -> None:\n        if not ts:\n            return\n        # Finaliza\n        ts.is_active = False\n        ts.ended_at = now().isoformat()\n        # normaliza acumulado final\n        ts.accum_sec = ts.elapsed_sec()\n ...",
        "suggested_refactor": "Extract UI rendering to _action_stop_ui_layer()"
      },
      {
        "function_name": "_build_headers",
        "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
        "line_number": 45,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _build_headers(self, info: Dict[str, Any], reason_hint: Optional[str]) -> Dict[str, str]:\n        try:\n            return self.rate_limiter.build_rate_limit_headers(\n                ip=info[\"ip\"],\n                user_id=info[\"user_id\"],\n                tier=info[\"tier\"],\n                end...",
        "suggested_refactor": "Extract UI rendering to _build_headers_ui_layer() + Extract logging to _build_headers_audit_layer()"
      },
      {
        "function_name": "_build_insert",
        "file_path": "streamlit_extension/utils/query_builder.py",
        "line_number": 187,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _build_insert(self) -> Tuple[str, Tuple[Any, ...]]:\n        \"\"\"Build INSERT query.\"\"\"\n        if not self.values:\n            raise ValueError(\"No values provided for INSERT\")\n        columns = \", \".join(self.values.keys())\n        placeholders = \", \".join([\"?\"] * len(self.values))\n        q...",
        "suggested_refactor": "Extract database operations to _build_insert_data_layer() + Extract UI rendering to _build_insert_ui_layer()"
      },
      {
        "function_name": "_build_select",
        "file_path": "streamlit_extension/utils/query_builder.py",
        "line_number": 159,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _build_select(self) -> Tuple[str, Tuple[Any, ...]]:\n        \"\"\"Build SELECT query.\"\"\"\n        columns = \", \".join(self.columns) if self.columns else \"*\"\n        query = f\"SELECT {columns} FROM {self.table}\"\n\n        if self.joins:\n            query += \" \" + \" \".join(self.joins)\n\n        if s...",
        "suggested_refactor": "Extract database operations to _build_select_data_layer() + Extract UI rendering to _build_select_ui_layer()"
      },
      {
        "function_name": "_calculate_completion_reward",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 924,
        "responsibilities": [
          "business_logic",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _calculate_completion_reward(self, epic: Dict[str, Any], metrics: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate rewards for completing this epic.\"\"\"\n        base_points = epic.get('points', 0)\n        difficulty_multiplier = epic.get('difficulty', 3) * 0.2\n        \n        # Bonus ...",
        "suggested_refactor": "Extract UI rendering to _calculate_completion_reward_ui_layer() + Extract business logic to _calculate_completion_reward_processor()"
      },
      {
        "function_name": "_calculate_current_streak",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1870,
        "responsibilities": [
          "business_logic",
          "auth",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _calculate_current_streak(self) -> int:\n        \"\"\"Calculate current task completion streak.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n                        SELECT c...",
        "suggested_refactor": "Extract database operations to _calculate_current_streak_data_layer() + Extract business logic to _calculate_current_streak_processor()"
      },
      {
        "function_name": "_calculate_performance_metrics",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 999,
        "responsibilities": [
          "business_logic",
          "auth",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _calculate_performance_metrics(self, session: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate performance metrics for session.\"\"\"\n        metrics = {}\n        \n        # Focus score\n        focus_rating = session.get('focus_rating')\n        if focus_rating:\n            metrics['focus...",
        "suggested_refactor": "Extract UI rendering to _calculate_performance_metrics_ui_layer() + Extract business logic to _calculate_performance_metrics_processor()"
      },
      {
        "function_name": "_calculate_project_duration",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 711,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _calculate_project_duration(self, start_date: Any, end_date: Any) -> Optional[int]:\n        \"\"\"Calculate project duration in days.\"\"\"\n        if not start_date or not end_date:\n            return None\n        \n        try:\n            # Convert to date objects if they're strings\n            ...",
        "suggested_refactor": "Extract UI rendering to _calculate_project_duration_ui_layer() + Extract logging to _calculate_project_duration_audit_layer() + Extract business logic to _calculate_project_duration_processor()"
      },
      {
        "function_name": "_calculate_sequence_efficiency",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1458,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _calculate_sequence_efficiency(self, plan: ExecutionPlan) -> float:\n        \"\"\"Calcula efici\u00eancia da sequ\u00eancia de execu\u00e7\u00e3o.\"\"\"\n        try:\n            # Simple metric: ratio of critical path to total tasks\n            if plan.execution_metrics.get(\"total_tasks\", 0) == 0:\n                ret...",
        "suggested_refactor": "Extract UI rendering to _calculate_sequence_efficiency_ui_layer() + Extract logging to _calculate_sequence_efficiency_audit_layer() + Extract business logic to _calculate_sequence_efficiency_processor()"
      },
      {
        "function_name": "_call",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 84,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _call():\n        try:\n            # Use AnalyticsService instead of direct database queries\n            from ..services.service_container import ServiceContainer\n            \n            container = ServiceContainer()\n            analytics = container.get_analytics_service()\n            \n   ...",
        "suggested_refactor": "Extract UI rendering to _call_ui_layer()"
      },
      {
        "function_name": "_check_health",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 320,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _check_health(self) -> bool:\n        \"\"\"Check Redis health with throttling.\"\"\"\n        current_time = time.time()\n        \n        # Throttle health checks\n        if current_time - self._last_health_check < self.health_check_interval:\n            return self.is_available\n        \n        se...",
        "suggested_refactor": "Extract UI rendering to _check_health_ui_layer() + Extract logging to _check_health_audit_layer() + Extract validation to _check_health_validator()"
      },
      {
        "function_name": "_clear_caches",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 265,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _clear_caches():\n    if not is_ui():\n        return\n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        cfg = st.session_state.get(\"config\") if is_ui() else None\n        if cfg an...",
        "suggested_refactor": "Extract UI rendering to _clear_caches_ui_layer() + Extract logging to _clear_caches_audit_layer()"
      },
      {
        "function_name": "_configure_streamlit_rate_limits",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 125,
        "responsibilities": [
          "business_logic",
          "auth",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _configure_streamlit_rate_limits(self):\n        \"\"\"Configure rate limits for Streamlit operations.\"\"\"\n        if not self.rate_limiter:\n            return\n        \n        # Database operations - conservative limits\n        self.rate_limiter.configure_limit(\n            \"db_read\", \n         ...",
        "suggested_refactor": "Extract UI rendering to _configure_streamlit_rate_limits_ui_layer() + Extract business logic to _configure_streamlit_rate_limits_processor()"
      },
      {
        "function_name": "_create_service_container",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 167,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _create_service_container(dbm: Optional[\"DatabaseManager\"]) -> Optional[\"ServiceContainer\"]:\n    if DISABLE_SERVICES:\n        _logger.warning(\"Services disabled by TDD_DISABLE_SERVICES.\")\n        return None\n    if not dbm:\n        return None\n    try:\n        container = initialize_service_cont...",
        "suggested_refactor": "Extract database operations to _create_service_container_data_layer() + Extract UI rendering to _create_service_container_ui_layer() + Extract logging to _create_service_container_audit_layer()"
      },
      {
        "function_name": "_enhance_execution_summary",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1406,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _enhance_execution_summary(self, summary: Dict[str, Any], epic_id: int) -> Dict[str, Any]:\n        \"\"\"Enriquece sum\u00e1rio executivo com m\u00e9tricas do TaskService.\"\"\"\n        try:\n            # Get epic tasks for additional context\n            tasks_result = self.get_tasks_by_epic(epic_id)\n      ...",
        "suggested_refactor": "Extract UI rendering to _enhance_execution_summary_ui_layer() + Extract logging to _enhance_execution_summary_audit_layer() + Extract business logic to _enhance_execution_summary_processor()"
      },
      {
        "function_name": "_fallback_get_authenticated_user",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 67,
        "responsibilities": [
          "logging",
          "auth",
          "network"
        ],
        "severity": "HIGH",
        "code_snippet": "def _fallback_get_authenticated_user() -> Optional[Dict[str, Any]]:  # pragma: no cover\n    logger.warning(\"get_authenticated_user(): OAuth indispon\u00edvel \u2014 retornando None.\")\n    return None\n",
        "suggested_refactor": "Extract logging to _fallback_get_authenticated_user_audit_layer()"
      },
      {
        "function_name": "_fallback_render_login_page",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 75,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _fallback_render_login_page() -> None:  # pragma: no cover\n    msg = \"Google OAuth n\u00e3o configurado. Contate o administrador.\"\n    if _STREAMLIT_AVAILABLE:\n        st.error(msg)  # type: ignore\n        st.stop()      # type: ignore\n    else:\n        raise RuntimeError(msg)\n",
        "suggested_refactor": "Extract UI rendering to _fallback_render_login_page_ui_layer() + Extract logging to _fallback_render_login_page_audit_layer()"
      },
      {
        "function_name": "_fallback_require_authentication",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 83,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _fallback_require_authentication(func: F) -> F:  # pragma: no cover\n    @wraps(func)\n    def _wrapper(*args: Any, **kwargs: Any):\n        if _STREAMLIT_AVAILABLE and st is not None:\n            st.warning(\"Autentica\u00e7\u00e3o obrigat\u00f3ria. Fa\u00e7a login para continuar.\")  # type: ignore\n            _fallba...",
        "suggested_refactor": "Extract UI rendering to _fallback_require_authentication_ui_layer() + Extract logging to _fallback_require_authentication_audit_layer()"
      },
      {
        "function_name": "_generate_markdown_report",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 494,
        "responsibilities": [
          "network",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _generate_markdown_report(self, report_data: Dict[str, Any], output_file: Path):\n        \"\"\"Generate markdown version of the report.\"\"\"\n        with open(output_file, 'w') as f:\n            f.write(f\"# Performance Test Report: {report_data['test_name']}\\n\\n\")\n            f.write(f\"**Generate...",
        "suggested_refactor": "Extract UI rendering to _generate_markdown_report_ui_layer()"
      },
      {
        "function_name": "_get_best_streak",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1894,
        "responsibilities": [
          "auth",
          "network",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _get_best_streak(self) -> int:\n        \"\"\"Get best streak record.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n                        SELECT best_streak FROM user_streak...",
        "suggested_refactor": "Extract database operations to _get_best_streak_data_layer()"
      },
      {
        "function_name": "_get_epic_task_timeline",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2472,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _get_epic_task_timeline(self, epic_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Get timeline information for tasks within an epic.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(tex...",
        "suggested_refactor": "Extract database operations to _get_epic_task_timeline_data_layer() + Extract UI rendering to _get_epic_task_timeline_ui_layer()"
      },
      {
        "function_name": "_get_permissions_for_roles",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 310,
        "responsibilities": [
          "auth",
          "network",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _get_permissions_for_roles(self, roles: List[str]) -> Set[str]:\n        \"\"\"Map roles to permissions.\"\"\"\n        permission_map = {\n            'admin': {\n                'create_client', 'read_client', 'update_client', 'delete_client',\n                'create_project', 'read_project', 'updat...",
        "suggested_refactor": "Extract database operations to _get_permissions_for_roles_data_layer()"
      },
      {
        "function_name": "_get_streamlit_session_id",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 455,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _get_streamlit_session_id(self) -> str:\n        \"\"\"Obt\u00e9m ID \u00fanico da sess\u00e3o Streamlit de forma segura.\"\"\"\n        try:\n            import streamlit as st\n            if hasattr(st, 'session_state') and hasattr(st.session_state, 'session_id'):\n                return str(st.session_state.sessi...",
        "suggested_refactor": "Extract UI rendering to _get_streamlit_session_id_ui_layer()"
      },
      {
        "function_name": "_get_today_sessions",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 483,
        "responsibilities": [
          "auth",
          "network",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _get_today_sessions(self) -> List[Dict[str, Any]]:\n        \"\"\"Get today's timer sessions.\"\"\"\n        if not self.db_manager:\n            return []\n        \n        all_sessions = self.db_manager.get_timer_sessions(1)\n        today_str = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        re...",
        "suggested_refactor": "Extract database operations to _get_today_sessions_data_layer()"
      },
      {
        "function_name": "_initialize_configuration",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 145,
        "responsibilities": [
          "auth",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _initialize_configuration() -> None:\n    \"\"\"Initialize application configuration.\"\"\"\n    if CONFIG_AVAILABLE and \"config\" not in st.session_state:\n        with streamlit_error_boundary(\"load_config\"):\n            st.session_state.config = load_config()\n",
        "suggested_refactor": "Extract UI rendering to _initialize_configuration_ui_layer()"
      },
      {
        "function_name": "_initialize_user_preferences",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 163,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _initialize_user_preferences() -> None:\n    \"\"\"Initialize user preferences and debug settings.\"\"\"\n    if \"show_debug_info\" not in st.session_state:\n        cfg = st.session_state.get(\"config\", None)\n        st.session_state.show_debug_info = bool(getattr(cfg, \"debug_mode\", False))\n",
        "suggested_refactor": "Extract UI rendering to _initialize_user_preferences_ui_layer() + Extract logging to _initialize_user_preferences_audit_layer()"
      },
      {
        "function_name": "_invalidate_related_cache",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 177,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _invalidate_related_cache(self, entity_type: str, entity_id: Optional[int] = None, **kwargs):\n        \"\"\"\n        Invalidate cache entries related to data modification.\n        \n        Args:\n            entity_type: Type of entity (client, project, epic, task)\n            entity_id: Specifi...",
        "suggested_refactor": "Extract UI rendering to _invalidate_related_cache_ui_layer() + Extract logging to _invalidate_related_cache_audit_layer() + Extract validation to _invalidate_related_cache_validator()"
      },
      {
        "function_name": "_load_backup_index",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 431,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _load_backup_index(self) -> Dict[str, BackupInfo]:\n        \"\"\"Load backup index from file.\"\"\"\n        if not self.index_file.exists():\n            return {}\n        \n        try:\n            with open(self.index_file, 'r') as f:\n                index_data = json.load(f)\n            \n        ...",
        "suggested_refactor": "Extract UI rendering to _load_backup_index_ui_layer() + Extract logging to _load_backup_index_audit_layer()"
      },
      {
        "function_name": "_load_custom_themes",
        "file_path": "streamlit_extension/config/themes.py",
        "line_number": 492,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _load_custom_themes(self) -> Dict[str, Theme]:\n        \"\"\"Load custom themes from file.\"\"\"\n        if not self.themes_file.exists():\n            return {}\n        try:\n            with open(self.themes_file, 'r') as f:\n                data = json.load(f)\n            custom_themes: Dict[str, ...",
        "suggested_refactor": "Extract UI rendering to _load_custom_themes_ui_layer() + Extract logging to _load_custom_themes_audit_layer()"
      },
      {
        "function_name": "_log_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 348,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _log_error(self, error: StreamlitError):\n        \"\"\"Log error with appropriate level.\"\"\"\n        safe_context = error.get_safe_context()\n        \n        # Create log message\n        log_data = {\n            \"error_id\": error.error_id,\n            \"category\": error.category,\n            \"sev...",
        "suggested_refactor": "Extract UI rendering to _log_error_ui_layer() + Extract logging to _log_error_audit_layer() + Extract validation to _log_error_validator()"
      },
      {
        "function_name": "_recover_auth_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 443,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _recover_auth_error(self, error: StreamlitError):\n        \"\"\"Attempt authentication error recovery.\"\"\"\n        error.suggestions.append(\"Please log out and log back in.\")\n        error.suggestions.append(\"Clear your browser cookies if the problem persists.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_auth_error_ui_layer() + Extract logging to _recover_auth_error_audit_layer()"
      },
      {
        "function_name": "_render_client_filters",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 605,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _render_client_filters():\n    \"\"\"Render filter controls and return filter values using DRY component.\"\"\"\n    if FORM_COMPONENTS_AVAILABLE and render_entity_filters:\n        # Use DRY entity filters component\n        status_options = [\"all\"] + (StatusValues.get_all_values() if StatusValues else [...",
        "suggested_refactor": "Extract database operations to _render_client_filters_data_layer() + Extract UI rendering to _render_client_filters_ui_layer()"
      },
      {
        "function_name": "_render_error_debug",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 195,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _render_error_debug() -> None:\n    \"\"\"Render error debugging information.\"\"\"\n    st.markdown(\"#### \u274c Error Statistics\")\n    \n    if EXCEPTION_HANDLER_AVAILABLE:\n        error_stats = safe_streamlit_operation(get_error_statistics, default_return={})\n        \n        if error_stats:\n            to...",
        "suggested_refactor": "Extract UI rendering to _render_error_debug_ui_layer() + Extract logging to _render_error_debug_audit_layer()"
      },
      {
        "function_name": "_render_heatmap_tasks_section",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 206,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _render_heatmap_tasks_section() -> None:\n    \"\"\"Render the heatmap and tasks section.\"\"\"\n    epics = fetch_epics()\n    selected_epic_id = get_selected_epic_id()\n    render_heatmap_and_tasks(epics, selected_epic_id)\n",
        "suggested_refactor": "Extract database operations to _render_heatmap_tasks_section_data_layer() + Extract UI rendering to _render_heatmap_tasks_section_ui_layer()"
      },
      {
        "function_name": "_render_system_debug",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 225,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _render_system_debug() -> None:\n    \"\"\"Render system debugging information.\"\"\"\n    st.markdown(\"#### \ud83d\udd27 System Information\")\n    \n    # Python and environment info\n    import sys\n    import platform\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.markdown(\"**Python:**\")\n       ...",
        "suggested_refactor": "Extract UI rendering to _render_system_debug_ui_layer() + Extract logging to _render_system_debug_audit_layer()"
      },
      {
        "function_name": "_safe_session_state_access",
        "file_path": "streamlit_extension/components/analytics_cards.py",
        "line_number": 76,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def _safe_session_state_access(key: str, default: Any = None) -> Any:\n    \"\"\"\n    Safely access Streamlit session state with fallback.\n    USES SESSION_MANAGER ABSTRACTION - NO DIRECT ACCESS\n    \"\"\"\n    try:\n        from ..utils.session_manager import get_session_value\n        return get_session_val...",
        "suggested_refactor": "Extract UI rendering to _safe_session_state_access_ui_layer()"
      },
      {
        "function_name": "_save_backup_index",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 454,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _save_backup_index(self) -> None:\n        \"\"\"Save backup index to file.\"\"\"\n        try:\n            index_data = {}\n            for name, backup_info in self._backup_index.items():\n                backup_dict = asdict(backup_info)\n                backup_dict[\"created_at\"] = backup_info.creat...",
        "suggested_refactor": "Extract UI rendering to _save_backup_index_ui_layer() + Extract logging to _save_backup_index_audit_layer()"
      },
      {
        "function_name": "_serialize_data",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 391,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _serialize_data(self, data: Any) -> str:\n        \"\"\"Serialize data for Redis storage.\"\"\"\n        try:\n            return json.dumps(data, default=str, ensure_ascii=False)\n        except Exception as e:\n            self.logger.error(f\"Serialization error: {e}\")\n            raise ValueError(f\"...",
        "suggested_refactor": "Extract UI rendering to _serialize_data_ui_layer() + Extract logging to _serialize_data_audit_layer()"
      },
      {
        "function_name": "_setup_default_recovery_strategies",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 194,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _setup_default_recovery_strategies(self):\n        \"\"\"Setup default error recovery strategies.\"\"\"\n        self.recovery_strategies = {\n            ErrorCategory.DATABASE: self._recover_database_error,\n            ErrorCategory.AUTHENTICATION: self._recover_auth_error,\n            ErrorCategor...",
        "suggested_refactor": "Extract UI rendering to _setup_default_recovery_strategies_ui_layer() + Extract logging to _setup_default_recovery_strategies_audit_layer()"
      },
      {
        "function_name": "_setup_logging",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 160,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup structured logging configuration.\"\"\"\n        # Create custom formatter\n        self.logger = logging.getLogger(self.name)\n        self.logger.setLevel(logging.DEBUG)\n        \n        # Clear existing handlers\n        self.logger.handlers.clear()\n       ...",
        "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
      },
      {
        "function_name": "_show_user_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 396,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _show_user_error(self, error: StreamlitError):\n        \"\"\"Show user-friendly error message in Streamlit UI.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return\n        \n        # Choose appropriate Streamlit method based on severity\n        if error.severity == ErrorSeverity.CRITICAL:\n...",
        "suggested_refactor": "Extract UI rendering to _show_user_error_ui_layer() + Extract logging to _show_user_error_audit_layer()"
      },
      {
        "function_name": "_start_cleanup_thread",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 256,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _start_cleanup_thread(self):\n        \"\"\"Start background cleanup thread\"\"\"\n        def cleanup_worker():\n            while True:\n                try:\n                    self.connection_pool.cleanup_idle_connections()\n                    time.sleep(60)  # Cleanup every minute\n               ...",
        "suggested_refactor": "Extract UI rendering to _start_cleanup_thread_ui_layer() + Extract logging to _start_cleanup_thread_audit_layer()"
      },
      {
        "function_name": "_update_error_stats",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 325,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _update_error_stats(self, error: StreamlitError):\n        \"\"\"Update error statistics.\"\"\"\n        with self._stats_lock:\n            self.error_stats[\"total_errors\"] += 1\n            \n            # Update category stats\n            category_stats = self.error_stats[\"errors_by_category\"]\n     ...",
        "suggested_refactor": "Extract database operations to _update_error_stats_data_layer() + Extract UI rendering to _update_error_stats_ui_layer() + Extract logging to _update_error_stats_audit_layer()"
      },
      {
        "function_name": "_update_prometheus_metrics",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 382,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _update_prometheus_metrics(self, level: LogLevel, event_type: EventType, log_entry: Dict[str, Any]):\n        \"\"\"Update Prometheus metrics based on log entry.\"\"\"\n        if not PROMETHEUS_AVAILABLE:\n            return\n        \n        # Error counting\n        if level in [LogLevel.ERROR, LogL...",
        "suggested_refactor": "Extract database operations to _update_prometheus_metrics_data_layer() + Extract UI rendering to _update_prometheus_metrics_ui_layer() + Extract logging to _update_prometheus_metrics_audit_layer()"
      },
      {
        "function_name": "_validate_epic_data",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 56,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _validate_epic_data(self, epic_data: Dict[str, Any], filename: str) -> tuple[bool, List[str]]:\n        \"\"\"\n        Validate and sanitize epic JSON data before processing.\n        \n        Returns:\n            Tuple of (is_valid, list_of_errors)\n        \"\"\"\n        errors = []\n        \n      ...",
        "suggested_refactor": "Extract UI rendering to _validate_epic_data_ui_layer() + Extract logging to _validate_epic_data_audit_layer() + Extract validation to _validate_epic_data_validator()"
      },
      {
        "function_name": "_worker_thread",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 279,
        "responsibilities": [
          "network",
          "logging",
          "file_io"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _worker_thread(self, target_function: Callable, test_data: List[Dict], \n                      duration: int, worker_id: str):\n        \"\"\"Individual worker thread for load testing.\"\"\"\n        start_time = time.time()\n        operation_count = 0\n        \n        while time.time() - start_time ...",
        "suggested_refactor": "Extract logging to _worker_thread_audit_layer()"
      },
      {
        "function_name": "_wrapper",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 85,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def _wrapper(*args: Any, **kwargs: Any):\n        if _STREAMLIT_AVAILABLE and st is not None:\n            st.warning(\"Autentica\u00e7\u00e3o obrigat\u00f3ria. Fa\u00e7a login para continuar.\")  # type: ignore\n            _fallback_render_login_page()\n            st.stop()  # type: ignore\n        raise RuntimeError(\"...",
        "suggested_refactor": "Extract UI rendering to _wrapper_ui_layer() + Extract logging to _wrapper_audit_layer()"
      },
      {
        "function_name": "advance_tdd_phase",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 915,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def advance_tdd_phase(self, task_id: int) -> ServiceResult[str]:\n        \"\"\"\n        Advance task to next TDD phase (RED -> GREEN -> REFACTOR).\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with new TDD phase\n        \"\"\"\n        self....",
        "suggested_refactor": "Extract database operations to advance_tdd_phase_data_layer() + Extract UI rendering to advance_tdd_phase_ui_layer() + Extract logging to advance_tdd_phase_audit_layer()"
      },
      {
        "function_name": "attempt_recovery",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 79,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        if context.user_id:\n            return RecoveryResult(True, result=\"auth_recovered\")\n        return RecoveryResu...",
        "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
      },
      {
        "function_name": "auth_middleware",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 67,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def auth_middleware() -> Optional[User]:\n    \"\"\"Middleware to check authentication state.\"\"\"\n    session_id = st.session_state.get(\"session_id\")\n    if not session_id:\n        return None\n    auth_manager = get_auth_manager()\n    user = auth_manager.get_current_user(session_id)\n    if not user:\n    ...",
        "suggested_refactor": "Extract UI rendering to auth_middleware_ui_layer()"
      },
      {
        "function_name": "authenticate",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 211,
        "responsibilities": [
          "auth",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def authenticate(self, username: str, password: str) -> AuthResult:\n        \"\"\"Authenticate a user and create a session.\n\n        Args:\n            username: Username used for login.\n            password: Raw password string.\n\n        Returns:\n            AuthResult: Authentication outcome inclu...",
        "suggested_refactor": "Extract database operations to authenticate_data_layer() + Extract UI rendering to authenticate_ui_layer()"
      },
      {
        "function_name": "authenticate_user",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 95,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def authenticate_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Handle user authentication.\"\"\"\n    if not is_ui():\n        return {\"name\": \"Headless\"}\n    \n    if not is_user_authenticated():\n        try:\n            render_login_page()\n            return None  # Not authenticated\n        except TypeErr...",
        "suggested_refactor": "Extract UI rendering to authenticate_user_ui_layer() + Extract logging to authenticate_user_audit_layer()"
      },
      {
        "function_name": "authenticate_user",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 186,
        "responsibilities": [
          "auth",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def authenticate_user(self, username: str, password: str, \n                         ip_address: str = \"unknown\",\n                         user_agent: str = \"unknown\") -> Optional[Session]:\n        \"\"\"Authenticate user and create session.\"\"\"\n        # Find user by username\n        user = None\n   ...",
        "suggested_refactor": "Extract UI rendering to authenticate_user_ui_layer() + Extract validation to authenticate_user_validator()"
      },
      {
        "function_name": "business_rule_violation",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 97,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def business_rule_violation(cls, message: str, details: Optional[Dict[str, Any]] = None) -> 'ServiceResult[T]':\n        \"\"\"Create a business rule violation error.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.BUSINESS_RULE_VIOLATION,\n            message=message,\n      ...",
        "suggested_refactor": "Extract UI rendering to business_rule_violation_ui_layer() + Extract logging to business_rule_violation_audit_layer() + Extract business logic to business_rule_violation_processor()"
      },
      {
        "function_name": "cache_database_query",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 745,
        "responsibilities": [
          "network",
          "database",
          "validation"
        ],
        "severity": "HIGH",
        "code_snippet": "def cache_database_query(query_name: str, ttl: int = 600):\n    \"\"\"\n    Special decorator for database queries with intelligent invalidation.\n    \"\"\"\n    def decorator(func: Callable) -> Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache = get_cache()\n            \n...",
        "suggested_refactor": "Extract database operations to cache_database_query_data_layer() + Extract validation to cache_database_query_validator()"
      },
      {
        "function_name": "calculate_graph_metrics",
        "file_path": "streamlit_extension/utils/graph_algorithms.py",
        "line_number": 438,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def calculate_graph_metrics(adjacency: Dict[str, Set[str]]) -> Dict[str, Any]:\n        \"\"\"\n        Calcula m\u00e9tricas b\u00e1sicas do grafo\n        MELHORIA: Adicionada valida\u00e7\u00e3o de arestas \u00f3rf\u00e3s\n        \n        Args:\n            adjacency: Grafo dirigido\n            \n        Returns:\n            Dici...",
        "suggested_refactor": "Extract UI rendering to calculate_graph_metrics_ui_layer() + Extract logging to calculate_graph_metrics_audit_layer() + Extract business logic to calculate_graph_metrics_processor()"
      },
      {
        "function_name": "calculate_recent_points",
        "file_path": "streamlit_extension/components/sidebar/points.py",
        "line_number": 18,
        "responsibilities": [
          "business_logic",
          "auth",
          "network"
        ],
        "severity": "HIGH",
        "code_snippet": "def calculate_recent_points(timer_sessions: List[Dict[str, Any]], achievements: List[Dict[str, Any]]) -> int:\n    \"\"\"Calculate points earned in last 7 days.\"\"\"\n    recent_points = 0\n    cutoff_date = (datetime.now() - timedelta(days=7)).isoformat()\n    \n    # Points from timer sessions (focus time)\n...",
        "suggested_refactor": "Extract business logic to calculate_recent_points_processor()"
      },
      {
        "function_name": "call",
        "file_path": "streamlit_extension/utils/circuit_breaker.py",
        "line_number": 288,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def call(self, func: Callable, *args, **kwargs) -> Any:\n        try:\n            return super().call(func, *args, **kwargs)\n        except sqlite3.OperationalError as exc:\n            msg = str(exc).lower()\n            if \"database is locked\" in msg:\n                logger.warning(\"Database lock...",
        "suggested_refactor": "Extract database operations to call_data_layer() + Extract UI rendering to call_ui_layer() + Extract logging to call_audit_layer()"
      },
      {
        "function_name": "can_recover",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 91,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, ValidationError)\n",
        "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer() + Extract validation to can_recover_validator()"
      },
      {
        "function_name": "categorize_exception",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 101,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def categorize_exception(self, exception: Exception) -> str:\n        \"\"\"Categorize exception type\"\"\"\n        \n        exception_name = type(exception).__name__.lower()\n        exception_message = str(exception).lower()\n        \n        # Database related\n        if any(keyword in exception_name ...",
        "suggested_refactor": "Extract UI rendering to categorize_exception_ui_layer() + Extract logging to categorize_exception_audit_layer()"
      },
      {
        "function_name": "check_api_rate_limit",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 66,
        "responsibilities": [
          "auth",
          "network",
          "validation"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_api_rate_limit(request_type: str = \"api_request\", user_id: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n    \"\"\"\n    Check rate limits for API requests with specific limits.\n    \n    Args:\n        request_type: Type of request (api_request, api_heavy, etc.)\n        user_id: User ID ...",
        "suggested_refactor": "Extract validation to check_api_rate_limit_validator()"
      },
      {
        "function_name": "check_connection",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 55,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def check_connection(self) -> HealthCheck:\n        \"\"\"Test database connection\"\"\"\n        start_time = time.time()\n        \n        try:\n            conn = sqlite3.connect(self.db_path, timeout=5.0)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1\")\n            result = cu...",
        "suggested_refactor": "Extract database operations to check_connection_data_layer() + Extract UI rendering to check_connection_ui_layer() + Extract logging to check_connection_audit_layer()"
      },
      {
        "function_name": "check_database_health",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 118,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def check_database_health(self) -> dict:\n        from ..database.health import check_health  # type: ignore\n        try:\n            return check_health()\n        except Exception as e:\n            self._logger.error(\"check_database_health failed: %s\", e, exc_info=True)\n            return {\"stat...",
        "suggested_refactor": "Extract UI rendering to check_database_health_ui_layer() + Extract logging to check_database_health_audit_layer() + Extract validation to check_database_health_validator()"
      },
      {
        "function_name": "check_debug_widgets_health",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 399,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_debug_widgets_health() -> Dict[str, Any]:\n    \"\"\"Check health of debug widgets dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"exception_handler_available\": EXCEPTION_HANDLER_AVAILABLE,\n        \"session_manager_available\": SESSION_MANAGER_AVAILABL...",
        "suggested_refactor": "Extract UI rendering to check_debug_widgets_health_ui_layer() + Extract logging to check_debug_widgets_health_audit_layer()"
      },
      {
        "function_name": "check_dos_protection",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 840,
        "responsibilities": [
          "auth",
          "validation",
          "file_io"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_dos_protection(operation_type: str,\n                        endpoint: str = \"unknown\", \n                        request_size: int = 0,\n                        user_id: Optional[str] = None,\n                        profile_name: str = \"default\") -> Tuple[bool, Optional[str], Dict[str, Any]]...",
        "suggested_refactor": "Extract validation to check_dos_protection_validator()"
      },
      {
        "function_name": "check_health",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 49,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_health() -> Dict[str, Any]:\n    \"\"\"\n    Health-check do banco.\n    Prefer\u00eancia: legado -> modular -> erro estruturado.\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().check_database_health()\n    except Exception as e:\n        logger.debug(\"Legacy health check unavailable/faile...",
        "suggested_refactor": "Extract UI rendering to check_health_ui_layer() + Extract logging to check_health_audit_layer() + Extract validation to check_health_validator()"
      },
      {
        "function_name": "check_performance",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 98,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def check_performance(self) -> HealthCheck:\n        \"\"\"Test database performance\"\"\"\n        start_time = time.time()\n        \n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            \n            # Test query performance\n            test_querie...",
        "suggested_refactor": "Extract database operations to check_performance_data_layer() + Extract UI rendering to check_performance_ui_layer() + Extract logging to check_performance_audit_layer()"
      },
      {
        "function_name": "check_services_health",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 258,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_services_health() -> Dict[str, Any]:\n    \"\"\"\n    Combined system health (DB + Services). Stable structure for UI/JSON.\n    \"\"\"\n    db_section = HealthSection(status=\"unknown\")\n    svc_section = HealthSection(status=\"unknown\")\n\n    # DB health (modular health API)\n    try:\n        db_health...",
        "suggested_refactor": "Extract UI rendering to check_services_health_ui_layer() + Extract logging to check_services_health_audit_layer() + Extract validation to check_services_health_validator()"
      },
      {
        "function_name": "check_session_manager_health",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 382,
        "responsibilities": [
          "auth",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def check_session_manager_health() -> Dict[str, Any]:\n    \"\"\"Check health of session manager dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"config_available\": CONFIG_AVAILABLE,\n        \"setup_available\": SETUP_AVAILABLE,\n        \"exception_handler_availabl...",
        "suggested_refactor": "Extract UI rendering to check_session_manager_health_ui_layer() + Extract validation to check_session_manager_health_validator()"
      },
      {
        "function_name": "check_streamlit_session",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 258,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def check_streamlit_session(self) -> HealthCheck:\n        \"\"\"Check Streamlit session health\"\"\"\n        start_time = time.time()\n        \n        if not STREAMLIT_AVAILABLE:\n            return HealthCheck(\n                name=\"streamlit_availability\",\n                status=HealthStatus.WARNING,...",
        "suggested_refactor": "Extract UI rendering to check_streamlit_session_ui_layer() + Extract logging to check_streamlit_session_audit_layer()"
      },
      {
        "function_name": "clear_all_caches",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 865,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def clear_all_caches():\n    \"\"\"Clear all caches (memory, disk, session).\"\"\"\n    # Clear global cache\n    cache = get_cache()\n    cache.clear()\n    \n    # Clear session cache\n    session_cache = get_session_cache()\n    session_cache.clear()\n    \n    # Clear Streamlit cache if available\n    if STREAML...",
        "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer()"
      },
      {
        "function_name": "clear_cache",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1431,
        "responsibilities": [
          "network",
          "logging",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def clear_cache(self, cache_pattern: Optional[str] = None) -> bool:\n        \"\"\"Clear query result caches with optional pattern matching.\n\n        Args:\n            cache_pattern: Optional pattern to selectively invalidate caches.\n                When ``None`` all database query caches are remove...",
        "suggested_refactor": "Extract database operations to clear_cache_data_layer() + Extract logging to clear_cache_audit_layer()"
      },
      {
        "function_name": "client_exists",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 291,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def client_exists(self, client_id: int) -> bool:\n        \"\"\"Check if client exists and is active.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_clients WHERE id = ? AND status = 'active'\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return l...",
        "suggested_refactor": "Extract database operations to client_exists_data_layer() + Extract UI rendering to client_exists_ui_layer() + Extract logging to client_exists_audit_layer()"
      },
      {
        "function_name": "count_by_epic",
        "file_path": "streamlit_extension/repos/deps_repo.py",
        "line_number": 283,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def count_by_epic(self, epic_id: int) -> int:\n        \"\"\"\n        Conta n\u00famero de depend\u00eancias no \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            N\u00famero de depend\u00eancias\n            \n        Raises:\n            RepoError: Em caso de erro na...",
        "suggested_refactor": "Extract database operations to count_by_epic_data_layer() + Extract UI rendering to count_by_epic_ui_layer() + Extract logging to count_by_epic_audit_layer()"
      },
      {
        "function_name": "count_by_epic",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 314,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def count_by_epic(self, epic_id: int) -> int:\n        \"\"\"\n        Conta n\u00famero de tarefas ativas no \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            N\u00famero de tarefas\n            \n        Raises:\n            RepoError: Em caso de erro na qu...",
        "suggested_refactor": "Extract database operations to count_by_epic_data_layer() + Extract UI rendering to count_by_epic_ui_layer() + Extract logging to count_by_epic_audit_layer()"
      },
      {
        "function_name": "count_epics",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 234,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def count_epics(self, project_id: int) -> int:\n        \"\"\"Count epics for a project.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) FROM framework_epics WHERE project_id = ?\"\n            result = self.db_manager.execute_query(query, (project_id,))\n            return result[0]['COUNT(*)'] i...",
        "suggested_refactor": "Extract database operations to count_epics_data_layer() + Extract UI rendering to count_epics_ui_layer() + Extract logging to count_epics_audit_layer()"
      },
      {
        "function_name": "count_projects",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 194,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def count_projects(self, client_id: int) -> int:\n        \"\"\"Count projects for a client.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) FROM framework_projects WHERE client_id = ?\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return result[0]['COUNT(*...",
        "suggested_refactor": "Extract database operations to count_projects_data_layer() + Extract UI rendering to count_projects_ui_layer() + Extract logging to count_projects_audit_layer()"
      },
      {
        "function_name": "count_tasks",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 286,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def count_tasks(self, epic_id: int) -> int:\n        \"\"\"Count tasks for an epic.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) AS total FROM framework_tasks WHERE epic_id = ?\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return int(result[0]['total']) i...",
        "suggested_refactor": "Extract database operations to count_tasks_data_layer() + Extract UI rendering to count_tasks_ui_layer() + Extract logging to count_tasks_audit_layer()"
      },
      {
        "function_name": "create",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 120,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def create(self, client_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new client and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_clients (\n                    name, email, phone, company, address, \n                    contact_person, s...",
        "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
      },
      {
        "function_name": "create",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 158,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def create(self, project_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new project and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_projects (\n                    name, description, client_id, status, start_date, end_date,\n             ...",
        "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
      },
      {
        "function_name": "create_analytics_engine",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 597,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def create_analytics_engine(db_manager: DatabaseManager = None) -> StreamlitAnalyticsEngine:\n    \"\"\"Create a StreamlitAnalyticsEngine instance.\"\"\"\n    return StreamlitAnalyticsEngine(db_manager)\n\n",
        "suggested_refactor": "Extract database operations to create_analytics_engine_data_layer() + Extract UI rendering to create_analytics_engine_ui_layer()"
      },
      {
        "function_name": "create_api_error_response",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 253,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def create_api_error_response(error_message: str, error_code: str, \n                            details: Optional[Any] = None) -> Dict[str, Any]:\n    \"\"\"\n    Create standardized API error response.\n    \n    Args:\n        error_message: Human-readable error message\n        error_code: Machine-readabl...",
        "suggested_refactor": "Extract UI rendering to create_api_error_response_ui_layer() + Extract logging to create_api_error_response_audit_layer()"
      },
      {
        "function_name": "create_project",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 384,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def create_project(self, **kwargs) -> Optional[int]:\n        \"\"\"Create project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.create_project(**kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"project\")\n               ...",
        "suggested_refactor": "Extract UI rendering to create_project_ui_layer() + Extract logging to create_project_audit_layer() + Extract validation to create_project_validator()"
      },
      {
        "function_name": "create_schema_if_needed",
        "file_path": "streamlit_extension/database/schema.py",
        "line_number": 49,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def create_schema_if_needed(verbose: bool = False) -> None:\n    \"\"\"\n    Ponto central de DDL (schema do framework).\n\n    Estrat\u00e9gia:\n      1) Se o DatabaseManager legado exp\u00f5e `create_schema_if_needed`, delega para ele.\n      2) Caso contr\u00e1rio, tenta a API modular (`streamlit_extension.database.crea...",
        "suggested_refactor": "Extract database operations to create_schema_if_needed_data_layer() + Extract UI rendering to create_schema_if_needed_ui_layer() + Extract logging to create_schema_if_needed_audit_layer()"
      },
      {
        "function_name": "create_task",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1920,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def create_task(self, title: str, epic_id: int, description: str = \"\", \n                   tdd_phase: str = \"\", priority: int = 2, \n                   estimate_minutes: int = 0) -> Optional[int]:\n        \"\"\"Create a new task in the database.\n        \n        Args:\n            title: Task title\n ...",
        "suggested_refactor": "Extract database operations to create_task_data_layer() + Extract UI rendering to create_task_ui_layer() + Extract logging to create_task_audit_layer()"
      },
      {
        "function_name": "create_timer_session",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1150,
        "responsibilities": [
          "logging",
          "auth",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def create_timer_session(self, task_id: Optional[int], duration_minutes: int, \n                           focus_rating: Optional[int] = None, interruptions: int = 0,\n                           actual_duration_minutes: Optional[int] = None,\n                           ended_at: Optional[str] = Non...",
        "suggested_refactor": "Extract database operations to create_timer_session_data_layer() + Extract logging to create_timer_session_audit_layer()"
      },
      {
        "function_name": "decorator",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 749,
        "responsibilities": [
          "network",
          "database",
          "validation"
        ],
        "severity": "HIGH",
        "code_snippet": "    def decorator(func: Callable) -> Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache = get_cache()\n            \n            # Create cache key with query name and parameters\n            cache_key = f\"db_query:{query_name}:{cache._generate_key((args, kwargs))}\"\n...",
        "suggested_refactor": "Extract database operations to decorator_data_layer() + Extract validation to decorator_validator()"
      },
      {
        "function_name": "delete",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 177,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def delete(self, client_id: int) -> bool:\n        \"\"\"Delete client (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_clients SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            params...",
        "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
      },
      {
        "function_name": "delete",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 269,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def delete(self, epic_id: int) -> bool:\n        \"\"\"Delete epic (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_epics SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            params = (Ep...",
        "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
      },
      {
        "function_name": "delete",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 217,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def delete(self, project_id: int) -> bool:\n        \"\"\"Delete project (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_projects SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            par...",
        "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
      },
      {
        "function_name": "delete",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 478,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def delete(self, key: str) -> bool:\n        \"\"\"\n        Delete key from cache.\n        \n        Args:\n            key: Cache key to delete\n            \n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self._check_health():\n            return False\n     ...",
        "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
      },
      {
        "function_name": "delete_pattern",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 503,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def delete_pattern(self, pattern: str) -> int:\n        \"\"\"\n        Delete keys matching pattern.\n        \n        Args:\n            pattern: Key pattern (e.g., 'client:*')\n            \n        Returns:\n            Number of keys deleted\n        \"\"\"\n        if not self._check_health():\n          ...",
        "suggested_refactor": "Extract database operations to delete_pattern_data_layer() + Extract UI rendering to delete_pattern_ui_layer() + Extract logging to delete_pattern_audit_layer()"
      },
      {
        "function_name": "ensure_oauth_available",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 152,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def ensure_oauth_available(raise_error: bool = False) -> bool:\n    \"\"\"\n    Indica se o backend de OAuth real est\u00e1 dispon\u00edvel.\n    - Se `raise_error=True` e indispon\u00edvel, lan\u00e7a `RuntimeError`.\n    \"\"\"\n    if not _OAUTH_AVAILABLE and raise_error:\n        raise RuntimeError(\n            \"Google OAuth n...",
        "suggested_refactor": "Extract UI rendering to ensure_oauth_available_ui_layer() + Extract logging to ensure_oauth_available_audit_layer()"
      },
      {
        "function_name": "epic_exists",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 329,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def epic_exists(self, epic_id: int) -> bool:\n        \"\"\"Check if epic exists.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_epics WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return len(result) > 0\n        except Exception as e:\n...",
        "suggested_refactor": "Extract database operations to epic_exists_data_layer() + Extract UI rendering to epic_exists_ui_layer() + Extract logging to epic_exists_audit_layer()"
      },
      {
        "function_name": "epic_exists",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 332,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def epic_exists(self, epic_id: int) -> bool:\n        \"\"\"Check if epic exists and is not cancelled.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_epics WHERE id = ? AND status != 'cancelled'\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return ...",
        "suggested_refactor": "Extract database operations to epic_exists_data_layer() + Extract UI rendering to epic_exists_ui_layer() + Extract logging to epic_exists_audit_layer()"
      },
      {
        "function_name": "example_service_usage",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 425,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def example_service_usage() -> None:\n    \"\"\"Exemplo simples de inicializa\u00e7\u00e3o e uso do container (modo legado).\"\"\"\n    dm = DatabaseManager()  # type: ignore[call-arg]\n    container = initialize_service_container(dm, lazy_loading=True)\n\n    try:\n        client_service = get_client_service()\n        p...",
        "suggested_refactor": "Extract database operations to example_service_usage_data_layer() + Extract UI rendering to example_service_usage_ui_layer()"
      },
      {
        "function_name": "export_configuration",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 271,
        "responsibilities": [
          "network",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def export_configuration(self, export_path: Path, include_sensitive: bool = False) -> bool:\n        \"\"\"Export configuration to external file.\"\"\"\n        try:\n            config_data = {}\n            \n            # Export streamlit config\n            if CONFIG_AVAILABLE:\n                config = ...",
        "suggested_refactor": "Extract UI rendering to export_configuration_ui_layer()"
      },
      {
        "function_name": "extract_request_info",
        "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
        "line_number": 36,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def extract_request_info(self, request: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Extract minimal request information.\"\"\"\n        return {\n            \"ip\": request.get(\"ip\"),\n            \"user_id\": request.get(\"user_id\"),\n            \"tier\": request.get(\"tier\", \"free\"),\n            \"endpoin...",
        "suggested_refactor": "Extract UI rendering to extract_request_info_ui_layer() + Extract logging to extract_request_info_audit_layer()"
      },
      {
        "function_name": "fetch_user_stats",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 82,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def fetch_user_stats(user_id: Optional[int] = None) -> Dict[str, Any]:\n    \"\"\"Fetch user statistics using AnalyticsService with fallbacks.\"\"\"\n    def _call():\n        try:\n            # Use AnalyticsService instead of direct database queries\n            from ..services.service_container import Servi...",
        "suggested_refactor": "Extract UI rendering to fetch_user_stats_ui_layer()"
      },
      {
        "function_name": "find_by_client",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 149,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_client(self, client_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all projects for a specific client.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_projects WHERE client_id = ? ORDER BY created_at DESC\"\n            return self.db_manager.execute_query(query, (clien...",
        "suggested_refactor": "Extract database operations to find_by_client_data_layer() + Extract UI rendering to find_by_client_ui_layer() + Extract logging to find_by_client_audit_layer()"
      },
      {
        "function_name": "find_by_email",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 36,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_email(self, email: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find client by email address.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_clients WHERE email = ?\"\n            result = self.db_manager.execute_query(query, (email,))\n            return result[0] if resu...",
        "suggested_refactor": "Extract database operations to find_by_email_data_layer() + Extract UI rendering to find_by_email_ui_layer() + Extract logging to find_by_email_audit_layer()"
      },
      {
        "function_name": "find_by_epic",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 186,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_epic(self, epic_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all tasks for a specific epic.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, COALESCE(ws.total_time, 0) as total_time_minutes\n                FROM framework_tasks t\n                LEFT JOIN (\n   ...",
        "suggested_refactor": "Extract database operations to find_by_epic_data_layer() + Extract UI rendering to find_by_epic_ui_layer() + Extract logging to find_by_epic_audit_layer()"
      },
      {
        "function_name": "find_by_id",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 26,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_id(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find client by ID.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_clients WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return result[0] if result else N...",
        "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
      },
      {
        "function_name": "find_by_id",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 27,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_id(self, epic_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find epic by ID with project and client information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT e.*, p.name as project_name, c.name as client_name\n                FROM framework_epics e\n               ...",
        "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
      },
      {
        "function_name": "find_by_id",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 26,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_id(self, project_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find project by ID with client information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT p.*, c.name as client_name, c.email as client_email\n                FROM framework_projects p\n                L...",
        "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
      },
      {
        "function_name": "find_by_id",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 28,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_id(self, task_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find task by ID with epic and project information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key, \n                       p.name as project_name, c.name as client_na...",
        "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
      },
      {
        "function_name": "find_by_key",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 43,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_key(self, epic_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find epic by unique key.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_epics WHERE epic_key = ?\"\n            result = self.db_manager.execute_query(query, (epic_key,))\n            return result[0] if resu...",
        "suggested_refactor": "Extract database operations to find_by_key_data_layer() + Extract UI rendering to find_by_key_ui_layer() + Extract logging to find_by_key_audit_layer()"
      },
      {
        "function_name": "find_by_name_and_client",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 41,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_name_and_client(self, name: str, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find project by name and client ID.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_projects WHERE name = ? AND client_id = ?\"\n            result = self.db_manager.execute_query(quer...",
        "suggested_refactor": "Extract database operations to find_by_name_and_client_data_layer() + Extract UI rendering to find_by_name_and_client_ui_layer() + Extract logging to find_by_name_and_client_audit_layer()"
      },
      {
        "function_name": "find_by_project",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 175,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_project(self, project_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all epics for a specific project.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT e.*, COUNT(t.id) as task_count,\n                       SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as c...",
        "suggested_refactor": "Extract database operations to find_by_project_data_layer() + Extract UI rendering to find_by_project_ui_layer() + Extract logging to find_by_project_audit_layer()"
      },
      {
        "function_name": "find_by_status",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 205,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_status(self, status: str, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find tasks by status.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key\n                FROM framework_tasks t\n                LEFT JOIN fram...",
        "suggested_refactor": "Extract database operations to find_by_status_data_layer() + Extract UI rendering to find_by_status_ui_layer() + Extract logging to find_by_status_audit_layer()"
      },
      {
        "function_name": "find_by_task_key",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 46,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_task_key(self, task_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find task by unique task key.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_tasks WHERE task_key = ?\"\n            result = self.db_manager.execute_query(query, (task_key,))\n            return result[...",
        "suggested_refactor": "Extract database operations to find_by_task_key_data_layer() + Extract UI rendering to find_by_task_key_ui_layer() + Extract logging to find_by_task_key_audit_layer()"
      },
      {
        "function_name": "find_by_tdd_phase",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 226,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def find_by_tdd_phase(self, tdd_phase: str, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find tasks by TDD phase.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key\n                FROM framework_tasks t\n                LEFT ...",
        "suggested_refactor": "Extract database operations to find_by_tdd_phase_data_layer() + Extract UI rendering to find_by_tdd_phase_ui_layer() + Extract logging to find_by_tdd_phase_audit_layer()"
      },
      {
        "function_name": "format",
        "file_path": "streamlit_extension/utils/log_formatter.py",
        "line_number": 14,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def format(self, record: logging.LogRecord) -> str:\n        \"\"\"Format log record as JSON\"\"\"\n\n        # Start with basic log record\n        log_entry = {\n            \"event\": \"log\",\n            \"timestamp\": datetime.fromtimestamp(record.created).isoformat() + \"Z\",\n            \"level\": record.leve...",
        "suggested_refactor": "Extract UI rendering to format_ui_layer() + Extract logging to format_audit_layer()"
      },
      {
        "function_name": "format",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 577,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def format(self, record):\n        # If the message is already JSON (from structured logger), return as-is\n        if hasattr(record, 'msg') and isinstance(record.msg, str):\n            try:\n                json.loads(record.msg)\n                return record.msg\n            except (json.JSONDeco...",
        "suggested_refactor": "Extract UI rendering to format_ui_layer() + Extract logging to format_audit_layer()"
      },
      {
        "function_name": "format_database_datetime",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1367,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def format_database_datetime(self, dt_string: str, format_type: str = \"full\") -> str:\n        \"\"\"Format database datetime string with user timezone.\"\"\"\n        if not dt_string or not TIMEZONE_UTILS_AVAILABLE:\n            return dt_string or \"Unknown\"\n        \n        try:\n            # Parse da...",
        "suggested_refactor": "Extract UI rendering to format_database_datetime_ui_layer() + Extract logging to format_database_datetime_audit_layer()"
      },
      {
        "function_name": "generate_performance_report",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 434,
        "responsibilities": [
          "network",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def generate_performance_report(self, test_results: Dict[str, Any], \n                                  test_name: str) -> str:\n        \"\"\"Generate comprehensive performance report.\"\"\"\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        report_file = self.output_dir / f\"...",
        "suggested_refactor": "Extract UI rendering to generate_performance_report_ui_layer()"
      },
      {
        "function_name": "generate_validation_report",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 413,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def generate_validation_report(validations: List[Tuple[str, bool, List[str]]]) -> Dict[str, Any]:\n    \"\"\"\n    Generate a comprehensive validation report.\n    \n    Args:\n        validations: List of (name, is_valid, errors) tuples\n    \n    Returns:\n        Validation report dictionary\n    \"\"\"\n    tot...",
        "suggested_refactor": "Extract UI rendering to generate_validation_report_ui_layer() + Extract logging to generate_validation_report_audit_layer() + Extract validation to generate_validation_report_validator()"
      },
      {
        "function_name": "get",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 196,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get(self, key: str) -> Optional[str]:\n        if not self.is_available:\n            return None\n        try:\n            val = self._client.get(self._hkey(key))\n            return val.decode() if isinstance(val, (bytes, bytearray)) else val\n        except Exception as e:\n            self.log...",
        "suggested_refactor": "Extract UI rendering to get_ui_layer() + Extract logging to get_audit_layer() + Extract validation to get_validator()"
      },
      {
        "function_name": "get",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 417,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get(self, key: str) -> Optional[Any]:\n        \"\"\"\n        Get value from cache.\n        \n        Args:\n            key: Cache key\n            \n        Returns:\n            Cached value or None if not found/error\n        \"\"\"\n        if not self._check_health():\n            return None\n       ...",
        "suggested_refactor": "Extract UI rendering to get_ui_layer() + Extract logging to get_audit_layer()"
      },
      {
        "function_name": "get_all_epics",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 73,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_all_epics(self) -> list[dict]:\n        try:\n            res = db_queries.list_all_epics()\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_all_epics failed: %s\", e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_all_epics_ui_layer() + Extract logging to get_all_epics_audit_layer()"
      },
      {
        "function_name": "get_all_tasks",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 89,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_all_tasks(self) -> list[dict]:\n        try:\n            res = db_queries.list_all_tasks()\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_all_tasks failed: %s\", e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_all_tasks_ui_layer() + Extract logging to get_all_tasks_audit_layer()"
      },
      {
        "function_name": "get_available_page_names",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 230,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_available_page_names() -> List[str]:\n    \"\"\"\n    Get list of available page names.\n    \n    Returns:\n        List of available page names\n    \"\"\"\n    if PAGES_AVAILABLE:\n        try:\n            available_pages = get_available_pages()\n            page_names = list(available_pages.keys())\n   ...",
        "suggested_refactor": "Extract UI rendering to get_available_page_names_ui_layer() + Extract logging to get_available_page_names_audit_layer()"
      },
      {
        "function_name": "get_cache_info",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 554,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_cache_info(self) -> Dict[str, Any]:\n        \"\"\"Get cache information and statistics.\"\"\"\n        info = {\n            \"available\": self.is_available,\n            \"host\": self.host,\n            \"port\": self.port,\n            \"db\": self.db,\n            \"max_connections\": self.max_connection...",
        "suggested_refactor": "Extract UI rendering to get_cache_info_ui_layer() + Extract logging to get_cache_info_audit_layer()"
      },
      {
        "function_name": "get_cache_stats",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 668,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_cache_stats() -> Dict[str, Any]:\n    \"\"\"Get cache statistics and information.\"\"\"\n    cache = get_cache_manager()\n    return cache.get_cache_info()\n\n",
        "suggested_refactor": "Extract UI rendering to get_cache_stats_ui_layer() + Extract logging to get_cache_stats_audit_layer()"
      },
      {
        "function_name": "get_client",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 264,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_client(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single client with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_client(client_id)\n            \n            response_time = time.time() - start_time\n    ...",
        "suggested_refactor": "Extract UI rendering to get_client_ui_layer() + Extract logging to get_client_audit_layer()"
      },
      {
        "function_name": "get_client_metrics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 31,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_client_metrics(self, client_id: Optional[int] = None, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get client-level metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            if client_id:\n                where_clause = \"WHERE c.id ...",
        "suggested_refactor": "Extract database operations to get_client_metrics_data_layer() + Extract UI rendering to get_client_metrics_ui_layer() + Extract logging to get_client_metrics_audit_layer()"
      },
      {
        "function_name": "get_client_summary",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 468,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_client_summary(self, client_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get client summary with project count and other metrics.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with client summary data\n   ...",
        "suggested_refactor": "Extract UI rendering to get_client_summary_ui_layer() + Extract logging to get_client_summary_audit_layer()"
      },
      {
        "function_name": "get_clients",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 232,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_clients(self, \n                   include_inactive: bool = False,\n                   search_name: Optional[str] = None,\n                   status_filter: Optional[str] = None,\n                   tier_filter: Optional[str] = None,\n                   limit: Optional[int] = None,\n          ...",
        "suggested_refactor": "Extract UI rendering to get_clients_ui_layer() + Extract logging to get_clients_audit_layer()"
      },
      {
        "function_name": "get_connection",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 53,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_connection(self):\n        \"\"\"Get connection from pool with leak detection\"\"\"\n        with self._lock:\n            # Check for available connection\n            now = time.time()\n            for i, (conn, last_used) in enumerate(self._connections):\n                if now - last_used < self...",
        "suggested_refactor": "Extract database operations to get_connection_data_layer() + Extract UI rendering to get_connection_ui_layer() + Extract logging to get_connection_audit_layer()"
      },
      {
        "function_name": "get_connection_metrics",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 418,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_connection_metrics() -> Dict[str, Any]:\n    \"\"\"Retorna m\u00e9tricas de performance do pool e cache.\"\"\"\n    return _optimized_pool.get_performance_metrics()\n",
        "suggested_refactor": "Extract database operations to get_connection_metrics_data_layer() + Extract UI rendering to get_connection_metrics_ui_layer()"
      },
      {
        "function_name": "get_current_correlation_id",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 35,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_current_correlation_id(self) -> Optional[str]:\n        \"\"\"Get current correlation ID from context\"\"\"\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            return st.session_state.get(\"correlation_id\")\n        return self._correlation_storage.get(threading.ge...",
        "suggested_refactor": "Extract UI rendering to get_current_correlation_id_ui_layer()"
      },
      {
        "function_name": "get_current_user",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 215,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_current_user(self) -> Optional[Dict[str, Any]]:\n        \"\"\"Get current authenticated user information.\"\"\"\n        if not self.is_authenticated():\n            return None\n        \n        session = st.session_state.get('user_session')\n        return session.get('user_info') if session els...",
        "suggested_refactor": "Extract UI rendering to get_current_user_ui_layer() + Extract logging to get_current_user_audit_layer()"
      },
      {
        "function_name": "get_dashboard_analytics",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 551,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_dashboard_analytics(self) -> Dict[str, Any]:\n        \"\"\"Get dashboard analytics with heavy caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            # This would be a heavy aggregation query\n            result = {\n                \"total_clients\": len(self.get_clients...",
        "suggested_refactor": "Extract UI rendering to get_dashboard_analytics_ui_layer() + Extract logging to get_dashboard_analytics_audit_layer()"
      },
      {
        "function_name": "get_database_manager",
        "file_path": "streamlit_extension/database/database_singleton.py",
        "line_number": 29,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_database_manager() -> DatabaseManager:\n    \"\"\"\n    Thread-safe singleton DatabaseManager (double-checked locking).\n    \n    CANONICAL IMPLEMENTATION - replaces all duplicate _db() functions.\n    \n    Returns:\n        DatabaseManager: Singleton instance\n        \n    Thread Safety:\n        Use...",
        "suggested_refactor": "Extract database operations to get_database_manager_data_layer() + Extract UI rendering to get_database_manager_ui_layer()"
      },
      {
        "function_name": "get_database_manager",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 146,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_database_manager(force_new: bool = False) -> Optional[\"DatabaseManager\"]:\n    \"\"\"\n    Returns (or creates) DatabaseManager legacy instance.\n    Used only to initialize ServiceContainer while services depend on it.\n    \"\"\"\n    global _db_manager_singleton\n\n    if DatabaseManager is None:\n    ...",
        "suggested_refactor": "Extract database operations to get_database_manager_data_layer() + Extract UI rendering to get_database_manager_ui_layer() + Extract logging to get_database_manager_audit_layer()"
      },
      {
        "function_name": "get_env",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 309,
        "responsibilities": [
          "business_logic",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_env(key: str, default: Any, convert_type: type = str) -> Any:\n        value = os.getenv(key)\n        if value is None:\n            return default\n        \n        try:\n            if convert_type == bool:\n                return value.lower() in ('true', '1', 'yes', 'on')\n            elif...",
        "suggested_refactor": "Extract UI rendering to get_env_ui_layer() + Extract logging to get_env_audit_layer() + Extract business logic to get_env_processor()"
      },
      {
        "function_name": "get_epic",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 471,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_epic(self, epic_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single epic with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_epic(epic_id)\n            \n            response_time = time.time() - start_time\n            op...",
        "suggested_refactor": "Extract UI rendering to get_epic_ui_layer() + Extract logging to get_epic_audit_layer()"
      },
      {
        "function_name": "get_epics",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 65,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_epics(self) -> list[dict]:\n        try:\n            res = db_queries.list_epics()\n            return list(res)  # j\u00e1 \u00e9 list[dict]\n        except Exception as e:\n            self._logger.error(\"get_epics failed: %s\", e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_epics_ui_layer() + Extract logging to get_epics_audit_layer()"
      },
      {
        "function_name": "get_epics",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 439,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_epics(self,\n                 project_id: Optional[int] = None,\n                 include_inactive: bool = False,\n                 search_name: Optional[str] = None,\n                 status_filter: Optional[str] = None,\n                 limit: Optional[int] = None,\n                 offset:...",
        "suggested_refactor": "Extract UI rendering to get_epics_ui_layer() + Extract logging to get_epics_audit_layer()"
      },
      {
        "function_name": "get_error_statistics",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 633,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_error_statistics() -> Dict[str, Any]:\n    \"\"\"Get error statistics.\"\"\"\n    return global_exception_handler.get_error_stats()\n\n",
        "suggested_refactor": "Extract UI rendering to get_error_statistics_ui_layer() + Extract logging to get_error_statistics_audit_layer()"
      },
      {
        "function_name": "get_formatted_epic_data",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1393,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_formatted_epic_data(self) -> List[Dict[str, Any]]:\n        \"\"\"Get epics with formatted datetime fields.\"\"\"\n        epics = self.get_epics()\n        \n        for epic in epics:\n            if 'created_at' in epic:\n                epic['created_at_formatted'] = self.format_database_datetim...",
        "suggested_refactor": "Extract database operations to get_formatted_epic_data_data_layer() + Extract UI rendering to get_formatted_epic_data_ui_layer()"
      },
      {
        "function_name": "get_formatted_timer_sessions",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1412,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_formatted_timer_sessions(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Get timer sessions with formatted datetime fields.\"\"\"\n        sessions = self.get_timer_sessions(days)\n        \n        for session in sessions:\n            if 'started_at' in session:\n                sess...",
        "suggested_refactor": "Extract UI rendering to get_formatted_timer_sessions_ui_layer()"
      },
      {
        "function_name": "get_gamification_metrics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 228,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_gamification_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get gamification and achievement metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Epic completion and points\n            epic_query = \"\"\"\n          ...",
        "suggested_refactor": "Extract database operations to get_gamification_metrics_data_layer() + Extract UI rendering to get_gamification_metrics_ui_layer() + Extract logging to get_gamification_metrics_audit_layer()"
      },
      {
        "function_name": "get_preset",
        "file_path": "streamlit_extension/models/scoring.py",
        "line_number": 309,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_preset(self, preset_name: str) -> ScoringPreset:\n        \"\"\"\n        Obt\u00e9m preset de scoring por nome.\n        \n        Args:\n            preset_name: Nome do preset\n            \n        Returns:\n            ScoringPreset configurado\n            \n        Raises:\n            ValueError: S...",
        "suggested_refactor": "Extract UI rendering to get_preset_ui_layer() + Extract logging to get_preset_audit_layer() + Extract validation to get_preset_validator()"
      },
      {
        "function_name": "get_productivity_patterns",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 836,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_productivity_patterns(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get productivity patterns for analysis.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with productivity patterns\n...",
        "suggested_refactor": "Extract UI rendering to get_productivity_patterns_ui_layer() + Extract logging to get_productivity_patterns_audit_layer()"
      },
      {
        "function_name": "get_productivity_report",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 421,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_productivity_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get comprehensive productivity report.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with productivity report\n     ...",
        "suggested_refactor": "Extract UI rendering to get_productivity_report_ui_layer() + Extract logging to get_productivity_report_audit_layer()"
      },
      {
        "function_name": "get_project",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 458,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_project(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get project by ID with client information.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project data if found\n        \"\"\"\n       ...",
        "suggested_refactor": "Extract UI rendering to get_project_ui_layer() + Extract logging to get_project_audit_layer()"
      },
      {
        "function_name": "get_project",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 366,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_project(self, project_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single project with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_project(project_id)\n            \n            response_time = time.time() - start_time...",
        "suggested_refactor": "Extract UI rendering to get_project_ui_layer() + Extract logging to get_project_audit_layer()"
      },
      {
        "function_name": "get_project_analytics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 385,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_project_analytics(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get analytics for a specific project.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project analytics\n        \"\"\"\n      ...",
        "suggested_refactor": "Extract UI rendering to get_project_analytics_ui_layer() + Extract logging to get_project_analytics_audit_layer()"
      },
      {
        "function_name": "get_project_metrics",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 244,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_project_metrics(self, project_id: int) -> Dict[str, Any]:\n        \"\"\"Get project metrics (epics, tasks, progress).\"\"\"\n        try:\n            # Count epics by status\n            epic_query = \"\"\"\n                SELECT status, COUNT(*) as count\n                FROM framework_epics\n      ...",
        "suggested_refactor": "Extract database operations to get_project_metrics_data_layer() + Extract UI rendering to get_project_metrics_ui_layer() + Extract logging to get_project_metrics_audit_layer()"
      },
      {
        "function_name": "get_project_progress_metrics",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 68,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_project_progress_metrics(self, project_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get project progress metrics.\"\"\"\n        try:\n            if project_id:\n                where_clause = \"WHERE p.id = ?\"\n                params = [project_id]\n            else:\n          ...",
        "suggested_refactor": "Extract database operations to get_project_progress_metrics_data_layer() + Extract UI rendering to get_project_progress_metrics_ui_layer() + Extract logging to get_project_progress_metrics_audit_layer()"
      },
      {
        "function_name": "get_projects",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 334,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_projects(self,\n                    client_id: Optional[int] = None,\n                    include_inactive: bool = False,\n                    search_name: Optional[str] = None,\n                    status_filter: Optional[str] = None,\n                    limit: Optional[int] = None,\n       ...",
        "suggested_refactor": "Extract UI rendering to get_projects_ui_layer() + Extract logging to get_projects_audit_layer()"
      },
      {
        "function_name": "get_projects_by_client",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 626,
        "responsibilities": [
          "business_logic",
          "logging",
          "network"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_projects_by_client(self, client_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all projects for a specific client.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with list of projects\n        \"\"\"\n ...",
        "suggested_refactor": "Extract logging to get_projects_by_client_audit_layer() + Extract business logic to get_projects_by_client_processor()"
      },
      {
        "function_name": "get_query_statistics",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1463,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_query_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get detailed query performance statistics.\n\n        Returns:\n            Dict[str, Any]: Mapping of engine names to connection pool metrics.\n\n        Example:\n            >>> stats = db_manager.get_query_statistics()\n        \"\"\"\n      ...",
        "suggested_refactor": "Extract database operations to get_query_statistics_data_layer() + Extract UI rendering to get_query_statistics_ui_layer()"
      },
      {
        "function_name": "get_safe_context",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 134,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_safe_context(self) -> Dict[str, Any]:\n        \"\"\"Get sanitized context safe for logging.\"\"\"\n        safe_context = {}\n        \n        for key, value in self.context.items():\n            if isinstance(value, str):\n                # Sanitize string values with length limit\n               ...",
        "suggested_refactor": "Extract UI rendering to get_safe_context_ui_layer() + Extract logging to get_safe_context_audit_layer() + Extract validation to get_safe_context_validator()"
      },
      {
        "function_name": "get_session_cache",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 800,
        "responsibilities": [
          "auth",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def get_session_cache() -> Dict[str, Any]:\n    \"\"\"Get session-specific cache storage.\"\"\"\n    if STREAMLIT_AVAILABLE and hasattr(st, 'session_state'):\n        if '_streamlit_cache' not in st.session_state:\n            st.session_state._streamlit_cache = {}\n        return st.session_state._streamlit_c...",
        "suggested_refactor": "Extract UI rendering to get_session_cache_ui_layer()"
      },
      {
        "function_name": "get_sessions_for_task",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 762,
        "responsibilities": [
          "logging",
          "auth",
          "network"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_sessions_for_task(self, task_id: int, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all work sessions for a specific task.\n        \n        Args:\n            task_id: Task ID\n            limit: Optional limit on number of sessions\n          ...",
        "suggested_refactor": "Extract logging to get_sessions_for_task_audit_layer()"
      },
      {
        "function_name": "get_task",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 528,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_task(self, task_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single task with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_task(task_id)\n            \n            response_time = time.time() - start_time\n            op...",
        "suggested_refactor": "Extract UI rendering to get_task_ui_layer() + Extract logging to get_task_audit_layer()"
      },
      {
        "function_name": "get_task_statistics",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2133,
        "responsibilities": [
          "network",
          "logging",
          "database"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_task_statistics(self) -> Dict[str, int]:\n        \"\"\"Get quick statistics for tasks (used by dashboard widgets).\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n         ...",
        "suggested_refactor": "Extract database operations to get_task_statistics_data_layer() + Extract logging to get_task_statistics_audit_layer()"
      },
      {
        "function_name": "get_tasks",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 81,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_tasks(self, epic_id: int) -> list[dict]:\n        try:\n            res = db_queries.list_tasks(epic_id)\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_tasks(%s) failed: %s\", epic_id, e, exc_info=True)\n            return []\n",
        "suggested_refactor": "Extract UI rendering to get_tasks_ui_layer() + Extract logging to get_tasks_audit_layer()"
      },
      {
        "function_name": "get_tasks",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 494,
        "responsibilities": [
          "network",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_tasks(self,\n                 epic_id: Optional[int] = None,\n                 include_completed: bool = True,\n                 search_title: Optional[str] = None,\n                 status_filter: Optional[str] = None,\n                 tdd_phase_filter: Optional[str] = None,\n               ...",
        "suggested_refactor": "Extract UI rendering to get_tasks_ui_layer() + Extract logging to get_tasks_audit_layer()"
      },
      {
        "function_name": "get_tasks_by_status",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 861,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_tasks_by_status(self, status: str, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get tasks by status for workflow management.\n        \n        Args:\n            status: Task status\n            limit: Optional limit on number of tasks\n           ...",
        "suggested_refactor": "Extract UI rendering to get_tasks_by_status_ui_layer() + Extract logging to get_tasks_by_status_audit_layer()"
      },
      {
        "function_name": "get_tasks_by_tdd_phase",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 888,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_tasks_by_tdd_phase(self, tdd_phase: str, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get tasks by TDD phase for workflow management.\n        \n        Args:\n            tdd_phase: TDD phase\n            limit: Optional limit on number of tasks\n ...",
        "suggested_refactor": "Extract UI rendering to get_tasks_by_tdd_phase_ui_layer() + Extract logging to get_tasks_by_tdd_phase_audit_layer()"
      },
      {
        "function_name": "get_time_tracking_report",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 499,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_time_tracking_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get time tracking analysis report.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with time tracking report\n       ...",
        "suggested_refactor": "Extract UI rendering to get_time_tracking_report_ui_layer() + Extract logging to get_time_tracking_report_audit_layer()"
      },
      {
        "function_name": "get_user_by_id",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 346,
        "responsibilities": [
          "auth",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_user_by_id(self, user_id: int) -> Optional[User]:\n        \"\"\"Get user by ID.\"\"\"\n        try:\n            with sqlite3.connect(self.db_path) as conn:\n                row = conn.execute(\"\"\"\n                    SELECT id, username, email, role, is_active, created_at, last_login\n            ...",
        "suggested_refactor": "Extract database operations to get_user_by_id_data_layer() + Extract UI rendering to get_user_by_id_ui_layer()"
      },
      {
        "function_name": "get_user_info",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 139,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def get_user_info(self, credentials: Credentials) -> Dict[str, Any]:\n        \"\"\"Retrieve user information using Google People API.\"\"\"\n        try:\n            # Build People API service\n            service = build('people', 'v1', credentials=credentials)\n            \n            # Get user profi...",
        "suggested_refactor": "Extract UI rendering to get_user_info_ui_layer() + Extract logging to get_user_info_audit_layer()"
      },
      {
        "function_name": "handle_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 619,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def handle_error(exception: Exception, \n                context: Optional[Dict[str, Any]] = None,\n                show_user_message: bool = True) -> StreamlitError:\n    \"\"\"Handle an exception with the global handler.\"\"\"\n    return global_exception_handler.handle_exception(\n        exception, context...",
        "suggested_refactor": "Extract UI rendering to handle_error_ui_layer() + Extract logging to handle_error_audit_layer()"
      },
      {
        "function_name": "import_configuration",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 315,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def import_configuration(self, import_path: Path, components: List[str] = None) -> bool:\n        \"\"\"Import configuration from external file.\"\"\"\n        if not import_path.exists():\n            return False\n        \n        components = components or [\"streamlit_config\", \"themes\"]\n        \n      ...",
        "suggested_refactor": "Extract UI rendering to import_configuration_ui_layer() + Extract logging to import_configuration_audit_layer()"
      },
      {
        "function_name": "init_default_admin",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 381,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def init_default_admin():\n    \"\"\"Initialize default admin user for first setup.\"\"\"\n    auth_manager = AuthenticationManager(\n        secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n    )\n    \n    # Check if admin exists\n    existing_admin = None\n    for user in st.session_state.auth_m...",
        "suggested_refactor": "Extract UI rendering to init_default_admin_ui_layer() + Extract logging to init_default_admin_audit_layer()"
      },
      {
        "function_name": "initialize_service_container",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 337,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def initialize_service_container(db_manager: DatabaseManager, lazy_loading: bool = True) -> ServiceContainer:\n    global _service_container\n    if _service_container is not None:\n        _service_container.shutdown()\n    _service_container = ServiceContainer(db_manager=db_manager, use_modular_api=Fa...",
        "suggested_refactor": "Extract database operations to initialize_service_container_data_layer() + Extract UI rendering to initialize_service_container_ui_layer()"
      },
      {
        "function_name": "is_authenticated",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 194,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def is_authenticated(self) -> bool:\n        \"\"\"Check if user is currently authenticated with valid session.\"\"\"\n        if not st.session_state.get('authenticated', False):\n            return False\n        \n        session = st.session_state.get('user_session')\n        if not session:\n           ...",
        "suggested_refactor": "Extract UI rendering to is_authenticated_ui_layer() + Extract logging to is_authenticated_audit_layer()"
      },
      {
        "function_name": "is_debug_mode",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 255,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def is_debug_mode() -> bool:\n    \"\"\"Check if debug mode is enabled.\"\"\"\n    config = get_config()\n    if config:\n        return bool(getattr(config, \"debug_mode\", False))\n    return get_session_value(\"show_debug_info\", False)\n",
        "suggested_refactor": "Extract UI rendering to is_debug_mode_ui_layer() + Extract logging to is_debug_mode_audit_layer()"
      },
      {
        "function_name": "list_by_depends_on_task_key",
        "file_path": "streamlit_extension/repos/deps_repo.py",
        "line_number": 175,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def list_by_depends_on_task_key(self, depends_on_task_key: str) -> List[TaskDependency]:\n        \"\"\"\n        Lista todas as tarefas que dependem de uma tarefa espec\u00edfica.\n        \n        Args:\n            depends_on_task_key: Task key da qual outras dependem\n            \n        Returns:\n      ...",
        "suggested_refactor": "Extract database operations to list_by_depends_on_task_key_data_layer() + Extract UI rendering to list_by_depends_on_task_key_ui_layer() + Extract logging to list_by_depends_on_task_key_audit_layer()"
      },
      {
        "function_name": "list_by_task_id",
        "file_path": "streamlit_extension/repos/deps_repo.py",
        "line_number": 127,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def list_by_task_id(self, task_id: int) -> List[TaskDependency]:\n        \"\"\"\n        Lista depend\u00eancias de uma tarefa espec\u00edfica.\n        \n        Args:\n            task_id: ID da tarefa\n            \n        Returns:\n            Lista de depend\u00eancias da tarefa\n            \n        Raises:\n      ...",
        "suggested_refactor": "Extract database operations to list_by_task_id_data_layer() + Extract UI rendering to list_by_task_id_ui_layer() + Extract logging to list_by_task_id_audit_layer()"
      },
      {
        "function_name": "list_by_task_keys",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 156,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def list_by_task_keys(self, task_keys: List[str]) -> List[Task]:\n        \"\"\"\n        Lista tarefas por m\u00faltiplas task_keys com dedup e chunking.\n        \n        PATCH 2: Dedup no IN (remove duplicatas preservando ordem)\n        \n        Args:\n            task_keys: Lista de chaves de tarefas\n  ...",
        "suggested_refactor": "Extract database operations to list_by_task_keys_data_layer() + Extract UI rendering to list_by_task_keys_ui_layer() + Extract logging to list_by_task_keys_audit_layer()"
      },
      {
        "function_name": "list_tdd_tasks_by_group",
        "file_path": "streamlit_extension/repos/tasks_repo.py",
        "line_number": 225,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def list_tdd_tasks_by_group(self, epic_id: int) -> Dict[str, List[Task]]:\n        \"\"\"\n        Lista tarefas TDD agrupadas por task_group com ordena\u00e7\u00e3o natural.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict {task_group: [tasks]} ordenadas p...",
        "suggested_refactor": "Extract database operations to list_tdd_tasks_by_group_data_layer() + Extract UI rendering to list_tdd_tasks_by_group_ui_layer() + Extract logging to list_tdd_tasks_by_group_audit_layer()"
      },
      {
        "function_name": "log_database_transaction",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 659,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def log_database_transaction(operation: str, tables: List[str]):\n    \"\"\"Context manager for database transaction logging.\"\"\"\n    logger = get_logger()\n    start_time = time.perf_counter()\n    \n    logger.info(\n        component=\"database\",\n        operation=\"transaction_start\",\n        message=f\"Dat...",
        "suggested_refactor": "Extract database operations to log_database_transaction_data_layer() + Extract UI rendering to log_database_transaction_ui_layer() + Extract logging to log_database_transaction_audit_layer()"
      },
      {
        "function_name": "log_user_session",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 629,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def log_user_session(user_id: str, session_id: str, ip_address: str = None):\n    \"\"\"Context manager for user session logging.\"\"\"\n    logger = get_logger()\n    correlation_id = str(uuid.uuid4())\n    \n    with logger.log_context(\n        correlation_id=correlation_id,\n        user_id=user_id,\n        ...",
        "suggested_refactor": "Extract UI rendering to log_user_session_ui_layer() + Extract logging to log_user_session_audit_layer()"
      },
      {
        "function_name": "login_form",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 343,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def login_form() -> Optional[Session]:\n    \"\"\"Render login form and handle authentication.\"\"\"\n    st.subheader(\"\ud83d\udd10 Login\")\n    \n    with st.form(\"login_form\"):\n        username = st.text_input(\"Username\")\n        password = st.text_input(\"Password\", type=\"password\")\n        submitted = st.form_submit...",
        "suggested_refactor": "Extract UI rendering to login_form_ui_layer() + Extract logging to login_form_audit_layer()"
      },
      {
        "function_name": "main",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 557,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def main():\n    # Headless \u2192 smoke test e sair\n    if not is_ui():\n        print(\"\u26a0\ufe0f Streamlit n\u00e3o dispon\u00edvel \u2014 headless smoke test:\")\n        if DB_AVAILABLE:\n            try:\n                print(\" - list_epics():\", len(list_epics()))\n                print(\" - health:\", check_health())\n          ...",
        "suggested_refactor": "Extract UI rendering to main_ui_layer() + Extract logging to main_audit_layer()"
      },
      {
        "function_name": "main",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 153,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def main() -> None:\n    \"\"\"\n    Main orchestrator function - delegates all functionality to specialized modules.\n    \n    This function serves as the single entry point and coordinates between:\n    - Session management\n    - Authentication\n    - UI rendering \n    - Page management\n    - Debug tools\n...",
        "suggested_refactor": "Extract UI rendering to main_ui_layer() + Extract logging to main_audit_layer()"
      },
      {
        "function_name": "profile_operation",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 73,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def profile_operation(self, operation_name: str):\n        \"\"\"Context manager for profiling individual operations.\"\"\"\n        # Start memory tracking\n        if not self.memory_tracker_active:\n            tracemalloc.start()\n            self.memory_tracker_active = True\n            \n        start...",
        "suggested_refactor": "Extract UI rendering to profile_operation_ui_layer() + Extract logging to profile_operation_audit_layer()"
      },
      {
        "function_name": "project_exists",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 342,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def project_exists(self, project_id: int) -> bool:\n        \"\"\"Check if project exists and is active.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_projects WHERE id = ? AND status != 'cancelled'\"\n            result = self.db_manager.execute_query(query, (project_id,))\n           ...",
        "suggested_refactor": "Extract database operations to project_exists_data_layer() + Extract UI rendering to project_exists_ui_layer() + Extract logging to project_exists_audit_layer()"
      },
      {
        "function_name": "refresh_credentials",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 233,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def refresh_credentials(self) -> bool:\n        \"\"\"Refresh expired credentials using refresh token.\"\"\"\n        session = st.session_state.get('user_session')\n        if not session or 'credentials' not in session:\n            return False\n        \n        try:\n            cred_data = session['cre...",
        "suggested_refactor": "Extract UI rendering to refresh_credentials_ui_layer() + Extract logging to refresh_credentials_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 285,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def render(items: List[Dict[str, Any]] = None, **kwargs) -> Optional[str]:\n        \"\"\"\n        Render navigation menu fallback.\n        \n        Args:\n            items: Menu item definitions\n            **kwargs: Additional options\n            \n        Returns:\n            Selected menu item or...",
        "suggested_refactor": "Extract database operations to render_data_layer() + Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render_analytics_cards",
        "file_path": "streamlit_extension/components/analytics_cards.py",
        "line_number": 157,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_analytics_cards(stats: Optional[Dict[str, Any]] = None) -> None:\n    \"\"\"\n    Main analytics cards renderer - UI only with prepared data.\n    \n    Args:\n        stats: Dictionary containing analytics data (KPIs, metrics, series)\n               Expected keys: completed_tasks, weekly_complet...",
        "suggested_refactor": "Extract UI rendering to render_analytics_cards_ui_layer() + Extract logging to render_analytics_cards_audit_layer()"
      },
      {
        "function_name": "render_clients_page",
        "file_path": "streamlit_extension/pages/clients.py",
        "line_number": 506,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_clients_page():\n    \"\"\"Render the main clients management page.\"\"\"\n    # Initialize page and validate dependencies\n    init_result = _initialize_clients_page()\n    if \"error\" in init_result:\n        return init_result\n    \n    # Setup database connection\n    db_manager = _setup_database_c...",
        "suggested_refactor": "Extract database operations to render_clients_page_data_layer() + Extract UI rendering to render_clients_page_ui_layer() + Extract logging to render_clients_page_audit_layer()"
      },
      {
        "function_name": "render_current_page",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 99,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_current_page(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the current page based on session state navigation.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        current_page = get_current_pa...",
        "suggested_refactor": "Extract UI rendering to render_current_page_ui_layer() + Extract logging to render_current_page_audit_layer()"
      },
      {
        "function_name": "render_dashboard_content",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 168,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_dashboard_content(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the default dashboard content.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        # Analytics row\n        with streamlit_error_...",
        "suggested_refactor": "Extract UI rendering to render_dashboard_content_ui_layer() + Extract logging to render_dashboard_content_audit_layer()"
      },
      {
        "function_name": "render_debug_panel",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 469,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_debug_panel():\n    with st.expander(\"\ud83d\udee0\ufe0f Debug / Telemetria\", expanded=False):\n        st.json(\n            {\n                \"health\": st.session_state.get(\"health\"),\n                \"error_stats\": safe_streamlit_operation(get_error_statistics, default_return={}),  # type: ignore\n        ...",
        "suggested_refactor": "Extract UI rendering to render_debug_panel_ui_layer() + Extract logging to render_debug_panel_audit_layer()"
      },
      {
        "function_name": "render_debug_panel",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 77,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_debug_panel() -> None:\n    \"\"\"\n    Render comprehensive debug panel with telemetry and system information.\n    This is an expanded version of the original render_debug_panel from streamlit_app.py\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        with st.expander(\"\ud83d\udee0\ufe0f...",
        "suggested_refactor": "Extract UI rendering to render_debug_panel_ui_layer() + Extract logging to render_debug_panel_audit_layer()"
      },
      {
        "function_name": "render_development_tools",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 308,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_development_tools() -> None:\n    \"\"\"Render development tools and utilities.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \ud83d\udd28 Development Tools\")\n        \n        col1, col2 = st.columns(2)\n        \n        with col1:\n            if st.button(\"\ud83d\udd04 R...",
        "suggested_refactor": "Extract UI rendering to render_development_tools_ui_layer() + Extract logging to render_development_tools_audit_layer()"
      },
      {
        "function_name": "render_entity_filters",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 457,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_entity_filters(entity_name: str = \"items\",\n                         search_placeholder: str = \"Search...\",\n                         status_options: Optional[list[str]] = None,\n                         secondary_filter_name: str = \"Category\",\n                         secondary_options: Opt...",
        "suggested_refactor": "Extract database operations to render_entity_filters_data_layer() + Extract UI rendering to render_entity_filters_ui_layer()"
      },
      {
        "function_name": "render_health_section",
        "file_path": "streamlit_extension/components/health_widgets.py",
        "line_number": 149,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_health_section(show_detailed: bool = False) -> None:\n    \"\"\"\n    Main health section renderer - UI only with graceful fallbacks.\n\n    Args:\n        show_detailed: Whether to show detailed metrics expansion\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        health = s...",
        "suggested_refactor": "Extract UI rendering to render_health_section_ui_layer() + Extract logging to render_health_section_audit_layer()"
      },
      {
        "function_name": "render_heatmap_and_tasks",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 129,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_heatmap_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]) -> None:\n    \"\"\"\n    Render productivity heatmap and task selection interface.\n    \n    Args:\n        epics: List of available epics\n        selected_epic_id: Currently selected epic ID\n    \"\"\"\n    if not STRE...",
        "suggested_refactor": "Extract database operations to render_heatmap_and_tasks_data_layer() + Extract UI rendering to render_heatmap_and_tasks_ui_layer() + Extract logging to render_heatmap_and_tasks_audit_layer()"
      },
      {
        "function_name": "render_log_viewer",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 343,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_log_viewer() -> None:\n    \"\"\"Render log viewer for recent application logs.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \ud83d\udcdd Log Viewer\")\n        \n        # This is a placeholder for log viewing functionality\n        # In a full implementation, y...",
        "suggested_refactor": "Extract UI rendering to render_log_viewer_ui_layer() + Extract logging to render_log_viewer_audit_layer()"
      },
      {
        "function_name": "render_login_form",
        "file_path": "streamlit_extension/auth/login_page.py",
        "line_number": 24,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_login_form(auth_manager: AuthManager):\n    \"\"\"Render login form.\"\"\"\n    st.subheader(\"Login\")\n    \n    with st.form(\"login_form\"):\n        username = st.text_input(\"Username\", key=\"login_username\")\n        password = st.text_input(\"Password\", type=\"password\", key=\"login_password\")\n       ...",
        "suggested_refactor": "Extract UI rendering to render_login_form_ui_layer() + Extract logging to render_login_form_audit_layer()"
      },
      {
        "function_name": "render_performance_metrics",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 275,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_performance_metrics() -> None:\n    \"\"\"Render performance monitoring metrics.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \u26a1 Performance Metrics\")\n        \n        # Cache statistics\n        if hasattr(st, \"cache_data\"):\n            with st.expa...",
        "suggested_refactor": "Extract UI rendering to render_performance_metrics_ui_layer() + Extract logging to render_performance_metrics_audit_layer()"
      },
      {
        "function_name": "render_project_fields",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 279,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def render_project_fields(self, client_options: list, project_data: Optional[Dict] = None):\n        \"\"\"Render complete project form with all fields.\"\"\"\n        if not self.st:\n            return True\n        \n        with self.st.form(self.form_id):\n            self.st.markdown(f\"### {self.title...",
        "suggested_refactor": "Extract database operations to render_project_fields_data_layer() + Extract UI rendering to render_project_fields_ui_layer() + Extract logging to render_project_fields_audit_layer()"
      },
      {
        "function_name": "render_registration_form",
        "file_path": "streamlit_extension/auth/login_page.py",
        "line_number": 47,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_registration_form(auth_manager: AuthManager):\n    \"\"\"Render registration form.\"\"\"\n    st.subheader(\"Register New Account\")\n    \n    with st.form(\"register_form\"):\n        username = st.text_input(\"Username\", key=\"reg_username\")\n        email = st.text_input(\"Email\", key=\"reg_email\")\n     ...",
        "suggested_refactor": "Extract UI rendering to render_registration_form_ui_layer() + Extract logging to render_registration_form_audit_layer()"
      },
      {
        "function_name": "render_select_box",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 79,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def render_select_box(self, label: str, key: str, options: list, \n                         required: bool = False, help_text: str = \"\") -> Any:\n        \"\"\"Render selectbox with enhanced options.\"\"\"\n        if not self.st:\n            self.form_data[key] = options[0] if options else None\n        ...",
        "suggested_refactor": "Extract database operations to render_select_box_data_layer() + Extract UI rendering to render_select_box_ui_layer()"
      },
      {
        "function_name": "render_selection_widget",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 518,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def render_selection_widget(label: str, \n                           options: list[Any],\n                           current_value: Optional[Any] = None,\n                           key_suffix: str = \"selection\") -> Any:\n    \"\"\"\n    Render simple selection widget (selectbox) with proper key management....",
        "suggested_refactor": "Extract database operations to render_selection_widget_data_layer() + Extract UI rendering to render_selection_widget_ui_layer() + Extract logging to render_selection_widget_audit_layer()"
      },
      {
        "function_name": "require_authentication",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 273,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def require_authentication(func):\n    \"\"\"Decorator to require authentication for Streamlit pages.\"\"\"\n    def wrapper(*args, **kwargs):\n        if not DEPENDENCIES_AVAILABLE:\n            if st is not None:\n                st.error(\"\u274c Authentication system not available - dependencies missing\")\n      ...",
        "suggested_refactor": "Extract UI rendering to require_authentication_ui_layer() + Extract logging to require_authentication_audit_layer()"
      },
      {
        "function_name": "require_csrf_protection",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 750,
        "responsibilities": [
          "auth",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def require_csrf_protection(self, form_id: str, provided_token: Optional[str]) -> Tuple[bool, str]:\n        \"\"\"\n        Check CSRF protection for a form submission.\n        \n        Args:\n            form_id: Unique identifier for the form\n            provided_token: Token provided with form sub...",
        "suggested_refactor": "Extract UI rendering to require_csrf_protection_ui_layer() + Extract validation to require_csrf_protection_validator()"
      },
      {
        "function_name": "reset_services",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 504,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def reset_services(force: bool = False) -> None:\n    \"\"\"\n    Restart all services (useful for development).\n    In Streamlit, invalidates resource cache by switching key.\n    \"\"\"\n    if not force:\n        _logger.warning(\"reset_services requested; use force=True to confirm.\")\n        return\n\n    _lo...",
        "suggested_refactor": "Extract UI rendering to reset_services_ui_layer() + Extract logging to reset_services_audit_layer()"
      },
      {
        "function_name": "restore_backup",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 203,
        "responsibilities": [
          "logging",
          "file_io",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def restore_backup(self, backup_name: str, components: List[str] = None) -> bool:\n        \"\"\"Restore configuration from backup.\"\"\"\n        if backup_name not in self._backup_index:\n            return False\n        \n        backup_info = self._backup_index[backup_name]\n        backup_file = backu...",
        "suggested_refactor": "Extract UI rendering to restore_backup_ui_layer() + Extract logging to restore_backup_audit_layer()"
      },
      {
        "function_name": "run_all_checks",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 350,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def run_all_checks(self, force_refresh: bool = False) -> Dict[str, Any]:\n        \"\"\"Run all health checks\"\"\"\n        current_time = time.time()\n        \n        # Use cached results if recent and not forced\n        if (not force_refresh and \n            self._last_check_time and \n            sel...",
        "suggested_refactor": "Extract UI rendering to run_all_checks_ui_layer() + Extract logging to run_all_checks_audit_layer() + Extract validation to run_all_checks_validator()"
      },
      {
        "function_name": "run_load_test",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 244,
        "responsibilities": [
          "network",
          "logging",
          "file_io"
        ],
        "severity": "HIGH",
        "code_snippet": "    def run_load_test(self, config: LoadTestConfig, target_function: Callable) -> Dict[str, Any]:\n        \"\"\"Execute load test with specified configuration.\"\"\"\n        self.stop_event.clear()\n        \n        # Prepare test data\n        test_data = self._generate_test_data(config.test_data_size)\n   ...",
        "suggested_refactor": "Extract logging to run_load_test_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_operation",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 196,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def safe_streamlit_operation(func: Callable[..., Any], *args,\n                                 default_return=None, operation_name=None, label=None, **kwargs):\n        \"\"\"Execu\u00e7\u00e3o protegida, ciente de headless/produ\u00e7\u00e3o.\"\"\"\n        try:\n            return func(*args, **kwargs)\n        except Exce...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_operation",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 577,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def safe_streamlit_operation(func: Callable, \n                           *args, \n                           default_return: Any = None,\n                           operation_name: Optional[str] = None,\n                           **kwargs) -> Any:\n    \"\"\"\n    Safely execute a Streamlit operation with ...",
        "suggested_refactor": "Extract database operations to safe_streamlit_operation_data_layer() + Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
      },
      {
        "function_name": "safe_ui",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 45,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def safe_ui(fn: Callable[..., Any], *args, **kwargs) -> Any:\n    \"\"\"\n    Execute a UI operation safely, with error handling.\n    \n    Args:\n        fn: Function to execute\n        *args: Function arguments\n        **kwargs: Function keyword arguments\n        \n    Returns:\n        Function result or ...",
        "suggested_refactor": "Extract database operations to safe_ui_data_layer() + Extract UI rendering to safe_ui_ui_layer() + Extract logging to safe_ui_audit_layer()"
      },
      {
        "function_name": "sanitize_form_input",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 203,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def sanitize_form_input(self, value: str, field_name: str = \"input\") -> str:\n        \"\"\"\n        Sanitize user input from Streamlit forms.\n        \n        Args:\n            value: Raw input value from form\n            field_name: Name of the field for error reporting\n            \n        Return...",
        "suggested_refactor": "Extract UI rendering to sanitize_form_input_ui_layer() + Extract logging to sanitize_form_input_audit_layer() + Extract validation to sanitize_form_input_validator()"
      },
      {
        "function_name": "select",
        "file_path": "streamlit_extension/utils/query_builder.py",
        "line_number": 56,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def select(self, *columns: str) -> \"QueryBuilder\":\n        \"\"\"Add SELECT columns.\"\"\"\n        self.query_type = \"SELECT\"\n        if columns:\n            self.columns.extend(self._safe_ident(c) for c in columns)\n        else:\n            self.columns.clear()\n        return self\n",
        "suggested_refactor": "Extract database operations to select_data_layer() + Extract UI rendering to select_ui_layer()"
      },
      {
        "function_name": "service_transaction",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 393,
        "responsibilities": [
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def service_transaction():\n    container = get_service_container()\n    with container.transaction_scope():\n        yield container\n\n",
        "suggested_refactor": "Extract database operations to service_transaction_data_layer() + Extract UI rendering to service_transaction_ui_layer()"
      },
      {
        "function_name": "set",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 206,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def set(self, key: str, value: str, ttl: Optional[int] = None) -> bool:\n        if not self.is_available:\n            return False\n        try:\n            self._client.set(self._hkey(key), value, ex=ttl or self.ttl)\n            return True\n        except Exception as e:\n            self.logger....",
        "suggested_refactor": "Extract UI rendering to set_ui_layer() + Extract logging to set_audit_layer() + Extract validation to set_validator()"
      },
      {
        "function_name": "setup_application",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 90,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def setup_application() -> None:\n    \"\"\"Setup application environment and dependencies.\"\"\"\n    initialize_session_state()\n    logger.info(\"Session state initialized successfully\")\n",
        "suggested_refactor": "Extract UI rendering to setup_application_ui_layer() + Extract logging to setup_application_audit_layer()"
      },
      {
        "function_name": "setup_application",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 446,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def setup_application() -> None:\n    \"\"\"\n    Single setup entry point for Streamlit application.\n    - Initialize session/services\n    - Display health status\n    \"\"\"\n    if not _is_streamlit():\n        _logger.warning(\"Streamlit unavailable - UI setup ignored.\")\n        return\n\n    try:\n        ini...",
        "suggested_refactor": "Extract UI rendering to setup_application_ui_layer() + Extract logging to setup_application_audit_layer()"
      },
      {
        "function_name": "show_user_error",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 160,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def show_user_error(self, category: str, error_id: str, context: Dict[str, Any] = None):\n        \"\"\"Show user-friendly error message\"\"\"\n        \n        if not STREAMLIT_AVAILABLE or not st:\n            return\n            \n        message_config = UserFriendlyMessages.MESSAGES.get(\n            c...",
        "suggested_refactor": "Extract UI rendering to show_user_error_ui_layer() + Extract logging to show_user_error_audit_layer()"
      },
      {
        "function_name": "show_user_info",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 105,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def show_user_info():\n    \"\"\"Display current user information in sidebar.\"\"\"\n    user = get_current_user()\n    if user:\n        with st.sidebar:\n            st.markdown(\"---\")\n            st.markdown(\"### \ud83d\udc64 User Info\")\n            st.markdown(f\"**Username:** {user.username}\")\n            st.markdown...",
        "suggested_refactor": "Extract UI rendering to show_user_info_ui_layer() + Extract logging to show_user_info_audit_layer()"
      },
      {
        "function_name": "start_metrics_server",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 556,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def start_metrics_server(self, port: int = 8000):\n        \"\"\"Start Prometheus metrics HTTP server.\"\"\"\n        if PROMETHEUS_AVAILABLE:\n            start_http_server(port)\n            self.info(\n                component=\"monitoring\",\n                operation=\"start_metrics_server\",\n            ...",
        "suggested_refactor": "Extract UI rendering to start_metrics_server_ui_layer() + Extract logging to start_metrics_server_audit_layer()"
      },
      {
        "function_name": "summary",
        "file_path": "streamlit_extension/utils/metrics_collector.py",
        "line_number": 79,
        "responsibilities": [
          "logging",
          "network",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def summary(self) -> Dict[str, Dict[str, float]]:\n        \"\"\"Return a summary of all collected metrics.\"\"\"\n\n        rt_stats: Dict[str, float] = {}\n        if self.response_times:\n            rts = self.response_times\n            rt_stats = {\n                \"min\": min(rts),\n                \"max...",
        "suggested_refactor": "Extract UI rendering to summary_ui_layer() + Extract logging to summary_audit_layer()"
      },
      {
        "function_name": "task_exists",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 319,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def task_exists(self, task_id: int) -> bool:\n        \"\"\"Check if task exists.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_tasks WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (task_id,))\n            return len(result) > 0\n        except Exception as e:\n...",
        "suggested_refactor": "Extract database operations to task_exists_data_layer() + Extract UI rendering to task_exists_ui_layer() + Extract logging to task_exists_audit_layer()"
      },
      {
        "function_name": "test_query_performance",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 205,
        "responsibilities": [
          "network",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def test_query_performance(self) -> Dict[str, Any]:\n        \"\"\"Test complex query performance.\"\"\"\n        test_queries = {\n            \"simple_select\": \"SELECT * FROM framework_clients LIMIT 100\",\n            \"complex_join\": \"\"\"\n                SELECT c.name, COUNT(p.id) as project_count \n      ...",
        "suggested_refactor": "Extract database operations to test_query_performance_data_layer() + Extract UI rendering to test_query_performance_ui_layer()"
      },
      {
        "function_name": "update",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 147,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update(self, client_id: int, client_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing client.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_clients SET\n                    name = ?, email = ?, phone = ?, company = ?,\n                    address = ?, contact...",
        "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
      },
      {
        "function_name": "update",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 186,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update(self, project_id: int, project_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing project.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_projects SET\n                    name = ?, description = ?, client_id = ?, status = ?,\n                    start_d...",
        "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
      },
      {
        "function_name": "update_client",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 297,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_client(self, client_id: int, **kwargs) -> bool:\n        \"\"\"Update client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.update_client(client_id, **kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"client\", c...",
        "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer()"
      },
      {
        "function_name": "update_client",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3332,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_client(self, client_id: int, **fields: Any) -> bool:\n        \"\"\"Update existing client record.\n\n        Updates specified fields while preserving others. Validates all input\n        and maintains data integrity. Supports partial updates.\n\n        Args:\n            client_id: Client ID...",
        "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer()"
      },
      {
        "function_name": "update_duration_description",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2247,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_duration_description(self, epic_id: int, description: str) -> bool:\n        \"\"\"Update the duration description for an epic.\n        \n        Args:\n            epic_id: ID of the epic to update\n            description: New duration description (e.g., \"1.5 dias\", \"1 semana\")\n           ...",
        "suggested_refactor": "Extract database operations to update_duration_description_data_layer() + Extract UI rendering to update_duration_description_ui_layer() + Extract logging to update_duration_description_audit_layer()"
      },
      {
        "function_name": "update_epic_project",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3233,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_epic_project(self, epic_id: int, project_id: int) -> bool:\n        \"\"\"Update the project assignment for an epic.\n        \n        Args:\n            epic_id: ID of the epic to update\n            project_id: ID of the new project\n            \n        Returns:\n            True if success...",
        "suggested_refactor": "Extract database operations to update_epic_project_data_layer() + Extract UI rendering to update_epic_project_ui_layer() + Extract logging to update_epic_project_audit_layer()"
      },
      {
        "function_name": "update_project",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 402,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_project(self, project_id: int, **kwargs) -> bool:\n        \"\"\"Update project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.update_project(project_id, **kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"proje...",
        "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer()"
      },
      {
        "function_name": "update_project",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3481,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def update_project(self, project_id: int, **fields: Any) -> bool:\n        \"\"\"Update an existing project.\n        \n        Args:\n            project_id: ID of the project to update\n            **fields: Fields to update\n            \n        Returns:\n            True if successful, False otherwise...",
        "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer()"
      },
      {
        "function_name": "user_action",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 534,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def user_action(self, user_id: str, action: str, resource: str, \n                   success: bool = True, **kwargs):\n        \"\"\"Log user action.\"\"\"\n        level = LogLevel.INFO if success else LogLevel.WARNING\n        \n        extra_data = {\n            \"user_id\": user_id,\n            \"action\":...",
        "suggested_refactor": "Extract UI rendering to user_action_ui_layer() + Extract logging to user_action_audit_layer()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 309,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate project-specific business rules.\"\"\"\n        errors = []\n        \n        # Name length validation\n        if 'name' in data and data['name']:\n            if len(data['name']) > ValidationRules.MAX_...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
      },
      {
        "function_name": "validate_business_rules_client",
        "file_path": "streamlit_extension/utils/form_validation.py",
        "line_number": 68,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_business_rules_client(data: Dict[str, Any]) -> List[str]:\n    \"\"\"Validate business rules specific to client entities.\"\"\"\n    errors: List[str] = []\n    errors.extend(validate_text_length(data.get(\"client_key\", \"\"), 2, 50, \"client_key\"))\n    errors.extend(validate_text_length(data.get(\"n...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_client_ui_layer() + Extract logging to validate_business_rules_client_audit_layer() + Extract validation to validate_business_rules_client_validator()"
      },
      {
        "function_name": "validate_business_rules_project",
        "file_path": "streamlit_extension/utils/form_validation.py",
        "line_number": 76,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_business_rules_project(data: Dict[str, Any]) -> List[str]:\n    \"\"\"Validate business rules specific to project entities.\"\"\"\n    errors: List[str] = []\n    errors.extend(validate_text_length(data.get(\"project_key\", \"\"), 2, 50, \"project_key\"))\n    errors.extend(validate_text_length(data.ge...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_project_ui_layer() + Extract logging to validate_business_rules_project_audit_layer() + Extract validation to validate_business_rules_project_validator()"
      },
      {
        "function_name": "validate_client_data",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 504,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_client_data(self, client_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate client data without creating/updating.\n        \n        Args:\n            client_data: Client data to validate\n            \n        Returns:\n            ServiceResult indicating if da...",
        "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
      },
      {
        "function_name": "validate_client_data",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 241,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_client_data(self, data: Dict) -> list[str]:\n        \"\"\"Validate client-specific data using centralized validation.\"\"\"\n        from streamlit_extension.utils.form_validation import (\n            validate_required_fields,\n            validate_email_format,\n            validate_phone_f...",
        "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
      },
      {
        "function_name": "validate_client_data",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 445,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_client_data(client: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    \ud83c\udfe2 Validate client data structure and business rules.\n    \n    Args:\n        client: Client dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # R...",
        "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
      },
      {
        "function_name": "validate_config",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 99,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_config(self):\n        \"\"\"Validate configuration values.\"\"\"\n        # Validate port range\n        if not (1024 <= self.streamlit_port <= 65535):\n            print(f\"\u26a0\ufe0f Warning: streamlit_port {self.streamlit_port} outside recommended range (1024-65535)\")\n        \n        # Validate s...",
        "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer()"
      },
      {
        "function_name": "validate_config",
        "file_path": "streamlit_extension/config/environment.py",
        "line_number": 88,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_config(self, config: Dict[str, Any]) -> bool:\n        \"\"\"Validate configuration structure.\"\"\"\n        try:\n            return self.loader.validate_schema(config)\n        except ValidationError as exc:\n            raise ValueError(str(exc)) from exc\n",
        "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer() + Extract validation to validate_config_validator()"
      },
      {
        "function_name": "validate_date_consistency",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2391,
        "responsibilities": [
          "logging",
          "database",
          "validation"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_date_consistency(self, epic_id: int) -> bool:\n        \"\"\"Validate date consistency for an epic.\n        \n        Args:\n            epic_id: ID of the epic to validate\n            \n        Returns:\n            True if dates are consistent, False otherwise\n        \"\"\"\n        if not D...",
        "suggested_refactor": "Extract database operations to validate_date_consistency_data_layer() + Extract logging to validate_date_consistency_audit_layer() + Extract validation to validate_date_consistency_validator()"
      },
      {
        "function_name": "validate_epic_data",
        "file_path": "streamlit_extension/services/epic_service.py",
        "line_number": 869,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_epic_data(self, epic_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate epic data without creating/updating.\n        \n        Args:\n            epic_data: Epic data to validate\n            \n        Returns:\n            ServiceResult indicating if data is vali...",
        "suggested_refactor": "Extract UI rendering to validate_epic_data_ui_layer() + Extract logging to validate_epic_data_audit_layer() + Extract validation to validate_epic_data_validator()"
      },
      {
        "function_name": "validate_epic_data",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 283,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_epic_data(epic: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate epic data structure.\n    \n    Args:\n        epic: Epic dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Required fields\n    required_fields = [\"name...",
        "suggested_refactor": "Extract UI rendering to validate_epic_data_ui_layer() + Extract logging to validate_epic_data_audit_layer() + Extract validation to validate_epic_data_validator()"
      },
      {
        "function_name": "validate_form_data",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 237,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_form_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:\n        \"\"\"\n        Validate form data for security threats.\n        \n        Args:\n            data: Dictionary of form data\n            \n        Returns:\n            Tuple of (is_valid, list_of_error_messages)\n      ...",
        "suggested_refactor": "Extract UI rendering to validate_form_data_ui_layer() + Extract logging to validate_form_data_audit_layer() + Extract validation to validate_form_data_validator()"
      },
      {
        "function_name": "validate_json_structure",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 356,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_json_structure(data: Dict[str, Any], schema: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate JSON data against a simple schema.\n    \n    Args:\n        data: Data to validate\n        schema: Schema definition\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n ...",
        "suggested_refactor": "Extract UI rendering to validate_json_structure_ui_layer() + Extract logging to validate_json_structure_audit_layer() + Extract validation to validate_json_structure_validator()"
      },
      {
        "function_name": "validate_project_data",
        "file_path": "streamlit_extension/services/project_service.py",
        "line_number": 688,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_project_data(self, project_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate project data without creating/updating.\n        \n        Args:\n            project_data: Project data to validate\n            \n        Returns:\n            ServiceResult indicating ...",
        "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
      },
      {
        "function_name": "validate_project_data",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 329,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_project_data(self, data: Dict) -> list[str]:\n        \"\"\"Validate project-specific data using centralized validation.\"\"\"\n        from streamlit_extension.utils.form_validation import (\n            validate_required_fields,\n            validate_business_rules_project,\n            sani...",
        "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
      },
      {
        "function_name": "validate_task_data",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1017,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def validate_task_data(self, task_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate task data without creating/updating.\n        \n        Args:\n            task_data: Task data to validate\n            \n        Returns:\n            ServiceResult indicating if data is vali...",
        "suggested_refactor": "Extract UI rendering to validate_task_data_ui_layer() + Extract logging to validate_task_data_audit_layer() + Extract validation to validate_task_data_validator()"
      },
      {
        "function_name": "validate_task_data",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 223,
        "responsibilities": [
          "logging",
          "validation",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "def validate_task_data(task: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate task data structure.\n    \n    Args:\n        task: Task dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Required fields\n    required_fields = [\"titl...",
        "suggested_refactor": "Extract UI rendering to validate_task_data_ui_layer() + Extract logging to validate_task_data_audit_layer() + Extract validation to validate_task_data_validator()"
      },
      {
        "function_name": "with_client_info",
        "file_path": "streamlit_extension/utils/query_builder.py",
        "line_number": 265,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def with_client_info(self) -> \"ProjectQueryBuilder\":\n        \"\"\"Include client information.\"\"\"\n        return (\n            self.left_join(\n                \"framework_clients c\",\n                \"framework_projects.client_id = c.id\",\n            )\n            .select(\n                \"framework_...",
        "suggested_refactor": "Extract database operations to with_client_info_data_layer() + Extract UI rendering to with_client_info_ui_layer() + Extract logging to with_client_info_audit_layer()"
      },
      {
        "function_name": "with_epic_info",
        "file_path": "streamlit_extension/utils/query_builder.py",
        "line_number": 341,
        "responsibilities": [
          "logging",
          "database",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def with_epic_info(self) -> \"TaskQueryBuilder\":\n        \"\"\"Include epic information.\"\"\"\n        return (\n            self.left_join(\n                \"framework_epics e\", \"framework_tasks.epic_id = e.id\"\n            )\n            .select(\n                \"framework_tasks.*\",\n                \"e.na...",
        "suggested_refactor": "Extract database operations to with_epic_info_data_layer() + Extract UI rendering to with_epic_info_ui_layer() + Extract logging to with_epic_info_audit_layer()"
      },
      {
        "function_name": "wrapper",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 275,
        "responsibilities": [
          "auth",
          "logging",
          "ui"
        ],
        "severity": "HIGH",
        "code_snippet": "    def wrapper(*args, **kwargs):\n        if not DEPENDENCIES_AVAILABLE:\n            if st is not None:\n                st.error(\"\u274c Authentication system not available - dependencies missing\")\n                st.stop()\n            else:\n                print(\"\u274c Authentication system not available - ...",
        "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
      }
    ],
    "MEDIUM": [
      {
        "function_name": "__getattr__",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 126,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __getattr__(self, name: str):\n        self._logger.warning(\"ModularDatabaseAdapter: m\u00e9todo '%s' n\u00e3o implementado\", name)\n        raise AttributeError(f\"ModularDatabaseAdapter has no method '{name}'\")\n\n",
        "suggested_refactor": "Extract UI rendering to __getattr___ui_layer() + Extract logging to __getattr___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 147,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __init__(self, secret_key: str, session_timeout_hours: int = 24):\n        self.secret_key = secret_key\n        self.session_timeout_hours = session_timeout_hours\n        self.csrf_protection = CSRFProtection(secret_key)\n        self.password_manager = PasswordManager()\n        \n        # Ini...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/load_tester.py",
        "line_number": 26,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __init__(self, users: int, duration: float, actions: Iterable[Callable[[], None]], on_error: Optional[Callable[[BaseException], None]] = None):\n        self.users = users\n        self.duration = duration\n        self.actions: List[Callable[[], None]] = list(actions)\n        self.metrics = Me...",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 430,
        "responsibilities": [
          "network",
          "file_io"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __init__(self, output_dir: str = \"performance_reports\"):\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(exist_ok=True)\n        ",
        "suggested_refactor": ""
      },
      {
        "function_name": "__init__",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 159,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __init__(self):\n        \"\"\"Initialize the global exception handler.\"\"\"\n        # Initialize secure logging\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('streamlit_exceptions')\n        else:\n            import logging\n            self.logger = logging....",
        "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
      },
      {
        "function_name": "__post_init__",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 58,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def __post_init__(self):\n        if self.errors is None:\n            self.errors = []\n    ",
        "suggested_refactor": "Extract UI rendering to __post_init___ui_layer() + Extract logging to __post_init___audit_layer()"
      },
      {
        "function_name": "_analyze_dependency_optimization",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1472,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _analyze_dependency_optimization(self, plan: ExecutionPlan) -> Dict[str, Any]:\n        \"\"\"Analisa otimiza\u00e7\u00e3o de depend\u00eancias.\"\"\"\n        try:\n            metrics = plan.execution_metrics\n            return {\n                \"dependency_ratio\": metrics.get(\"avg_dependencies_per_task\", 0),\n   ...",
        "suggested_refactor": "Extract UI rendering to _analyze_dependency_optimization_ui_layer() + Extract logging to _analyze_dependency_optimization_audit_layer()"
      },
      {
        "function_name": "_analyze_focus_patterns",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 537,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _analyze_focus_patterns(self, sessions: List[Dict]) -> Optional[Dict[str, Any]]:\n        \"\"\"Analyze focus patterns for insights.\"\"\"\n        focus_ratings = [s.get(\"focus_rating\") for s in sessions if s.get(\"focus_rating\")]\n        \n        if len(focus_ratings) < 5:\n            return None\n ...",
        "suggested_refactor": "Extract UI rendering to _analyze_focus_patterns_ui_layer()"
      },
      {
        "function_name": "_attempt_recovery",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 422,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _attempt_recovery(self, error: StreamlitError):\n        \"\"\"Attempt automatic error recovery.\"\"\"\n        recovery_func = self.recovery_strategies.get(error.category)\n        if recovery_func:\n            try:\n                recovery_func(error)\n            except Exception as e:\n            ...",
        "suggested_refactor": "Extract UI rendering to _attempt_recovery_ui_layer() + Extract logging to _attempt_recovery_audit_layer()"
      },
      {
        "function_name": "_calculate_client_performance",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 615,
        "responsibilities": [
          "business_logic",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_client_performance(self, projects: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Calculate client performance metrics.\"\"\"\n        if not projects:\n            return {'overall_score': 0, 'on_time_rate': 0, 'budget_efficiency': 0}\n        \n        completed_projects = [p for ...",
        "suggested_refactor": "Extract UI rendering to _calculate_client_performance_ui_layer() + Extract business logic to _calculate_client_performance_processor()"
      },
      {
        "function_name": "_calculate_completion_rates",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 539,
        "responsibilities": [
          "business_logic",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_completion_rates(self, metrics: Dict[str, Any]) -> Dict[str, float]:\n        \"\"\"Calculate completion rates for different entity types.\"\"\"\n        return {\n            'projects': self._safe_percentage(metrics.get('completed_projects', 0), metrics.get('total_projects', 0)),\n       ...",
        "suggested_refactor": "Extract UI rendering to _calculate_completion_rates_ui_layer() + Extract business logic to _calculate_completion_rates_processor()"
      },
      {
        "function_name": "_calculate_critical_path",
        "file_path": "streamlit_extension/services/task_execution_planner.py",
        "line_number": 388,
        "responsibilities": [
          "business_logic",
          "logging"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_critical_path(self, context: PlanningContext) -> List[str]:\n        \"\"\"Calcula caminho cr\u00edtico usando GraphAlgorithms\"\"\"\n        try:\n            # Usar grafo invertido\n            inverted_graph = defaultdict(set)\n            for dependent, prerequisites in context.adjacency_grap...",
        "suggested_refactor": "Extract logging to _calculate_critical_path_audit_layer() + Extract business logic to _calculate_critical_path_processor()"
      },
      {
        "function_name": "_calculate_epic_duration_from_tasks",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 2445,
        "responsibilities": [
          "business_logic",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_epic_duration_from_tasks(self, epic_id: int) -> float:\n        \"\"\"Calculate epic duration by summing task durations.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"...",
        "suggested_refactor": "Extract database operations to _calculate_epic_duration_from_tasks_data_layer() + Extract business logic to _calculate_epic_duration_from_tasks_processor()"
      },
      {
        "function_name": "_calculate_productivity_score",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 1049,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_productivity_score(self, stats: Dict[str, Any]) -> float:\n        \"\"\"Calculate overall productivity score.\"\"\"\n        if not stats:\n            return 0.0\n        \n        # Factors: session count, average duration, focus rating, low interruptions\n        session_count = stats.get...",
        "suggested_refactor": "Extract business logic to _calculate_productivity_score_processor()"
      },
      {
        "function_name": "_calculate_productivity_score",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 364,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_productivity_score(self, avg_focus: float, sessions: int, tasks: int, days: int) -> float:\n        \"\"\"Calculate overall productivity score (0-100).\"\"\"\n        \n        # Weight factors\n        focus_weight = 0.4\n        consistency_weight = 0.3\n        completion_weight = 0.3\n    ...",
        "suggested_refactor": "Extract business logic to _calculate_productivity_score_processor()"
      },
      {
        "function_name": "_calculate_progress_percentage",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 952,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_progress_percentage(self, session: Dict[str, Any]) -> float:\n        \"\"\"Calculate progress percentage for session.\"\"\"\n        planned_duration = session.get('planned_duration_minutes', 0)\n        if planned_duration <= 0:\n            return 0.0\n        \n        elapsed = self._cal...",
        "suggested_refactor": "Extract business logic to _calculate_progress_percentage_processor()"
      },
      {
        "function_name": "_calculate_remaining_time",
        "file_path": "streamlit_extension/services/timer_service.py",
        "line_number": 945,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_remaining_time(self, session: Dict[str, Any]) -> int:\n        \"\"\"Calculate remaining time for session.\"\"\"\n        planned_duration = session.get('planned_duration_minutes', 0)\n        elapsed = self._calculate_elapsed_time(session)\n        \n        return max(0, planned_duration -...",
        "suggested_refactor": "Extract business logic to _calculate_remaining_time_processor()"
      },
      {
        "function_name": "_calculate_tdd_score",
        "file_path": "streamlit_extension/services/analytics_service.py",
        "line_number": 885,
        "responsibilities": [
          "business_logic",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_tdd_score(self, tdd_metrics: Dict[str, Any]) -> float:\n        \"\"\"Calculate overall TDD effectiveness score.\"\"\"\n        phase_dist = tdd_metrics.get('phase_distribution', {})\n        completed_cycles = tdd_metrics.get('completed_cycles', 0)\n        \n        total_tasks = sum(phase...",
        "suggested_refactor": "Extract UI rendering to _calculate_tdd_score_ui_layer() + Extract business logic to _calculate_tdd_score_processor()"
      },
      {
        "function_name": "_calculate_trends",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 392,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _calculate_trends(self, timer_sessions: List[Dict], tasks: List[Dict]) -> Dict[str, Any]:\n        \"\"\"Calculate various trends from data.\"\"\"\n        \n        trends = {}\n        \n        # Focus trend (last 7 days vs previous 7 days)\n        if len(timer_sessions) >= 14:\n            recent_fo...",
        "suggested_refactor": "Extract business logic to _calculate_trends_processor()"
      },
      {
        "function_name": "_cleanup_disk_cache",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 588,
        "responsibilities": [
          "network",
          "file_io"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _cleanup_disk_cache(self) -> None:\n        \"\"\"Clean up disk cache if it exceeds size limit.\"\"\"\n        if not self.enable_disk_cache or not self.cache_dir:\n            return\n        \n        current_size = self._get_disk_cache_size()\n        \n        if current_size <= self.max_disk_cache_b...",
        "suggested_refactor": ""
      },
      {
        "function_name": "_cleanup_old_connections",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 208,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _cleanup_old_connections(self) -> None:\n        \"\"\"Fecha conex\u00f5es n\u00e3o usadas por al\u00e9m do TTL.\"\"\"\n        current_time = time.time()\n        with self._pool_lock:\n            stale_tids: list[int] = []\n            for tid, info in self._pool.items():\n                if current_time - info[\"la...",
        "suggested_refactor": "Extract UI rendering to _cleanup_old_connections_ui_layer() + Extract logging to _cleanup_old_connections_audit_layer()"
      },
      {
        "function_name": "_cleanup_private_db_singletons",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 405,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _cleanup_private_db_singletons() -> None:\n    \"\"\"\n    Fallback to close remaining private instances in internal modules.\n    Maintained for compatibility during transition. Does not fail shutdown.\n    \"\"\"\n    closed_any = False\n    try:\n        from streamlit_extension.database.queries import _D...",
        "suggested_refactor": "Extract UI rendering to _cleanup_private_db_singletons_ui_layer() + Extract logging to _cleanup_private_db_singletons_audit_layer()"
      },
      {
        "function_name": "_close_all",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 297,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _close_all(self) -> None:\n        \"\"\"Fecha todas as conex\u00f5es do pool (atexit).\"\"\"\n        with self._pool_lock:\n            for tid, info in list(self._pool.items()):\n                try:\n                    info[\"connection\"].close()\n                except Exception:\n                    pas...",
        "suggested_refactor": "Extract UI rendering to _close_all_ui_layer() + Extract logging to _close_all_audit_layer()"
      },
      {
        "function_name": "_convert_to_streamlit_report",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 234,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _convert_to_streamlit_report(self, raw_report: Dict[str, Any], days: int) -> AnalyticsReport:\n        \"\"\"Convert raw analytics report to Streamlit-optimized format.\"\"\"\n        \n        return AnalyticsReport(\n            period_days=days,\n            total_sessions=raw_report.get(\"total_sess...",
        "suggested_refactor": "Extract UI rendering to _convert_to_streamlit_report_ui_layer()"
      },
      {
        "function_name": "_create_session",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 219,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _create_session(self, user: User, ip_address: str, user_agent: str) -> Session:\n        \"\"\"Create new session for authenticated user.\"\"\"\n        session_id = str(uuid.uuid4())\n        csrf_token = self.csrf_protection.generate_token(session_id)\n        \n        session = Session(\n           ...",
        "suggested_refactor": "Extract UI rendering to _create_session_ui_layer()"
      },
      {
        "function_name": "_days_until_due",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1130,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _days_until_due(self, due_date: Any) -> Optional[int]:\n        \"\"\"Calculate days until due date.\"\"\"\n        if not due_date:\n            return None\n        \n        try:\n            if isinstance(due_date, str):\n                due_date = datetime.strptime(due_date, '%Y-%m-%d').date()\n     ...",
        "suggested_refactor": "Extract UI rendering to _days_until_due_ui_layer() + Extract logging to _days_until_due_audit_layer()"
      },
      {
        "function_name": "_deserialize_data",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 399,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _deserialize_data(self, data: str) -> Any:\n        \"\"\"Deserialize data from Redis.\"\"\"\n        try:\n            return json.loads(data)\n        except Exception as e:\n            self.logger.error(f\"Deserialization error: {e}\")\n            raise ValueError(f\"Cannot deserialize data: {e}\")\n   ...",
        "suggested_refactor": "Extract UI rendering to _deserialize_data_ui_layer() + Extract logging to _deserialize_data_audit_layer()"
      },
      {
        "function_name": "_determine_overall_status",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 404,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _determine_overall_status(self, checks: List[HealthCheck]) -> HealthStatus:\n        \"\"\"Determine overall health status from individual checks\"\"\"\n        if any(check.status == HealthStatus.CRITICAL for check in checks):\n            return HealthStatus.CRITICAL\n        elif any(check.status =...",
        "suggested_refactor": "Extract UI rendering to _determine_overall_status_ui_layer() + Extract logging to _determine_overall_status_audit_layer()"
      },
      {
        "function_name": "_enrich_execution_plan",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1396,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _enrich_execution_plan(self, plan: ExecutionPlan) -> ExecutionPlan:\n        \"\"\"Enriquece plano de execu\u00e7\u00e3o com dados espec\u00edficos do TaskService.\"\"\"\n        try:\n            # Add additional metadata from TaskService context\n            # This could include deadline information, resource assi...",
        "suggested_refactor": "Extract UI rendering to _enrich_execution_plan_ui_layer() + Extract logging to _enrich_execution_plan_audit_layer()"
      },
      {
        "function_name": "_ensure_auth_tables",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 98,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _ensure_auth_tables(self) -> None:\n        \"\"\"Create authentication tables if they don't exist.\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS auth_users (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT...",
        "suggested_refactor": "Extract database operations to _ensure_auth_tables_data_layer()"
      },
      {
        "function_name": "_error",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 91,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _error():\n        if container:\n            container.error(message)\n        else:\n            st.error(message)\n    ",
        "suggested_refactor": "Extract UI rendering to _error_ui_layer() + Extract logging to _error_audit_layer()"
      },
      {
        "function_name": "_evict_if_needed",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 195,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _evict_if_needed(self) -> None:\n        # Evict LRU enquanto exceder max_connections\n        while len(self._pool) > self.max_connections and self._lru_threads:\n            victim_tid = self._lru_threads.popleft()\n            info = self._pool.pop(victim_tid, None)\n            if info:\n     ...",
        "suggested_refactor": "Extract UI rendering to _evict_if_needed_ui_layer() + Extract logging to _evict_if_needed_audit_layer()"
      },
      {
        "function_name": "_fallback_is_user_authenticated",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 71,
        "responsibilities": [
          "auth",
          "logging"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _fallback_is_user_authenticated() -> bool:  # pragma: no cover\n    logger.warning(\"is_user_authenticated(): OAuth indispon\u00edvel \u2014 retornando False.\")\n    return False\n",
        "suggested_refactor": "Extract logging to _fallback_is_user_authenticated_audit_layer()"
      },
      {
        "function_name": "_generate_dependency_recommendations",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1431,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_dependency_recommendations(self, validation_result: Dict[str, Any]) -> List[str]:\n        \"\"\"Gera recomenda\u00e7\u00f5es baseadas na valida\u00e7\u00e3o de depend\u00eancias.\"\"\"\n        recommendations = []\n        \n        try:\n            if not validation_result[\"is_valid\"]:\n                if \"ciclo\" ...",
        "suggested_refactor": "Extract UI rendering to _generate_dependency_recommendations_ui_layer() + Extract logging to _generate_dependency_recommendations_audit_layer()"
      },
      {
        "function_name": "_generate_error_id",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 101,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_error_id(self) -> str:\n        \"\"\"Generate unique error ID for tracking.\"\"\"\n        import hashlib\n        error_data = f\"{self.timestamp.isoformat()}_{type(self.exception).__name__}_{str(self.exception)[:100]}\"\n        return hashlib.sha256(error_data.encode()).hexdigest()[:12]\n  ...",
        "suggested_refactor": "Extract UI rendering to _generate_error_id_ui_layer() + Extract logging to _generate_error_id_audit_layer()"
      },
      {
        "function_name": "_generate_key",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 133,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_key(self, key: Union[str, tuple, dict]) -> str:\n        \"\"\"Generate a consistent cache key from various input types.\"\"\"\n        # SECURITY FIX: Always hash keys to prevent path traversal attacks\n        # Never return raw strings that could contain ../../../ or other path traversal...",
        "suggested_refactor": "Extract UI rendering to _generate_key_ui_layer() + Extract logging to _generate_key_audit_layer()"
      },
      {
        "function_name": "_generate_load_test_report",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 316,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_load_test_report(self, config: LoadTestConfig, \n                                 start_time: float, end_time: float) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive load test report.\"\"\"\n        duration = end_time - start_time\n        stats = self.profiler.get_statistics()\n   ...",
        "suggested_refactor": "Extract UI rendering to _generate_load_test_report_ui_layer()"
      },
      {
        "function_name": "_generate_optimization_recommendations",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1500,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_optimization_recommendations(self, plan: ExecutionPlan, goal: str) -> List[str]:\n        \"\"\"Gera recomenda\u00e7\u00f5es de otimiza\u00e7\u00e3o baseadas no objetivo.\"\"\"\n        recommendations = []\n        \n        try:\n            metrics = plan.execution_metrics\n            total_hours = metrics.ge...",
        "suggested_refactor": "Extract UI rendering to _generate_optimization_recommendations_ui_layer() + Extract logging to _generate_optimization_recommendations_audit_layer()"
      },
      {
        "function_name": "_generate_recommendations",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 476,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_recommendations(self, results: Dict[str, Any]) -> List[str]:\n        \"\"\"Generate performance improvement recommendations.\"\"\"\n        recommendations = []\n        \n        for test_name, test_data in results.items():\n            if isinstance(test_data, dict):\n                # Chec...",
        "suggested_refactor": "Extract UI rendering to _generate_recommendations_ui_layer()"
      },
      {
        "function_name": "_generate_summary",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 457,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _generate_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Generate test summary.\"\"\"\n        summary = {\n            \"total_tests\": len(results),\n            \"overall_performance\": \"good\",  # Will be calculated\n            \"key_metrics\": {}\n        }\n        \n        # Ex...",
        "suggested_refactor": "Extract UI rendering to _generate_summary_ui_layer()"
      },
      {
        "function_name": "_get_container",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 473,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _get_container() -> Optional[\"ServiceContainer\"]:\n    _, container = get_session_services()\n    return container\n",
        "suggested_refactor": "Extract UI rendering to _get_container_ui_layer()"
      },
      {
        "function_name": "_get_disk_cache_files_by_age",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 568,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _get_disk_cache_files_by_age(self) -> list:\n        \"\"\"Get disk cache files sorted by last access time (oldest first).\"\"\"\n        if not self.cache_dir or not self.cache_dir.exists():\n            return []\n        \n        files = []\n        try:\n            for cache_file in self.cache_dir....",
        "suggested_refactor": "Extract UI rendering to _get_disk_cache_files_by_age_ui_layer() + Extract logging to _get_disk_cache_files_by_age_audit_layer()"
      },
      {
        "function_name": "_get_disk_cache_size",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 549,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _get_disk_cache_size(self) -> int:\n        \"\"\"Get total size of disk cache in bytes.\"\"\"\n        if not self.cache_dir or not self.cache_dir.exists():\n            return 0\n        \n        total_size = 0\n        try:\n            for cache_file in self.cache_dir.glob(\"*.cache\"):\n              ...",
        "suggested_refactor": "Extract UI rendering to _get_disk_cache_size_ui_layer() + Extract logging to _get_disk_cache_size_audit_layer()"
      },
      {
        "function_name": "_get_fallback_gantt_data",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 298,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _get_fallback_gantt_data(self) -> Dict[str, Any]:\n        \"\"\"Fallback Gantt data from database.\"\"\"\n        if not self.db_manager:\n            return {\"tasks\": [], \"epics\": []}\n        \n        epics = self.db_manager.get_epics()\n        all_tasks = self.db_manager.get_tasks()\n        \n     ...",
        "suggested_refactor": "Extract database operations to _get_fallback_gantt_data_data_layer()"
      },
      {
        "function_name": "_get_service",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 289,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _get_service(self, service_name: str, service_class: Type[T]) -> T:\n        with self._lock:\n            if service_name not in self._services:\n                if not self._initialized:\n                    raise ServiceError(\"Service container not initialized. Call initialize() first.\")\n    ...",
        "suggested_refactor": "Extract UI rendering to _get_service_ui_layer() + Extract logging to _get_service_audit_layer()"
      },
      {
        "function_name": "_identify_bottlenecks",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 338,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _identify_bottlenecks(self, stats: Dict[str, Any]) -> List[str]:\n        \"\"\"Identify performance bottlenecks from statistics.\"\"\"\n        bottlenecks = []\n        \n        response_time = stats.get(\"response_time\", {})\n        if response_time.get(\"p95\", 0) > 1000:  # > 1 second\n            b...",
        "suggested_refactor": "Extract UI rendering to _identify_bottlenecks_ui_layer()"
      },
      {
        "function_name": "_info",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 107,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _info():\n        if container:\n            container.info(message)\n        else:\n            st.info(message)\n    ",
        "suggested_refactor": "Extract UI rendering to _info_ui_layer() + Extract logging to _info_audit_layer()"
      },
      {
        "function_name": "_init_state",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 120,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _init_state():\n    if not STREAMLIT_AVAILABLE:\n        return\n    st.session_state.setdefault(SK_CFG, DEFAULT_CFG.copy())\n    st.session_state.setdefault(SK_SESSION, None)\n    st.session_state.setdefault(SK_CYCLES, 0)\n",
        "suggested_refactor": "Extract UI rendering to _init_state_ui_layer()"
      },
      {
        "function_name": "_initialize_connection",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 286,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _initialize_connection(self):\n        \"\"\"Initialize Redis connection with error handling.\"\"\"\n        if not REDIS_AVAILABLE:\n            self.logger.warning(\"Redis library not available. Cache will use fallback mode.\")\n            return\n        \n        try:\n            # Create connection ...",
        "suggested_refactor": "Extract UI rendering to _initialize_connection_ui_layer() + Extract logging to _initialize_connection_audit_layer()"
      },
      {
        "function_name": "_initialize_epic_selection",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 173,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _initialize_epic_selection() -> None:\n    \"\"\"Initialize epic selection with default values.\"\"\"\n    epics = fetch_epics() if DATA_PROVIDERS_AVAILABLE else []\n    default_epic_id = None\n    \n    if epics and len(epics) > 0 and isinstance(epics[0], dict):\n        default_epic_id = epics[0].get(\"id\"...",
        "suggested_refactor": "Extract database operations to _initialize_epic_selection_data_layer()"
      },
      {
        "function_name": "_initialize_exception_handler",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 139,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _initialize_exception_handler() -> None:\n    \"\"\"Initialize global exception handler.\"\"\"\n    if EXCEPTION_HANDLER_AVAILABLE and not st.session_state.get(\"exception_handler_installed\"):\n        install_global_exception_handler()\n        st.session_state.exception_handler_installed = True\n",
        "suggested_refactor": "Extract UI rendering to _initialize_exception_handler_ui_layer()"
      },
      {
        "function_name": "_initialize_health_status",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 183,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _initialize_health_status() -> None:\n    \"\"\"Initialize health status monitoring.\"\"\"\n    if DATA_PROVIDERS_AVAILABLE:\n        st.session_state[\"health\"] = fetch_health()\n    else:\n        st.session_state[\"health\"] = {\"status\": \"unknown\", \"healthy\": False}\n",
        "suggested_refactor": "Extract UI rendering to _initialize_health_status_ui_layer()"
      },
      {
        "function_name": "_initialize_services",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 151,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _initialize_services() -> None:\n    \"\"\"Initialize services and database.\"\"\"\n    if SETUP_AVAILABLE and not st.session_state.get(\"services_ready\"):\n        with streamlit_error_boundary(\"setup_application\"):\n            setup_application()\n            st.session_state.services_ready = True\n",
        "suggested_refactor": "Extract UI rendering to _initialize_services_ui_layer()"
      },
      {
        "function_name": "_initialize_timer",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 158,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _initialize_timer() -> None:\n    \"\"\"Initialize timer component.\"\"\"\n    if \"timer\" not in st.session_state:\n        st.session_state.timer = TimerComponent()\n",
        "suggested_refactor": "Extract UI rendering to _initialize_timer_ui_layer()"
      },
      {
        "function_name": "_is_task_overdue",
        "file_path": "streamlit_extension/services/task_service.py",
        "line_number": 1117,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _is_task_overdue(self, due_date: Any) -> bool:\n        \"\"\"Check if task is overdue.\"\"\"\n        if not due_date:\n            return False\n        \n        try:\n            if isinstance(due_date, str):\n                due_date = datetime.strptime(due_date, '%Y-%m-%d').date()\n            \n    ...",
        "suggested_refactor": "Extract UI rendering to _is_task_overdue_ui_layer() + Extract logging to _is_task_overdue_audit_layer()"
      },
      {
        "function_name": "_load_planning_context",
        "file_path": "streamlit_extension/services/task_execution_planner.py",
        "line_number": 174,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _load_planning_context(self, epic_id: int) -> ServiceResult[PlanningContext]:\n        \"\"\"Carrega contexto necess\u00e1rio para planejamento usando repositories\"\"\"\n        try:\n            # Carregar tarefas\n            tasks = self.tasks_repo.list_by_epic(epic_id)\n            if not tasks:\n      ...",
        "suggested_refactor": "Extract UI rendering to _load_planning_context_ui_layer() + Extract logging to _load_planning_context_audit_layer()"
      },
      {
        "function_name": "_log_security_warning",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 212,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _log_security_warning(self, message: str) -> None:\n        \"\"\"Log security-related warnings.\"\"\"\n        import logging\n        logger = logging.getLogger(__name__)\n        logger.warning(f\"SECURITY: {message}\")\n    ",
        "suggested_refactor": "Extract UI rendering to _log_security_warning_ui_layer() + Extract logging to _log_security_warning_audit_layer()"
      },
      {
        "function_name": "_new_sqlite_connection",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 55,
        "responsibilities": [
          "database",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _new_sqlite_connection() -> sqlite3.Connection:\n    \"\"\"\n    Cria uma nova conex\u00e3o SQLite com configura\u00e7\u00f5es padr\u00e3o do m\u00f3dulo.\n    \"\"\"\n    conn = sqlite3.connect(\n        _resolve_db_path(),\n        detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES,\n        # Seguran\u00e7a: cada thread tem...",
        "suggested_refactor": "Extract database operations to _new_sqlite_connection_data_layer() + Extract validation to _new_sqlite_connection_validator()"
      },
      {
        "function_name": "_next_session_type",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 390,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _next_session_type(self, cfg: Dict[str, Any]) -> str:\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cycles = _safe_int(st.session_state.get(SK_CYCLES), 0)\n        # Se ainda n\u00e3o houve foco conclu\u00eddo, come\u00e7a com foco\n        if ts is None:\n            return \"f...",
        "suggested_refactor": "Extract UI rendering to _next_session_type_ui_layer()"
      },
      {
        "function_name": "_normalize_status",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 223,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _normalize_status(value: str) -> str:\n    v = value.lower().strip()\n    if v in {\"ok\", \"healthy\", \"pass\"}:\n        return \"healthy\"\n    if v in {\"error\", \"fail\", \"failed\"}:\n        return \"error\"\n    if v in {\"degraded\", \"warn\", \"warning\"}:\n        return \"degraded\"\n    return \"unknown\"\n",
        "suggested_refactor": "Extract UI rendering to _normalize_status_ui_layer() + Extract logging to _normalize_status_audit_layer()"
      },
      {
        "function_name": "_on_failure",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 179,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _on_failure(self):\n        \"\"\"Handle failed operation\"\"\"\n        with self._lock:\n            self.failure_count += 1\n            self.last_failure_time = time.time()\n            \n            if self.state == CircuitState.HALF_OPEN:\n                self.state = CircuitState.OPEN\n            ...",
        "suggested_refactor": "Extract UI rendering to _on_failure_ui_layer() + Extract logging to _on_failure_audit_layer()"
      },
      {
        "function_name": "_on_success",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 166,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _on_success(self):\n        \"\"\"Handle successful operation\"\"\"\n        with self._lock:\n            if self.state == CircuitState.HALF_OPEN:\n                self.success_count += 1\n                if self.success_count >= self.config.success_threshold:\n                    self.state = CircuitS...",
        "suggested_refactor": "Extract UI rendering to _on_success_ui_layer() + Extract logging to _on_success_audit_layer()"
      },
      {
        "function_name": "_record_failure",
        "file_path": "streamlit_extension/utils/circuit_breaker.py",
        "line_number": 226,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _record_failure(self) -> None:\n        \"\"\"Record failed operation.\"\"\"\n        with self._lock:\n            self.stats.failed_requests += 1\n            self.stats.last_failure_time = datetime.now()\n            self.stats.current_consecutive_successes = 0\n            self.stats.current_consecu...",
        "suggested_refactor": "Extract UI rendering to _record_failure_ui_layer() + Extract logging to _record_failure_audit_layer()"
      },
      {
        "function_name": "_record_operation",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 164,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _record_operation(self, operation_type: str, response_time: float):\n        \"\"\"Record operation statistics.\"\"\"\n        with self._stats_lock:\n            self.performance_stats[\"total_operations\"] += 1\n            self.performance_stats[operation_type] += 1\n            \n            # Update ...",
        "suggested_refactor": "Extract UI rendering to _record_operation_ui_layer()"
      },
      {
        "function_name": "_record_success",
        "file_path": "streamlit_extension/utils/circuit_breaker.py",
        "line_number": 215,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _record_success(self) -> None:\n        \"\"\"Record successful operation.\"\"\"\n        with self._lock:\n            self.stats.successful_requests += 1\n            self.stats.last_success_time = datetime.now()\n            self.stats.current_consecutive_failures = 0\n            self.stats.current_...",
        "suggested_refactor": "Extract UI rendering to _record_success_ui_layer() + Extract logging to _record_success_audit_layer()"
      },
      {
        "function_name": "_recover_business_logic_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 474,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_business_logic_error(self, error: StreamlitError):\n        \"\"\"Attempt business logic error recovery.\"\"\"\n        error.suggestions.append(\"Business rule validation failed.\")\n        error.suggestions.append(\"Please review your data and try again.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_business_logic_error_ui_layer() + Extract logging to _recover_business_logic_error_audit_layer()"
      },
      {
        "function_name": "_recover_database_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 432,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_database_error(self, error: StreamlitError):\n        \"\"\"Attempt database error recovery.\"\"\"\n        if \"locked\" in str(error.exception).lower():\n            # Database lock - suggest retry\n            error.suggestions.append(\"The database is busy. Please wait a moment and try again...",
        "suggested_refactor": "Extract UI rendering to _recover_database_error_ui_layer() + Extract logging to _recover_database_error_audit_layer()"
      },
      {
        "function_name": "_recover_filesystem_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 458,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_filesystem_error(self, error: StreamlitError):\n        \"\"\"Attempt file system error recovery.\"\"\"\n        error.suggestions.append(\"File system error occurred.\")\n        error.suggestions.append(\"Please contact support if this persists.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_filesystem_error_ui_layer() + Extract logging to _recover_filesystem_error_audit_layer()"
      },
      {
        "function_name": "_recover_network_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 453,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_network_error(self, error: StreamlitError):\n        \"\"\"Attempt network error recovery.\"\"\"\n        error.suggestions.append(\"Check your internet connection.\")\n        error.suggestions.append(\"Try refreshing the page.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_network_error_ui_layer() + Extract logging to _recover_network_error_audit_layer()"
      },
      {
        "function_name": "_recover_security_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 463,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_security_error(self, error: StreamlitError):\n        \"\"\"Attempt security error recovery.\"\"\"\n        error.suggestions.append(\"Security check failed.\")\n        error.suggestions.append(\"Please refresh the page and try again.\")\n        error.suggestions.append(\"Contact support if you ...",
        "suggested_refactor": "Extract UI rendering to _recover_security_error_ui_layer() + Extract logging to _recover_security_error_audit_layer()"
      },
      {
        "function_name": "_recover_system_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 479,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_system_error(self, error: StreamlitError):\n        \"\"\"Attempt system error recovery.\"\"\"\n        error.suggestions.append(\"System error occurred.\")\n        error.suggestions.append(\"Please try again or contact support.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_system_error_ui_layer() + Extract logging to _recover_system_error_audit_layer()"
      },
      {
        "function_name": "_recover_user_input_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 469,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_user_input_error(self, error: StreamlitError):\n        \"\"\"Attempt user input error recovery.\"\"\"\n        error.suggestions.append(\"Please check your input format.\")\n        error.suggestions.append(\"Ensure all fields contain valid data.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_user_input_error_ui_layer() + Extract logging to _recover_user_input_error_audit_layer()"
      },
      {
        "function_name": "_recover_validation_error",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 448,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _recover_validation_error(self, error: StreamlitError):\n        \"\"\"Attempt validation error recovery.\"\"\"\n        error.suggestions.append(\"Please check your input and try again.\")\n        error.suggestions.append(\"Ensure all required fields are filled correctly.\")\n    ",
        "suggested_refactor": "Extract UI rendering to _recover_validation_error_ui_layer() + Extract logging to _recover_validation_error_audit_layer()"
      },
      {
        "function_name": "_render",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 155,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def _render():\n            st.write(\"\u23f1\ufe0f Timer Component (Fallback Mode)\")\n            st.info(\"Timer functionality indispon\u00edvel. Componente principal n\u00e3o carregado.\")\n            \n            # Basic timer controls fallback\n            col1, col2, col3 = st.columns(3)\n            \n          ...",
        "suggested_refactor": "Extract UI rendering to _render_ui_layer()"
      },
      {
        "function_name": "_render_analytics_section",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 196,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _render_analytics_section(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the analytics cards section.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    stats = fetch_user_stats(user.get(\"id\") if isinstance(user, dict) else None)\n    render_analytics_cards(stats o...",
        "suggested_refactor": "Extract UI rendering to _render_analytics_section_ui_layer()"
      },
      {
        "function_name": "_render_page_not_found",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 147,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _render_page_not_found(current_page: str) -> None:\n    \"\"\"\n    Render page not found error.\n    \n    Args:\n        current_page: Name of the page that was not found\n    \"\"\"\n    st.error(f\"\u274c Page '{current_page}' is not available\")\n    st.info(\"Available pages: Dashboard\")\n    if st.button(\"\ud83c\udfe0 Ret...",
        "suggested_refactor": "Extract UI rendering to _render_page_not_found_ui_layer() + Extract logging to _render_page_not_found_audit_layer()"
      },
      {
        "function_name": "_render_pages_system_page",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 128,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _render_pages_system_page(current_page: str) -> None:\n    \"\"\"\n    Render a page using the pages system.\n    \n    Args:\n        current_page: Name of the page to render\n    \"\"\"\n    page_id = current_page.lower()  # Convert \"Clients\" -> \"clients\"\n    \n    with streamlit_error_boundary(f\"render_pag...",
        "suggested_refactor": "Extract UI rendering to _render_pages_system_page_ui_layer() + Extract logging to _render_pages_system_page_audit_layer()"
      },
      {
        "function_name": "_render_task_list",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 207,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _render_task_list(tasks: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Render the task list for the selected epic.\n    \n    Args:\n        tasks: List of tasks to display\n    \"\"\"\n    st.markdown(\"#### Tarefas\")\n    \n    if not tasks:\n        st.caption(\"Nenhuma tarefa para este \u00e9pico.\")\n        retu...",
        "suggested_refactor": "Extract UI rendering to _render_task_list_ui_layer() + Extract logging to _render_task_list_audit_layer()"
      },
      {
        "function_name": "_restore_streamlit_config",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 372,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _restore_streamlit_config(self, config_data: Dict[str, Any]) -> None:\n        \"\"\"Restore streamlit configuration.\"\"\"\n        # This would integrate with the actual config system\n        # For now, we'll just store it for the next app restart\n        config_restore_file = Path.cwd() / \".confi...",
        "suggested_refactor": "Extract UI rendering to _restore_streamlit_config_ui_layer()"
      },
      {
        "function_name": "_safe_float_conversion",
        "file_path": "streamlit_extension/components/analytics_cards.py",
        "line_number": 50,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def _safe_float_conversion(value: Any, default: float = 0.0) -> float:\n    \"\"\"\n    Safely convert value to float with fallback.\n    Extracted from streamlit_app._as_float() for reusability.\n    \"\"\"\n    try:\n        return float(value if value is not None else default)\n    except (ValueError, TypeErr...",
        "suggested_refactor": "Extract UI rendering to _safe_float_conversion_ui_layer() + Extract logging to _safe_float_conversion_audit_layer()"
      },
      {
        "function_name": "_setup_json_logging",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 68,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _setup_json_logging(self) -> None:\n        \"\"\"Setup JSON-based logging format\"\"\"\n        from .log_formatter import JSONFormatter\n\n        handler = logging.StreamHandler()\n        handler.setFormatter(JSONFormatter())\n        # Evita handlers duplicados em hot-reload\n        if not any(isin...",
        "suggested_refactor": "Extract UI rendering to _setup_json_logging_ui_layer() + Extract logging to _setup_json_logging_audit_layer()"
      },
      {
        "function_name": "_setup_logging",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 148,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup secure logging.\"\"\"\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('cached_database')\n        else:\n            self.logger = logging.getLogger('cached_database')\n            self.logger.setLevel(logging.INFO)\n     ...",
        "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
      },
      {
        "function_name": "_setup_logging",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 270,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup secure logging.\"\"\"\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('redis_cache')\n        else:\n            self.logger = logging.getLogger('redis_cache')\n            self.logger.setLevel(logging.INFO)\n            \n...",
        "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
      },
      {
        "function_name": "_show",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 117,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "            def _show():\n                if notification and getattr(notification, \"message\", None):\n                    st.info(f\"\ud83d\udd14 {notification.message}\")\n                else:\n                    st.info(\"\ud83d\udd14 Notifica\u00e7\u00f5es indispon\u00edveis.\")",
        "suggested_refactor": "Extract UI rendering to _show_ui_layer() + Extract logging to _show_audit_layer()"
      },
      {
        "function_name": "_show",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 124,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def _show():\n            if notification and getattr(notification, \"message\", None):\n                message = f\"\ud83d\udd14 {notification.message}\"\n                \n                # Show notification based on type\n                if notification.type == \"success\":\n                    st.success(mess...",
        "suggested_refactor": "Extract UI rendering to _show_ui_layer() + Extract logging to _show_audit_layer()"
      },
      {
        "function_name": "_signal_handler",
        "file_path": "streamlit_extension/utils/shutdown_handler.py",
        "line_number": 85,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _signal_handler(self, signum, frame) -> None:  # pragma: no cover - called by signal\n        if self.logger:\n            self.logger.info(\"Received signal %s. Initiating graceful shutdown.\", signum)\n        self.perform_graceful_shutdown()\n",
        "suggested_refactor": "Extract UI rendering to _signal_handler_ui_layer() + Extract logging to _signal_handler_audit_layer()"
      },
      {
        "function_name": "_svc_call",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 306,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "                def _svc_call() -> Dict[str, Any]:\n                    try:\n                        return check_service_health(container)  # type: ignore\n                    except TypeError:\n                        return check_service_health()  # type: ignore",
        "suggested_refactor": "Extract UI rendering to _svc_call_ui_layer() + Extract validation to _svc_call_validator()"
      },
      {
        "function_name": "_update_avg_response_time",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 132,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _update_avg_response_time(self, response_time: float):\n        \"\"\"Update average response time.\"\"\"\n        current_avg = self.stats[\"avg_response_time\"]\n        total_requests = self.stats[\"total_requests\"]\n        \n        # Calculate new average using incremental formula\n        self.stats...",
        "suggested_refactor": "Extract database operations to _update_avg_response_time_data_layer()"
      },
      {
        "function_name": "_user_loop",
        "file_path": "streamlit_extension/utils/load_tester.py",
        "line_number": 34,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _user_loop(self, stop_time: float) -> None:\n        while time.perf_counter() < stop_time:\n            for action in self.actions:\n                start = time.perf_counter()\n                success = True\n                try:\n                    action()\n                except Exception as ...",
        "suggested_refactor": "Extract UI rendering to _user_loop_ui_layer() + Extract logging to _user_loop_audit_layer()"
      },
      {
        "function_name": "_validate_planning_inputs",
        "file_path": "streamlit_extension/services/task_execution_planner.py",
        "line_number": 158,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _validate_planning_inputs(self, epic_id: int, scoring_preset: str) -> ServiceResult[bool]:\n        \"\"\"Valida inputs do planejamento\"\"\"\n        errors = []\n        \n        if not isinstance(epic_id, int) or epic_id <= 0:\n            errors.append(f\"epic_id deve ser inteiro positivo, recebido...",
        "suggested_refactor": "Extract UI rendering to _validate_planning_inputs_ui_layer() + Extract logging to _validate_planning_inputs_audit_layer()"
      },
      {
        "function_name": "_warning",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 139,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _warning():\n        if container:\n            container.warning(message)\n        else:\n            st.warning(message)\n    ",
        "suggested_refactor": "Extract UI rendering to _warning_ui_layer() + Extract logging to _warning_audit_layer()"
      },
      {
        "function_name": "_write",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 75,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def _write():\n        if container:\n            container.write(content)\n        else:\n            st.write(content)\n    ",
        "suggested_refactor": "Extract UI rendering to _write_ui_layer()"
      },
      {
        "function_name": "add_error",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 106,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def add_error(self, error: ServiceError) -> None:\n        \"\"\"Add an error to the result.\"\"\"\n        self.success = False\n        self.errors.append(error)\n    ",
        "suggested_refactor": "Extract UI rendering to add_error_ui_layer() + Extract logging to add_error_audit_layer()"
      },
      {
        "function_name": "apply_theme_css",
        "file_path": "streamlit_extension/config/themes.py",
        "line_number": 391,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def apply_theme_css(self, theme: Optional[Theme] = None) -> str:\n        \"\"\"Generate CSS for applying theme styles.\"\"\"\n        if not theme:\n            theme = self.get_current_theme()\n        \n        css = f\"\"\"\n        <style>\n        :root {{\n            --primary-color: {theme.colors.primar...",
        "suggested_refactor": "Extract UI rendering to apply_theme_css_ui_layer() + Extract logging to apply_theme_css_audit_layer()"
      },
      {
        "function_name": "attempt_recovery",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 65,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        time.sleep(0.01)  # Simulate retry delay\n        return RecoveryResult(True, result=\"db_recovered\")\n",
        "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
      },
      {
        "function_name": "attempt_recovery",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 94,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        return RecoveryResult(True, result=\"validated\")\n",
        "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
      },
      {
        "function_name": "attempt_recovery",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 112,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        for strategy in self.strategies:\n            if strategy.can_recover(error, context):\n                result = strategy.attempt_recovery(error, context)\n                if result.success:\n              ...",
        "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
      },
      {
        "function_name": "auth_middleware",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 126,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def auth_middleware() -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Alias de compatibilidade. Retorna o usu\u00e1rio autenticado (ou None).\n    Preferir `get_authenticated_user()`.\n    \"\"\"\n    return get_authenticated_user()\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "authenticated_page",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 419,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def authenticated_page(func):\n    \"\"\"Decorator to require authentication for Streamlit pages.\"\"\"\n    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        user = auth_manager.require_au...",
        "suggested_refactor": "Extract UI rendering to authenticated_page_ui_layer()"
      },
      {
        "function_name": "build_context",
        "file_path": "streamlit_extension/middleware/context_manager.py",
        "line_number": 59,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def build_context(self, request_data: Dict[str, Any]) -> UserContext:\n        correlation_id = self.correlation_manager.get_or_create()\n        context = UserContext(\n            user_id=request_data.get(\"user_id\"),\n            session_id=request_data.get(\"session_id\", str(uuid.uuid4())),\n      ...",
        "suggested_refactor": "Extract UI rendering to build_context_ui_layer()"
      },
      {
        "function_name": "call",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 133,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def call(self, func: Callable, *args, **kwargs):\n        \"\"\"Execute function with circuit breaker protection\"\"\"\n        with self._lock:\n            if self.state == CircuitState.OPEN:\n                if self._should_attempt_reset():\n                    self.state = CircuitState.HALF_OPEN\n      ...",
        "suggested_refactor": "Extract UI rendering to call_ui_layer() + Extract logging to call_audit_layer()"
      },
      {
        "function_name": "can_recover",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 62,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, OperationalError)\n",
        "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer()"
      },
      {
        "function_name": "can_recover",
        "file_path": "streamlit_extension/utils/enhanced_recovery.py",
        "line_number": 76,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, AuthenticationError)\n",
        "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer()"
      },
      {
        "function_name": "change_password",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 311,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def change_password(self, user_id: int, old_password: str, new_password: str) -> AuthResult:\n        \"\"\"Change user password with validation.\"\"\"\n        if len(new_password) < 8:\n            return AuthResult(False, message=\"New password must be at least 8 characters\")\n        \n        try:\n    ...",
        "suggested_refactor": "Extract database operations to change_password_data_layer()"
      },
      {
        "function_name": "check_cache_system",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 304,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def check_cache_system(self) -> HealthCheck:\n        \"\"\"Check caching system health\"\"\"\n        start_time = time.time()\n        \n        try:\n            # Test cache functionality\n            if STREAMLIT_AVAILABLE and hasattr(st, 'cache_data'):\n                # Streamlit's new caching\n       ...",
        "suggested_refactor": "Extract UI rendering to check_cache_system_ui_layer() + Extract logging to check_cache_system_audit_layer()"
      },
      {
        "function_name": "check_endpoint_rate_limit",
        "file_path": "streamlit_extension/middleware/rate_limiting/core.py",
        "line_number": 115,
        "responsibilities": [
          "business_logic",
          "auth"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def check_endpoint_rate_limit(self, endpoint: str) -> bool:\n        config = self._match_endpoint(endpoint)\n        if not config:\n            return True\n        count, period = self._parse_rate(config[\"rate_limit\"])\n        alg = config.get(\"algorithm\", \"sliding_window\")\n        key = f\"endpoi...",
        "suggested_refactor": "Extract business logic to check_endpoint_rate_limit_processor()"
      },
      {
        "function_name": "check_orchestrator_health",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 195,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def check_orchestrator_health() -> Dict[str, Any]:\n    \"\"\"Check health of all orchestrator dependencies.\"\"\"\n    return {\n        \"streamlit_helpers_available\": True,\n        \"session_manager_available\": True,\n        \"exception_handler_available\": True,\n        \"sidebar_available\": True,\n        \"la...",
        "suggested_refactor": "Extract UI rendering to check_orchestrator_health_ui_layer()"
      },
      {
        "function_name": "check_page_manager_health",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 319,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def check_page_manager_health() -> Dict[str, Any]:\n    \"\"\"Check health of page manager dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"analytics_cards_available\": ANALYTICS_CARDS_AVAILABLE,\n        \"layout_renderers_available\": LAYOUT_RENDERERS_AVAILABLE,\n ...",
        "suggested_refactor": "Extract UI rendering to check_page_manager_health_ui_layer()"
      },
      {
        "function_name": "check_rate_limit",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 816,
        "responsibilities": [
          "auth",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def check_rate_limit(operation_type: str, \n                    user_id: Optional[str] = None,\n                    ip_address: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n    \"\"\"Check if operation is within rate limits.\"\"\"\n    return security_manager.check_rate_limit(operation_type, user_id,...",
        "suggested_refactor": "Extract validation to check_rate_limit_validator()"
      },
      {
        "function_name": "check_resources",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 179,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def check_resources(self) -> List[HealthCheck]:\n        \"\"\"Check system resource health\"\"\"\n        metrics = self.get_system_metrics()\n        checks = []\n\n        # CPU check\n        start_cpu = time.time()\n        if metrics.cpu_percent > 90:\n            cpu_status = HealthStatus.CRITICAL\n    ...",
        "suggested_refactor": "Extract UI rendering to check_resources_ui_layer() + Extract logging to check_resources_audit_layer()"
      },
      {
        "function_name": "cleanup_expired_cache",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 886,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def cleanup_expired_cache():\n    \"\"\"Remove expired entries from all caches.\"\"\"\n    cache = get_cache()\n\n    with cache._lock:\n        expired_keys = [\n            key\n            for key, entry in cache._memory_cache.items()\n            if entry.is_expired() or entry.expires_at <= entry.created_at\n ...",
        "suggested_refactor": ""
      },
      {
        "function_name": "cleanup_orphaned_cache_files",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 614,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def cleanup_orphaned_cache_files(self) -> int:\n        \"\"\"\n        Remove orphaned cache files that don't have corresponding memory entries.\n        \n        Returns:\n            int: Number of orphaned files removed\n        \"\"\"\n        if not self.enable_disk_cache or not self.cache_dir:\n      ...",
        "suggested_refactor": "Extract UI rendering to cleanup_orphaned_cache_files_ui_layer() + Extract logging to cleanup_orphaned_cache_files_audit_layer()"
      },
      {
        "function_name": "cleanup_worker",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 258,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def cleanup_worker():\n            while True:\n                try:\n                    self.connection_pool.cleanup_idle_connections()\n                    time.sleep(60)  # Cleanup every minute\n                except Exception as e:\n                    logger.error(\"Cleanup thread error: %s\"...",
        "suggested_refactor": "Extract UI rendering to cleanup_worker_ui_layer() + Extract logging to cleanup_worker_audit_layer()"
      },
      {
        "function_name": "clear_all_caches",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 163,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def clear_all_caches() -> None:\n    \"\"\"Clear all data provider caches.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n        \n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        l...",
        "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer() + Extract logging to clear_all_caches_audit_layer()"
      },
      {
        "function_name": "clear_all_caches",
        "file_path": "streamlit_extension/utils/cache_utils.py",
        "line_number": 68,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def clear_all_caches() -> None:\n    \"\"\"Clear all Streamlit caches.\"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        \n        logger.info(...",
        "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer() + Extract logging to clear_all_caches_audit_layer()"
      },
      {
        "function_name": "clear_all_session_state",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 229,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def clear_all_session_state() -> None:\n    \"\"\"Clear all session state (use with caution).\"\"\"\n    if STREAMLIT_AVAILABLE:\n        st.session_state.clear()\n",
        "suggested_refactor": "Extract UI rendering to clear_all_session_state_ui_layer()"
      },
      {
        "function_name": "clear_cache_by_function",
        "file_path": "streamlit_extension/utils/cache_utils.py",
        "line_number": 88,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def clear_cache_by_function(func: Callable) -> None:\n    \"\"\"\n    Clear cache for a specific function.\n    \n    Args:\n        func: Function whose cache to clear\n    \"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        if hasattr(func, \"clear\"):\n            func.clear()\n            logger.inf...",
        "suggested_refactor": "Extract UI rendering to clear_cache_by_function_ui_layer() + Extract logging to clear_cache_by_function_audit_layer()"
      },
      {
        "function_name": "clear_session_value",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 219,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def clear_session_value(key: str) -> None:\n    \"\"\"\n    Clear a specific session state value.\n    \n    Args:\n        key: Session state key to clear\n    \"\"\"\n    if STREAMLIT_AVAILABLE and key in st.session_state:\n        del st.session_state[key]\n",
        "suggested_refactor": "Extract UI rendering to clear_session_value_ui_layer()"
      },
      {
        "function_name": "close",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 3594,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def close(self) -> None:\n        \"\"\"\n        Fecha conex\u00f5es e libera recursos do banco de dados.\n        Importante para cleanup adequado em testes e shutdown.\n        \"\"\"\n        try:\n            if hasattr(self, 'engine'):\n                self.engine.dispose()\n                logger.info(\"Data...",
        "suggested_refactor": "Extract UI rendering to close_ui_layer() + Extract logging to close_audit_layer()"
      },
      {
        "function_name": "combine_results",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 276,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def combine_results(*results: ServiceResult) -> ServiceResult[List[Any]]:\n    \"\"\"\n    Combine multiple service results into one.\n    \n    If any result failed, return a failed result with all errors.\n    If all succeeded, return success with all data.\n    \"\"\"\n    all_errors = []\n    all_data = []\n  ...",
        "suggested_refactor": "Extract UI rendering to combine_results_ui_layer() + Extract logging to combine_results_audit_layer()"
      },
      {
        "function_name": "create_api_success_response",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 278,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_api_success_response(data: Any, metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n    \"\"\"\n    Create standardized API success response.\n    \n    Args:\n        data: Response data\n        metadata: Optional metadata (pagination, etc.)\n        \n    Returns:\n        Standardized ...",
        "suggested_refactor": "Extract UI rendering to create_api_success_response_ui_layer()"
      },
      {
        "function_name": "create_client",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 282,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def create_client(self, **kwargs) -> Optional[int]:\n        \"\"\"Create client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.create_client(**kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"client\")\n                sel...",
        "suggested_refactor": "Extract UI rendering to create_client_ui_layer() + Extract logging to create_client_audit_layer()"
      },
      {
        "function_name": "create_columns",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 191,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_columns(ratios: List[float]) -> List[Any]:\n    \"\"\"\n    Create Streamlit columns with specified ratios.\n    \n    Args:\n        ratios: List of column width ratios\n        \n    Returns:\n        List of column objects or empty list if unavailable\n    \"\"\"\n    if not is_ui():\n        return []...",
        "suggested_refactor": "Extract UI rendering to create_columns_ui_layer() + Extract logging to create_columns_audit_layer()"
      },
      {
        "function_name": "create_error_result",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 270,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_error_result(error_type: ServiceErrorType, message: str, **kwargs) -> ServiceResult[Any]:\n    \"\"\"Utility function to create error result.\"\"\"\n    error = ServiceError(error_type=error_type, message=message, **kwargs)\n    return ServiceResult.fail(error)\n\n",
        "suggested_refactor": "Extract UI rendering to create_error_result_ui_layer() + Extract logging to create_error_result_audit_layer()"
      },
      {
        "function_name": "create_expander",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 229,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_expander(title: str, expanded: bool = False) -> Any:\n    \"\"\"\n    Create Streamlit expander safely.\n    \n    Args:\n        title: Expander title\n        expanded: Whether to start expanded\n        \n    Returns:\n        Expander object or None if unavailable\n    \"\"\"\n    if not is_ui():\n    ...",
        "suggested_refactor": "Extract UI rendering to create_expander_ui_layer() + Extract logging to create_expander_audit_layer()"
      },
      {
        "function_name": "create_flow",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 55,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def create_flow(self) -> Flow:\n        \"\"\"Create and configure Google OAuth flow.\"\"\"\n        client_config = {\n            \"web\": {\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"auth_uri\": \"https://accounts.google.com/o/oauth2/...",
        "suggested_refactor": ""
      },
      {
        "function_name": "create_safe_client_data",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 317,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def create_safe_client_data(self, form_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Create safely sanitized client data from form input.\n        \n        Args:\n            form_data: Raw form data from Streamlit\n            \n        Returns:\n            Sanitized client data safe...",
        "suggested_refactor": "Extract UI rendering to create_safe_client_data_ui_layer() + Extract validation to create_safe_client_data_validator()"
      },
      {
        "function_name": "create_safe_project_data",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 343,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def create_safe_project_data(self, form_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Create safely sanitized project data from form input.\n        \n        Args:\n            form_data: Raw form data from Streamlit\n            \n        Returns:\n            Sanitized project data s...",
        "suggested_refactor": "Extract UI rendering to create_safe_project_data_ui_layer() + Extract validation to create_safe_project_data_validator()"
      },
      {
        "function_name": "create_sidebar_main_layout",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 385,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_sidebar_main_layout(sidebar_content: Callable[[], None],\n                             main_content: Callable[[], None]) -> None:\n    \"\"\"Create sidebar + main content layout.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[SIDEBAR]\")\n        sidebar_content()\n        print(\"[MAIN CONTEN...",
        "suggested_refactor": "Extract UI rendering to create_sidebar_main_layout_ui_layer() + Extract logging to create_sidebar_main_layout_audit_layer()"
      },
      {
        "function_name": "create_streamlit_config_file",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 402,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_streamlit_config_file(output_dir: Optional[Path] = None) -> Path:\n    \"\"\"\n    Gera `.streamlit/config.toml` a partir de `get_streamlit_config_dict()`.\n    Retorna o caminho do arquivo gerado.\n    \"\"\"\n    cfg = get_config()\n    data = cfg.get_streamlit_config_dict()\n\n    toml_parts: List[s...",
        "suggested_refactor": "Extract UI rendering to create_streamlit_config_file_ui_layer()"
      },
      {
        "function_name": "create_tabs",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 210,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_tabs(tab_names: List[str]) -> List[Any]:\n    \"\"\"\n    Create Streamlit tabs with specified names.\n    \n    Args:\n        tab_names: List of tab names\n        \n    Returns:\n        List of tab objects or empty list if unavailable\n    \"\"\"\n    if not is_ui():\n        return []\n    \n    try:\n ...",
        "suggested_refactor": "Extract UI rendering to create_tabs_ui_layer() + Extract logging to create_tabs_audit_layer()"
      },
      {
        "function_name": "create_three_column_layout",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 358,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_three_column_layout(left_content: Callable[[], None],\n                             center_content: Callable[[], None], \n                             right_content: Callable[[], None],\n                             ratio: List[int] = [1, 1, 1]) -> None:\n    \"\"\"Create a three-column layout.\"...",
        "suggested_refactor": "Extract UI rendering to create_three_column_layout_ui_layer() + Extract logging to create_three_column_layout_audit_layer()"
      },
      {
        "function_name": "create_two_column_layout",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 332,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def create_two_column_layout(left_content: Callable[[], None], \n                           right_content: Callable[[], None],\n                           ratio: List[int] = [1, 1]) -> None:\n    \"\"\"Create a simple two-column layout.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[LEFT COLUMN]\")\n   ...",
        "suggested_refactor": "Extract UI rendering to create_two_column_layout_ui_layer() + Extract logging to create_two_column_layout_audit_layer()"
      },
      {
        "function_name": "csrf_protected",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 443,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def csrf_protected(func):\n    \"\"\"Decorator to add CSRF protection to form submissions.\"\"\"\n    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        \n        session = auth_manager.get_c...",
        "suggested_refactor": "Extract UI rendering to csrf_protected_ui_layer()"
      },
      {
        "function_name": "decorator",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 197,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def decorator(f: Callable) -> Callable:\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            try:\n                return f(*args, **kwargs)\n            except Exception as e:\n                handler = GlobalExceptionHandler()\n                \n                # Prepare context\n    ...",
        "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
      },
      {
        "function_name": "decorator",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 528,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def decorator(func: Callable) -> Callable:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                context = {\n                    \"function\": func.__name__,\n            ...",
        "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
      },
      {
        "function_name": "delete_with_transaction",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 627,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def delete_with_transaction(\n        self, \n        delete_operations: List[Tuple[str, Dict[str, Any]]], \n        isolation_level: str = \"READ_COMMITTED\"",
        "suggested_refactor": "Extract database operations to delete_with_transaction_data_layer()"
      },
      {
        "function_name": "detailed_health",
        "file_path": "streamlit_extension/endpoints/health.py",
        "line_number": 91,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def detailed_health(self) -> Dict[str, object]:\n        \"\"\"Return detailed component information.\n\n        The overall status is derived from the status of individual\n        components \u2013 ``unhealthy`` takes precedence over ``degraded``\n        which in turn takes precedence over ``healthy``.\n  ...",
        "suggested_refactor": "Extract UI rendering to detailed_health_ui_layer() + Extract validation to detailed_health_validator()"
      },
      {
        "function_name": "detect_cycles_dfs",
        "file_path": "streamlit_extension/utils/graph_algorithms.py",
        "line_number": 169,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def detect_cycles_dfs(adjacency: Dict[str, Set[str]]) -> Tuple[bool, Optional[List[str]]]:\n        \"\"\"\n        Detecta ciclos usando DFS colorido\n        OTIMIZA\u00c7\u00c3O: Vers\u00e3o iterativa para evitar stack overflow em grafos grandes\n        \n        Args:\n            adjacency: Grafo dirigido\n       ...",
        "suggested_refactor": "Extract UI rendering to detect_cycles_dfs_ui_layer() + Extract logging to detect_cycles_dfs_audit_layer()"
      },
      {
        "function_name": "display_errors",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 178,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def display_errors(self, errors: list[str]):\n        \"\"\"Display validation errors.\"\"\"\n        if not self.st:\n            self.errors.extend(errors)\n        else:  # pragma: no cover - simple streamlit display\n            for error in errors:\n                self.st.error(error)\n\n",
        "suggested_refactor": "Extract UI rendering to display_errors_ui_layer() + Extract logging to display_errors_audit_layer()"
      },
      {
        "function_name": "display_name",
        "file_path": "streamlit_extension/auth/user_model.py",
        "line_number": 20,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def display_name(self) -> str:\n        \"\"\"Get display name for role.\"\"\"\n        return {\n            UserRole.ADMIN: \"Administrator\",\n            UserRole.USER: \"User\", \n            UserRole.READONLY: \"Read Only\"\n        }[self]\n    ",
        "suggested_refactor": "Extract UI rendering to display_name_ui_layer()"
      },
      {
        "function_name": "error",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 419,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def error(self, component: str, operation: str, message: str, exception: Optional[Exception] = None, **kwargs):\n        \"\"\"Log error message.\"\"\"\n        return self.log(LogLevel.ERROR, EventType.ERROR, component, operation, message, exception=exception, **kwargs)\n    ",
        "suggested_refactor": "Extract UI rendering to error_ui_layer() + Extract logging to error_audit_layer()"
      },
      {
        "function_name": "error",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 134,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def error(\n        self, operation: str, message: str, error: Exception | None = None, **kwargs: Any",
        "suggested_refactor": "Extract UI rendering to error_ui_layer() + Extract logging to error_audit_layer()"
      },
      {
        "function_name": "fail",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 68,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def fail(cls, error: ServiceError) -> 'ServiceResult[T]':\n        \"\"\"Create a failed result with single error.\"\"\"\n        return cls(success=False, errors=[error])\n    ",
        "suggested_refactor": "Extract UI rendering to fail_ui_layer() + Extract logging to fail_audit_layer()"
      },
      {
        "function_name": "fail_multiple",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 73,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def fail_multiple(cls, errors: List[ServiceError]) -> 'ServiceResult[T]':\n        \"\"\"Create a failed result with multiple errors.\"\"\"\n        return cls(success=False, errors=errors)\n    ",
        "suggested_refactor": "Extract UI rendering to fail_multiple_ui_layer() + Extract logging to fail_multiple_audit_layer()"
      },
      {
        "function_name": "fetch_health",
        "file_path": "streamlit_extension/components/health_widgets.py",
        "line_number": 49,
        "responsibilities": [
          "network",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def fetch_health() -> Dict[str, Any]:\n    \"\"\"\n    Fetch health status from available sources.\n    Uses same logic as streamlit_app.fetch_health() - UI-only, no reimplementation.\n    \"\"\"\n    try:\n        if SERVICES_HEALTH_AVAILABLE:\n            return check_services_health()\n        return {\n       ...",
        "suggested_refactor": "Extract validation to fetch_health_validator()"
      },
      {
        "function_name": "flush_all",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 532,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def flush_all(self) -> bool:\n        \"\"\"\n        Flush all cache data.\n        \n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self._check_health():\n            return False\n        \n        try:\n            with self._measure_time():\n                ...",
        "suggested_refactor": "Extract UI rendering to flush_all_ui_layer() + Extract logging to flush_all_audit_layer()"
      },
      {
        "function_name": "flush_cache",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 612,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def flush_cache(self) -> bool:\n        \"\"\"Flush all cache data.\"\"\"\n        if not self.enable_cache:\n            return False\n        \n        try:\n            from .redis_cache import flush_cache\n            result = flush_cache()\n            self.logger.info(\"Cache flushed successfully\")\n     ...",
        "suggested_refactor": "Extract UI rendering to flush_cache_ui_layer() + Extract logging to flush_cache_audit_layer()"
      },
      {
        "function_name": "format_time_ago",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 223,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def format_time_ago(self, dt: datetime) -> str:\n        \"\"\"Format time as 'time ago' string with timezone awareness.\"\"\"\n        if not isinstance(dt, datetime):\n            return \"Unknown time\"\n        \n        now = self.get_current_time()\n        \n        # Ensure both datetimes have timezone...",
        "suggested_refactor": "Extract UI rendering to format_time_ago_ui_layer() + Extract logging to format_time_ago_audit_layer()"
      },
      {
        "function_name": "from_dict",
        "file_path": "streamlit_extension/auth/user_model.py",
        "line_number": 81,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def from_dict(cls, data: dict) -> User:\n        \"\"\"Create from dictionary.\"\"\"\n        return cls(\n            id=data.get(\"id\", 0),\n            username=data.get(\"username\", \"\"),\n            email=data.get(\"email\", \"\"),\n            role=UserRole(data.get(\"role\", \"user\")),\n            is_active=d...",
        "suggested_refactor": "Extract UI rendering to from_dict_ui_layer()"
      },
      {
        "function_name": "generate_dev_api_key",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 301,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def generate_dev_api_key(user_id: str) -> str:\n    \"\"\"\n    Generate development API key.\n    \n    Args:\n        user_id: User identifier\n        \n    Returns:\n        Development API key\n    \"\"\"\n    timestamp = str(int(time.time()))\n    key_data = f\"{user_id}_{timestamp}\"\n    return f\"tdd_api_{user_...",
        "suggested_refactor": ""
      },
      {
        "function_name": "generate_error_id",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 132,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def generate_error_id(self, exception: Exception) -> str:\n        \"\"\"Generate unique error ID for tracking\"\"\"\n        error_content = f\"{type(exception).__name__}:{str(exception)[:100]}\"\n        return hashlib.md5(error_content.encode()).hexdigest()[:8]\n    ",
        "suggested_refactor": "Extract UI rendering to generate_error_id_ui_layer() + Extract logging to generate_error_id_audit_layer()"
      },
      {
        "function_name": "generate_productivity_report",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 86,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def generate_productivity_report(self, days: int = 30) -> AnalyticsReport:\n        \"\"\"Generate comprehensive productivity report with caching.\"\"\"\n        \n        if self.engine and ANALYTICS_ENGINE_AVAILABLE:\n            try:\n                # Use existing analytics engine\n                raw_r...",
        "suggested_refactor": "Extract UI rendering to generate_productivity_report_ui_layer() + Extract logging to generate_productivity_report_audit_layer()"
      },
      {
        "function_name": "generate_request_id",
        "file_path": "streamlit_extension/endpoints/api_middleware.py",
        "line_number": 231,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def generate_request_id(user_id: Optional[str], api_endpoint: str) -> str:\n    \"\"\"\n    Generate unique request ID for tracing.\n    \n    Args:\n        user_id: User ID\n        api_endpoint: API endpoint\n        \n    Returns:\n        Unique request ID\n    \"\"\"\n    timestamp = str(int(time.time() * 1000...",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_achievements",
        "file_path": "streamlit_extension/database/queries.py",
        "line_number": 54,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_achievements(user_id: int) -> List[Dict[str, Any]]:\n    \"\"\"Conquistas/gamifica\u00e7\u00e3o do usu\u00e1rio (via legado).\"\"\"\n    return _db().get_achievements(user_id)\n\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_analytics_data",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 238,
        "responsibilities": [
          "logging",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_analytics_data(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"\n        Get analytics data from existing analytics engine.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            Analytics data or fallback data if engine unavailabl...",
        "suggested_refactor": "Extract logging to get_analytics_data_audit_layer()"
      },
      {
        "function_name": "get_app_service_container",
        "file_path": "streamlit_extension/utils/app_setup.py",
        "line_number": 191,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_app_service_container(force_new: bool = False) -> Optional[\"ServiceContainer\"]:\n    \"\"\"\n    Returns (or creates) the service container.\n    Uses thread-safe global cache and, if available, Streamlit cache for stability across reruns.\n    \"\"\"\n    global _service_container_singleton\n\n    # If ...",
        "suggested_refactor": "Extract UI rendering to get_app_service_container_ui_layer()"
      },
      {
        "function_name": "get_authenticated_user",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 423,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_authenticated_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Get the currently authenticated user (utility function).\"\"\"\n    if not DEPENDENCIES_AVAILABLE:\n        return None\n    \n    try:\n        auth_manager = GoogleOAuthManager()\n        return auth_manager.get_current_user()\n    except:\n   ...",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_available_components",
        "file_path": "streamlit_extension/components/__init__.py",
        "line_number": 76,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_available_components():\n    \"\"\"Get list of available component categories.\"\"\"\n    return {\n        cat_id: cat_info \n        for cat_id, cat_info in COMPONENT_REGISTRY.items() \n        if cat_info[\"available\"]\n    }\n",
        "suggested_refactor": "Extract UI rendering to get_available_components_ui_layer() + Extract logging to get_available_components_audit_layer()"
      },
      {
        "function_name": "get_available_pages",
        "file_path": "streamlit_extension/pages/__init__.py",
        "line_number": 111,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_available_pages():\n    \"\"\"Get list of available pages for navigation.\"\"\"\n    return {\n        page_id: page_info \n        for page_id, page_info in PAGE_REGISTRY.items() \n        if page_info[\"available\"]\n    }\n\n",
        "suggested_refactor": "Extract UI rendering to get_available_pages_ui_layer() + Extract logging to get_available_pages_audit_layer()"
      },
      {
        "function_name": "get_backup_info",
        "file_path": "streamlit_extension/config/backup_restore.py",
        "line_number": 368,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_backup_info(self, backup_name: str) -> Optional[BackupInfo]:\n        \"\"\"Get detailed information about a backup.\"\"\"\n        return self._backup_index.get(backup_name)\n    ",
        "suggested_refactor": "Extract UI rendering to get_backup_info_ui_layer() + Extract logging to get_backup_info_audit_layer()"
      },
      {
        "function_name": "get_bucket_state",
        "file_path": "streamlit_extension/middleware/rate_limiting/storage.py",
        "line_number": 164,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_bucket_state(self, key: str) -> Dict[str, Any]:\n        with self._lock, self._conn:\n            cur = self._conn.execute(\"SELECT tokens, last_refill FROM rl_buckets WHERE key=?\", (key,))\n            row = cur.fetchone()\n            if not row:\n                return {\"tokens\": 0.0, \"las...",
        "suggested_refactor": "Extract database operations to get_bucket_state_data_layer()"
      },
      {
        "function_name": "get_cache_statistics",
        "file_path": "streamlit_extension/utils/cache.py",
        "line_number": 852,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_cache_statistics() -> Dict[str, Any]:\n    \"\"\"Get comprehensive cache statistics.\"\"\"\n    cache = get_cache()\n    stats = cache.get_stats()\n    \n    # Add session cache stats if available\n    session_cache = get_session_cache()\n    stats['session_cache_entries'] = len(session_cache)\n    \n    r...",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_cache_status",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 626,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_cache_status(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive cache status.\"\"\"\n        return {\n            \"enabled\": self.enable_cache,\n            \"available\": self.cache_manager.is_available if self.cache_manager else False,\n            \"performance\": self.get_performance_stats(...",
        "suggested_refactor": "Extract UI rendering to get_cache_status_ui_layer()"
      },
      {
        "function_name": "get_client",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 307,
        "responsibilities": [
          "logging",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_client(self, client_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get client by ID.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with client data if found\n        \"\"\"\n        self.log_operation(\"get_clien...",
        "suggested_refactor": "Extract logging to get_client_audit_layer()"
      },
      {
        "function_name": "get_compatibility_info",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 360,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_compatibility_info(self) -> Dict[str, Any]:\n        \"\"\"\n        Get information about compatibility with existing system components.\n        \n        Returns:\n            Compatibility status and recommendations\n        \"\"\"\n        return {\n            \"framework_version\": \"1.1.2\",  # Fr...",
        "suggested_refactor": "Extract UI rendering to get_compatibility_info_ui_layer() + Extract logging to get_compatibility_info_audit_layer()"
      },
      {
        "function_name": "get_component_status",
        "file_path": "streamlit_extension/components/__init__.py",
        "line_number": 84,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_component_status():\n    \"\"\"Get status of all component categories.\"\"\"\n    status = {}\n    for cat_id, cat_info in COMPONENT_REGISTRY.items():\n        status[cat_id] = {\n            \"available\": cat_info[\"available\"],\n            \"component_count\": len(cat_info[\"components\"]),\n            \"de...",
        "suggested_refactor": "Extract UI rendering to get_component_status_ui_layer() + Extract logging to get_component_status_audit_layer()"
      },
      {
        "function_name": "get_connection",
        "file_path": "streamlit_extension/database/connection.py",
        "line_number": 93,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_connection() -> Any:\n    \"\"\"Obt\u00e9m uma conex\u00e3o do manager atual.\"\"\"\n    return _db().get_connection()",
        "suggested_refactor": "Extract database operations to get_connection_data_layer()"
      },
      {
        "function_name": "get_connection",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 48,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_connection(self):\n        \"\"\"Obt\u00e9m conex\u00e3o via API modular (quando exposta pelo projeto).\"\"\"\n        return db_connection.get_connection()\n",
        "suggested_refactor": "Extract database operations to get_connection_data_layer()"
      },
      {
        "function_name": "get_connection",
        "file_path": "streamlit_extension/utils/connection_resilience.py",
        "line_number": 271,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_connection(self):\n        \"\"\"Get database connection with resilience\"\"\"\n        conn = None\n        try:\n            # Get connection through circuit breaker and retry logic\n            conn = self.retry_manager.execute_with_retry(\n                lambda: self.circuit_breaker.call(self.c...",
        "suggested_refactor": "Extract database operations to get_connection_data_layer()"
      },
      {
        "function_name": "get_connection_context",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 52,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_connection_context(self):\n        \"\"\"Context manager de conex\u00e3o direta SQLite da API modular.\"\"\"\n        return db_connection.get_connection_context()\n",
        "suggested_refactor": "Extract database operations to get_connection_context_data_layer()"
      },
      {
        "function_name": "get_csrf_form_field",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 769,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_csrf_form_field(self, form_id: str) -> Dict[str, str]:\n        \"\"\"\n        Get CSRF token and field name for embedding in forms.\n        \n        Args:\n            form_id: Unique identifier for the form\n            \n        Returns:\n            Dictionary with field name and token value...",
        "suggested_refactor": "Extract UI rendering to get_csrf_form_field_ui_layer()"
      },
      {
        "function_name": "get_current_session",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 247,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_current_session(self) -> Optional[Session]:\n        \"\"\"Get current valid session.\"\"\"\n        current_session_id = st.session_state.auth_manager.get('current_session')\n        if not current_session_id:\n            return None\n        \n        session = st.session_state.auth_manager['sess...",
        "suggested_refactor": "Extract UI rendering to get_current_session_ui_layer()"
      },
      {
        "function_name": "get_current_user",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 239,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_current_user(self) -> Optional[User]:\n        \"\"\"Get currently authenticated user.\"\"\"\n        session = self.get_current_session()\n        if not session:\n            return None\n        \n        return st.session_state.auth_manager['users'].get(session.user_id)\n    ",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_current_user",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 276,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_current_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Get current user from session state.\"\"\"\n    return get_session_value(\"current_user\")\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_current_user",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 302,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_current_user(self, session_id: str) -> Optional[User]:\n        \"\"\"Get current user from session.\"\"\"\n        session_data = self.session_handler.get_session(session_id)\n        return session_data.user if session_data else None\n    ",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_current_user",
        "file_path": "streamlit_extension/auth/__init__.py",
        "line_number": 140,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_current_user() -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Alias de compatibilidade. Retorna o usu\u00e1rio corrente (ou None).\n    Preferir `get_authenticated_user()`.\n    \"\"\"\n    return get_authenticated_user()\n\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_elapsed_time",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 63,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_elapsed_time() -> tuple[int, int]:\n    \"\"\"Get current elapsed time as (minutes, seconds).\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return 0, 0\n    \n    # Calculate total elapsed time\n    total_secs = st.session_state.get(\"elapsed_seconds\", 0)\n    if st.session_state.get(\"timer_running\") an...",
        "suggested_refactor": "Extract UI rendering to get_elapsed_time_ui_layer()"
      },
      {
        "function_name": "get_error_messages",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 111,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_error_messages(self) -> List[str]:\n        \"\"\"Get all error messages as a list of strings.\"\"\"\n        return [str(error) for error in self.errors]\n    ",
        "suggested_refactor": "Extract UI rendering to get_error_messages_ui_layer() + Extract logging to get_error_messages_audit_layer()"
      },
      {
        "function_name": "get_error_statistics",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 29,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_error_statistics() -> Dict[str, Any]:\n        return {\"total_errors\": 0, \"error_types\": {}}",
        "suggested_refactor": "Extract UI rendering to get_error_statistics_ui_layer() + Extract logging to get_error_statistics_audit_layer()"
      },
      {
        "function_name": "get_error_stats",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 484,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_error_stats(self) -> Dict[str, Any]:\n        \"\"\"Get error statistics.\"\"\"\n        with self._stats_lock:\n            return self.error_stats.copy()\n    ",
        "suggested_refactor": "Extract UI rendering to get_error_stats_ui_layer() + Extract logging to get_error_stats_audit_layer()"
      },
      {
        "function_name": "get_execution_summary",
        "file_path": "streamlit_extension/services/task_execution_planner.py",
        "line_number": 463,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_execution_summary(self, plan: ExecutionPlan) -> Dict[str, Any]:\n        \"\"\"\n        Gera sum\u00e1rio executivo do plano de execu\u00e7\u00e3o.\n        \n        Args:\n            plan: Plano de execu\u00e7\u00e3o\n            \n        Returns:\n            Dicion\u00e1rio com sum\u00e1rio executivo\n        \"\"\"\n        try:\n...",
        "suggested_refactor": "Extract UI rendering to get_execution_summary_ui_layer() + Extract logging to get_execution_summary_audit_layer()"
      },
      {
        "function_name": "get_first_error",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 115,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_first_error(self) -> Optional[ServiceError]:\n        \"\"\"Get the first error if any.\"\"\"\n        return self.errors[0] if self.errors else None\n\n",
        "suggested_refactor": "Extract UI rendering to get_first_error_ui_layer() + Extract logging to get_first_error_audit_layer()"
      },
      {
        "function_name": "get_gantt_data",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 282,
        "responsibilities": [
          "logging",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_gantt_data(self) -> Dict[str, Any]:\n        \"\"\"\n        Get Gantt chart data from existing tracker.\n        \n        Returns:\n            Gantt data compatible with existing gantt_tracker.py\n        \"\"\"\n        if not self.gantt:\n            return self._get_fallback_gantt_data()\n       ...",
        "suggested_refactor": "Extract logging to get_gantt_data_audit_layer()"
      },
      {
        "function_name": "get_performance_stats",
        "file_path": "streamlit_extension/utils/cached_database.py",
        "line_number": 582,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_performance_stats(self) -> Dict[str, Any]:\n        \"\"\"Get performance statistics.\"\"\"\n        with self._stats_lock:\n            stats = self.performance_stats.copy()\n            \n            # Calculate hit rate\n            total_cache_ops = stats[\"cache_hits\"] + stats[\"cache_misses\"]\n  ...",
        "suggested_refactor": "Extract UI rendering to get_performance_stats_ui_layer()"
      },
      {
        "function_name": "get_productivity_summary",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 604,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_productivity_summary(db_manager: DatabaseManager, days: int = 7) -> Dict[str, Any]:\n    \"\"\"Get a quick productivity summary.\"\"\"\n    engine = create_analytics_engine(db_manager)\n    report = engine.generate_productivity_report(days)\n    \n    return {\n        \"focus_time_hours\": report.total_f...",
        "suggested_refactor": "Extract database operations to get_productivity_summary_data_layer()"
      },
      {
        "function_name": "get_readiness_status",
        "file_path": "streamlit_extension/endpoints/health_monitoring.py",
        "line_number": 415,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_readiness_status(self) -> Dict[str, Any]:\n        \"\"\"Kubernetes readiness probe endpoint\"\"\"\n        critical_checks = [\n            \"database_connection\",\n            \"system_memory\",\n            \"system_disk\"\n        ]\n        \n        results = self.run_all_checks()\n        \n        # ...",
        "suggested_refactor": "Extract UI rendering to get_readiness_status_ui_layer() + Extract logging to get_readiness_status_audit_layer()"
      },
      {
        "function_name": "get_recent_timer_sessions_optimized",
        "file_path": "streamlit_extension/database/queries.py",
        "line_number": 188,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_recent_timer_sessions_optimized(days: int = 7, cache_ttl: int = 60) -> List[Dict[str, Any]]:\n    \"\"\"\n    Lista sess\u00f5es de timer recentes (\u00faltimos N dias) com JOIN em task/epic.\n\n    Observa\u00e7\u00f5es:\n      - Usa `datetime('now', ?)` com par\u00e2metro '-{days} days' para evitar concatena\u00e7\u00e3o em SQL.\n  ...",
        "suggested_refactor": "Extract database operations to get_recent_timer_sessions_optimized_data_layer()"
      },
      {
        "function_name": "get_relative_path",
        "file_path": "streamlit_extension/utils/path_utils.py",
        "line_number": 44,
        "responsibilities": [
          "network",
          "file_io"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_relative_path(file_path: Union[str, Path]) -> Path:\n    \"\"\"\n    Get path relative to project root.\n    \n    Args:\n        file_path: File path to make relative\n        \n    Returns:\n        Path relative to project root\n    \"\"\"\n    project_root = get_project_root()\n    file_path = Path(file_...",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_selected_epic_id",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 303,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_selected_epic_id() -> Any:\n    \"\"\"Get currently selected epic ID.\"\"\"\n    return get_session_value(\"selected_epic_id\")\n",
        "suggested_refactor": "Extract database operations to get_selected_epic_id_data_layer()"
      },
      {
        "function_name": "get_session_state",
        "file_path": "streamlit_extension/utils/streamlit_helpers.py",
        "line_number": 61,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_session_state() -> Any:\n    \"\"\"\n    Get Streamlit session state safely.\n    \n    Returns:\n        Session state object or None if unavailable\n    \"\"\"\n    if is_ui():\n        try:\n            import streamlit as st\n            return st.session_state\n        except ImportError:\n            re...",
        "suggested_refactor": "Extract UI rendering to get_session_state_ui_layer()"
      },
      {
        "function_name": "get_session_summary",
        "file_path": "streamlit_extension/components/timer.py",
        "line_number": 165,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_session_summary(self) -> Dict[str, Any]:\n        \"\"\"Resumo da sess\u00e3o atual (sem render).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return {}\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cfg = st.session_state.get(SK_CFG, DEFAULT_CFG)\n        retu...",
        "suggested_refactor": "Extract UI rendering to get_session_summary_ui_layer()"
      },
      {
        "function_name": "get_session_value",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 192,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_session_value(key: str, default: Any = None) -> Any:\n    \"\"\"\n    Get a value from session state safely.\n    \n    Args:\n        key: Session state key\n        default: Default value if key doesn't exist\n        \n    Returns:\n        Value from session state or default\n    \"\"\"\n    if not STREA...",
        "suggested_refactor": "Extract UI rendering to get_session_value_ui_layer()"
      },
      {
        "function_name": "get_statistics",
        "file_path": "streamlit_extension/utils/performance_tester.py",
        "line_number": 121,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_statistics(self, operation_name: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive statistics for operations.\"\"\"\n        filtered_metrics = self.metrics\n        if operation_name:\n            filtered_metrics = [m for m in self.metrics if m.operation_name == oper...",
        "suggested_refactor": "Extract UI rendering to get_statistics_ui_layer()"
      },
      {
        "function_name": "get_streamlit_charts",
        "file_path": "streamlit_extension/utils/analytics_integration.py",
        "line_number": 206,
        "responsibilities": [
          "network",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def get_streamlit_charts(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Generate Plotly charts optimized for Streamlit display.\"\"\"\n        \n        if not PLOTLY_AVAILABLE:\n            return {\"error\": \"Plotly not available for charts\"}\n        \n        charts = {}\n        \n        # Get da...",
        "suggested_refactor": "Extract UI rendering to get_streamlit_charts_ui_layer()"
      },
      {
        "function_name": "get_timer_component",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 311,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_timer_component() -> Any:\n    \"\"\"Get timer component from session state.\"\"\"\n    return get_session_value(\"timer\")\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_timer_state",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 79,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_timer_state() -> Dict[str, Any]:\n    \"\"\"Get current timer state for sidebar state.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\n            \"timer_running\": False,\n            \"current_task\": None,\n            \"elapsed_seconds\": 0\n        }\n    \n    return {\n        \"timer_running\": s...",
        "suggested_refactor": "Extract UI rendering to get_timer_state_ui_layer()"
      },
      {
        "function_name": "get_user_stats",
        "file_path": "streamlit_extension/database/queries.py",
        "line_number": 49,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_user_stats(user_id: int) -> Dict[str, Any]:\n    \"\"\"M\u00e9tricas agregadas por usu\u00e1rio (via legado).\"\"\"\n    return _db().get_user_stats(user_id)\n\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "get_user_stats_optimized",
        "file_path": "streamlit_extension/database/queries.py",
        "line_number": 160,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def get_user_stats_optimized(user_id: int = 1, cache_ttl: int = 240) -> Dict[str, Any]:\n    \"\"\"\n    Estat\u00edsticas agregadas do usu\u00e1rio (com cache).\n\n    Tabelas/colunas usadas (schema atual):\n      - epics: id\n      - tasks: id, epic_id, status\n      - work_sessions: id, task_id, duration_minutes, fo...",
        "suggested_refactor": "Extract database operations to get_user_stats_optimized_data_layer()"
      },
      {
        "function_name": "handle_database_error",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 192,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def handle_database_error(self, operation: str, error: Exception) -> ServiceResult[Any]:\n        \"\"\"Handle database errors with consistent error mapping.\"\"\"\n        self.logger.error(f\"Database error in {operation}: {error}\")\n        \n        service_error = ServiceError(\n            error_type=...",
        "suggested_refactor": "Extract UI rendering to handle_database_error_ui_layer() + Extract logging to handle_database_error_audit_layer()"
      },
      {
        "function_name": "handle_exceptions",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 187,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def handle_exceptions(func: Callable = None, *, context: Dict[str, Any] = None, show_in_ui: bool = True):\n    \"\"\"\n    Decorator to handle exceptions globally\n    \n    Args:\n        func: Function to wrap\n        context: Additional context for logging\n        show_in_ui: Whether to show error in Str...",
        "suggested_refactor": "Extract UI rendering to handle_exceptions_ui_layer() + Extract logging to handle_exceptions_audit_layer()"
      },
      {
        "function_name": "handle_streamlit_exceptions",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 520,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def handle_streamlit_exceptions(show_error: bool = True, attempt_recovery: bool = True):\n    \"\"\"\n    Decorator for automatic exception handling in Streamlit functions.\n    \n    Args:\n        show_error: Whether to show error message in UI\n        attempt_recovery: Whether to attempt automatic recove...",
        "suggested_refactor": "Extract UI rendering to handle_streamlit_exceptions_ui_layer() + Extract logging to handle_streamlit_exceptions_audit_layer()"
      },
      {
        "function_name": "has_errors",
        "file_path": "streamlit_extension/models/task_models.py",
        "line_number": 335,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def has_errors(self) -> bool:\n        \"\"\"Verifica se h\u00e1 erros\"\"\"\n        return len(self.errors) > 0\n    ",
        "suggested_refactor": "Extract UI rendering to has_errors_ui_layer() + Extract logging to has_errors_audit_layer()"
      },
      {
        "function_name": "has_warnings",
        "file_path": "streamlit_extension/models/task_models.py",
        "line_number": 340,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def has_warnings(self) -> bool:\n        \"\"\"Verifica se h\u00e1 warnings\"\"\"\n        return len(self.warnings) > 0\n    ",
        "suggested_refactor": "Extract UI rendering to has_warnings_ui_layer() + Extract logging to has_warnings_audit_layer()"
      },
      {
        "function_name": "info",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 411,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def info(self, component: str, operation: str, message: str, **kwargs):\n        \"\"\"Log info message.\"\"\"\n        return self.log(LogLevel.INFO, EventType.APPLICATION, component, operation, message, **kwargs)\n    ",
        "suggested_refactor": "Extract UI rendering to info_ui_layer() + Extract logging to info_audit_layer()"
      },
      {
        "function_name": "info",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 130,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def info(self, operation: str, message: str, **kwargs: Any) -> None:\n        \"\"\"Log info level operation\"\"\"\n        self.log_operation(operation, \"INFO\", message, **kwargs)\n",
        "suggested_refactor": "Extract UI rendering to info_ui_layer() + Extract logging to info_audit_layer()"
      },
      {
        "function_name": "initialize",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 180,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def initialize(self, lazy_loading: bool = True) -> None:\n        self._lazy_loading = lazy_loading\n\n        if not lazy_loading:\n            for name in list(self._service_classes.keys()):\n                self._create_service(name)\n\n        self._initialized = True\n        self._logger.info(\"Ser...",
        "suggested_refactor": "Extract UI rendering to initialize_ui_layer() + Extract logging to initialize_audit_layer()"
      },
      {
        "function_name": "initialize_page_state",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 323,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def initialize_page_state() -> None:\n    \"\"\"Initialize page-related session state - CANONICAL IMPLEMENTATION.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    # Set default page if not exists\n    if not get_session_value(\"current_page\"):\n        set_session_value(\"current_page\", \"Dashboard...",
        "suggested_refactor": ""
      },
      {
        "function_name": "initialize_timer_state",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 19,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def initialize_timer_state() -> None:\n    \"\"\"Initialize timer state in session state if not exists.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    if \"timer_running\" not in st.session_state:\n        st.session_state.timer_running = False\n        st.session_state.timer_start_time = None\n ...",
        "suggested_refactor": "Extract UI rendering to initialize_timer_state_ui_layer()"
      },
      {
        "function_name": "install_signal_handlers",
        "file_path": "streamlit_extension/utils/shutdown_handler.py",
        "line_number": 90,
        "responsibilities": [
          "logging",
          "file_io"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def install_signal_handlers(self) -> None:\n        \"\"\"Install signal handlers for clean shutdown.\"\"\"\n\n        if self._installed:\n            return\n        if threading.current_thread() is not threading.main_thread():\n            if self.logger:\n                self.logger.warning(\"Signal handl...",
        "suggested_refactor": "Extract logging to install_signal_handlers_audit_layer()"
      },
      {
        "function_name": "invalidate_cache",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 647,
        "responsibilities": [
          "network",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def invalidate_cache(prefix: str, *args, **kwargs):\n    \"\"\"\n    Invalidate cache for specific key or pattern.\n    \n    Args:\n        prefix: Cache key prefix\n        *args: Arguments for key generation\n        **kwargs: Keyword arguments for key generation\n    \"\"\"\n    cache = get_cache_manager()\n   ...",
        "suggested_refactor": "Extract database operations to invalidate_cache_data_layer()"
      },
      {
        "function_name": "is_authenticated",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 307,
        "responsibilities": [
          "auth",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def is_authenticated(self, session_id: str) -> bool:\n        \"\"\"Check if session is valid and user is authenticated.\"\"\"\n        return self.session_handler.is_valid_session(session_id)\n    ",
        "suggested_refactor": "Extract validation to is_authenticated_validator()"
      },
      {
        "function_name": "is_expanded",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 279,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def is_expanded(self) -> bool:\n        \"\"\"Check if the section is currently expanded (approximation).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return self.default_expanded\n        \n        # Note: Streamlit doesn't provide direct access to expander state\n        # This is a best-effort...",
        "suggested_refactor": "Extract UI rendering to is_expanded_ui_layer()"
      },
      {
        "function_name": "is_valid_session",
        "file_path": "streamlit_extension/auth/auth_manager.py",
        "line_number": 59,
        "responsibilities": [
          "auth",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def is_valid_session(self, session_id: str) -> bool:  # pragma: no cover\n            return False\n\n",
        "suggested_refactor": "Extract validation to is_valid_session_validator()"
      },
      {
        "function_name": "is_valid_session",
        "file_path": "streamlit_extension/auth/session_handler.py",
        "line_number": 68,
        "responsibilities": [
          "auth",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def is_valid_session(self, session_id: str) -> bool:\n        \"\"\"Check if session is valid.\"\"\"\n        return self.get_session(session_id) is not None\n    ",
        "suggested_refactor": "Extract validation to is_valid_session_validator()"
      },
      {
        "function_name": "log_exception",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 137,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def log_exception(self, exception: Exception, context: Dict[str, Any] = None):\n        \"\"\"Log exception with context\"\"\"\n        error_id = self.generate_error_id(exception)\n        category = self.categorize_exception(exception)\n        \n        log_data = {\n            \"error_id\": error_id,\n   ...",
        "suggested_refactor": "Extract UI rendering to log_exception_ui_layer() + Extract logging to log_exception_audit_layer()"
      },
      {
        "function_name": "log_operation",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 96,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def log_operation(\n        self,\n        operation: str,\n        level: str = \"INFO\",\n        message: str = \"\",\n        duration_ms: Optional[float] = None,\n        success: bool = True,\n        error: Optional[Exception] = None,\n        metadata: Optional[Dict[str, Any]] = None,",
        "suggested_refactor": "Extract UI rendering to log_operation_ui_layer() + Extract logging to log_operation_audit_layer()"
      },
      {
        "function_name": "log_performance_metrics",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 694,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def log_performance_metrics(memory_mb: float, cpu_percent: float, \n                           active_connections: int, cache_hit_ratio: float):\n    \"\"\"Log current performance metrics.\"\"\"\n    logger = get_logger()\n    \n    # Update Prometheus gauges\n    if PROMETHEUS_AVAILABLE:\n        logger.memory_...",
        "suggested_refactor": "Extract UI rendering to log_performance_metrics_ui_layer() + Extract logging to log_performance_metrics_audit_layer()"
      },
      {
        "function_name": "logout",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 276,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def logout(self) -> None:\n        \"\"\"Logout current user and invalidate session.\"\"\"\n        current_session_id = st.session_state.auth_manager.get('current_session')\n        if current_session_id:\n            session = st.session_state.auth_manager['sessions'].get(current_session_id)\n           ...",
        "suggested_refactor": "Extract UI rendering to logout_ui_layer()"
      },
      {
        "function_name": "logout",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 223,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def logout(self):\n        \"\"\"Clear authentication session and logout user.\"\"\"\n        # Clear session state\n        keys_to_remove = ['authenticated', 'user_session', 'oauth_state']\n        for key in keys_to_remove:\n            if key in st.session_state:\n                del st.session_state[ke...",
        "suggested_refactor": "Extract UI rendering to logout_ui_layer()"
      },
      {
        "function_name": "logout_user",
        "file_path": "streamlit_extension/auth/middleware.py",
        "line_number": 92,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def logout_user():\n    \"\"\"Logout current user.\"\"\"\n    if \"session_id\" in st.session_state:\n        auth_manager = get_auth_manager()\n        auth_manager.logout(st.session_state.session_id)\n        del st.session_state.session_id\n    \n    if \"current_user\" in st.session_state:\n        del st.session...",
        "suggested_refactor": "Extract UI rendering to logout_user_ui_layer()"
      },
      {
        "function_name": "not_found",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 88,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def not_found(cls, entity: str, identifier: Any) -> 'ServiceResult[T]':\n        \"\"\"Create a not found error result.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.NOT_FOUND,\n            message=f\"{entity} not found: {identifier}\"\n        )\n        return cls.fail(error)...",
        "suggested_refactor": "Extract UI rendering to not_found_ui_layer() + Extract logging to not_found_audit_layer()"
      },
      {
        "function_name": "pause_timer",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 40,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def pause_timer() -> None:\n    \"\"\"Pause the timer and accumulate elapsed time.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = False\n    if st.session_state.timer_start_time:\n        st.session_state.elapsed_seconds += int(\n            (datetime.now() - st...",
        "suggested_refactor": "Extract UI rendering to pause_timer_ui_layer()"
      },
      {
        "function_name": "perform_graceful_shutdown",
        "file_path": "streamlit_extension/utils/shutdown_handler.py",
        "line_number": 66,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def perform_graceful_shutdown(self) -> None:\n        \"\"\"Execute complete graceful shutdown sequence.\"\"\"\n\n        if self.shutdown_performed:\n            return\n        self.shutdown_performed = True\n\n        # Run all registered cleanup functions\n        for key, func in list(self.cleanup_functi...",
        "suggested_refactor": "Extract UI rendering to perform_graceful_shutdown_ui_layer() + Extract logging to perform_graceful_shutdown_audit_layer()"
      },
      {
        "function_name": "permission_required",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 430,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def permission_required(permission: str):\n    \"\"\"Decorator to require specific permission for Streamlit pages.\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            auth_manager = AuthenticationManager(\n                secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-...",
        "suggested_refactor": "Extract UI rendering to permission_required_ui_layer()"
      },
      {
        "function_name": "quick_sync_epics_json_to_db",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 388,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def quick_sync_epics_json_to_db(project_root: Path = None) -> bool:\n    \"\"\"Quick utility to sync JSON epics to database.\"\"\"\n    integrator = ExistingSystemIntegrator(project_root)\n    results = integrator.sync_epics_from_json()\n    \n    success = results.get(\"synced\", 0) > 0 and not results.get(\"err...",
        "suggested_refactor": "Extract UI rendering to quick_sync_epics_json_to_db_ui_layer() + Extract logging to quick_sync_epics_json_to_db_audit_layer()"
      },
      {
        "function_name": "readiness_check",
        "file_path": "streamlit_extension/endpoints/health.py",
        "line_number": 129,
        "responsibilities": [
          "network",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def readiness_check(self) -> Tuple[int, Dict[str, object]]:\n        \"\"\"Readiness probe suitable for Kubernetes.\"\"\"\n\n        db = self.checker.check_database()\n        cache = self.checker.check_cache()\n        ready = db.get(\"status\") == HealthStatus.HEALTHY.value and cache.get(\"status\") == Heal...",
        "suggested_refactor": "Extract validation to readiness_check_validator()"
      },
      {
        "function_name": "record_error",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 126,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def record_error(self):\n        \"\"\"Record cache error.\"\"\"\n        with self._lock:\n            self.stats[\"errors\"] += 1\n            self.stats[\"total_requests\"] += 1\n    ",
        "suggested_refactor": "Extract UI rendering to record_error_ui_layer() + Extract logging to record_error_audit_layer()"
      },
      {
        "function_name": "refresh_all_data",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 220,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def refresh_all_data() -> Dict[str, Any]:\n    \"\"\"Force refresh all data by clearing all caches.\"\"\"\n    clear_all_caches()\n    return {\n        \"user_stats\": fetch_user_stats(),\n        \"epics\": fetch_epics(),\n        \"health\": fetch_health(),\n        \"refreshed_at\": \"now\"\n    }\n",
        "suggested_refactor": ""
      },
      {
        "function_name": "reload_config",
        "file_path": "streamlit_extension/config/streamlit_config.py",
        "line_number": 432,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def reload_config(env_file: Optional[str] = None) -> StreamlitConfig:\n    \"\"\"Reload configuration from environment.\"\"\"\n    global _CONFIG_SINGLETON\n    _CONFIG_SINGLETON = load_config(env_file)\n    _CONFIG_SINGLETON.config_loaded_at = datetime.utcnow().isoformat()\n    return _CONFIG_SINGLETON\n\n",
        "suggested_refactor": "Extract UI rendering to reload_config_ui_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 153,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self) -> None:\n        \"\"\"Render timer component fallback.\"\"\"\n        def _render():\n            st.write(\"\u23f1\ufe0f Timer Component (Fallback Mode)\")\n            st.info(\"Timer functionality indispon\u00edvel. Componente principal n\u00e3o carregado.\")\n            \n            # Basic timer controls ...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 182,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(fields: List[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:\n        \"\"\"\n        Render standard form fallback.\n        \n        Args:\n            fields: Form field definitions\n            **kwargs: Additional form options\n            \n        Returns:\n            Form result di...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/status_components.py",
        "line_number": 93,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self, text: str = None, show_icon: bool = True, size: str = \"normal\") -> None:\n        \"\"\"Render the status badge.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[{self.status.upper()}] {text or self.status}\")\n            return\n        \n        display_text = text or self...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/status_components.py",
        "line_number": 194,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self, color_scheme: str = \"blue\", show_numbers: bool = True,\n              height: int = 20) -> None:\n        \"\"\"Render the progress card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.current}/{self.total} ({self.percentage:.1f}%)\")\n            if sel...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/status_components.py",
        "line_number": 316,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self, layout: str = \"default\", show_chart: bool = False,\n              chart_data: Optional[List[Union[int, float]]] = None) -> None:\n        \"\"\"Render the metric card with various layout options.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.prefix}{s...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 64,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering content within the card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            if self.title:\n                print(f\"=== {self.title} ===\")\n            if self.subtitle:\n                print(f\"--- {self.subtitle} ---\")\n            \n      ...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 172,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering sidebar section content.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            icon_part = f\"{self.icon} \" if self.icon else \"\"\n            print(f\"[SIDEBAR] {icon_part}{self.title}\")\n            if self.help_text:\n                print(f\" ...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 234,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering expandable section.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[EXPANDABLE] {self.icon} {self.title}\")\n            if self.help_text:\n                print(f\"  Help: {self.help_text}\")\n            \n            yield\n     ...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 303,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(self):\n        \"\"\"Render tabs e retorna objetos dos tabs (padr\u00e3o st.tabs).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[TABS] Available: {', '.join(self.tabs)}\")\n            return self.default_tab\n        \n        # Build tab labels with icons\n        tab_labels = [f\"{...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render",
        "file_path": "streamlit_extension/components/dashboard_widgets.py",
        "line_number": 59,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render(activity_data: Dict[str, int], title: str = \"Activity Heatmap\", \n              height: int = 150) -> None:\n        \"\"\"\n        Render a productivity heatmap.\n        \n        Args:\n            activity_data: Dict with date strings as keys and activity counts as values\n            titl...",
        "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
      },
      {
        "function_name": "render_application_ui",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 111,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_application_ui(user: Dict[str, Any]) -> None:\n    \"\"\"Render the main application UI components.\"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        # Render sidebar navigation\n        sidebar_state = render_sidebar()\n        logger.debug(f\"Sidebar rendered with state: {type(sideba...",
        "suggested_refactor": "Extract UI rendering to render_application_ui_ui_layer() + Extract logging to render_application_ui_audit_layer()"
      },
      {
        "function_name": "render_breadcrumb_navigation",
        "file_path": "streamlit_extension/components/page_manager.py",
        "line_number": 297,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_breadcrumb_navigation() -> None:\n    \"\"\"Render breadcrumb navigation based on current page.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        current_page = get_current_page()\n        \n        # Build breadcrumb trail\n        breadcrumbs = [\"\ud83c\udfe0 Home\"]\n        if curre...",
        "suggested_refactor": "Extract UI rendering to render_breadcrumb_navigation_ui_layer() + Extract logging to render_breadcrumb_navigation_audit_layer()"
      },
      {
        "function_name": "render_client_fields",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 190,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_client_fields(self, client_data: Optional[Dict] = None):\n        \"\"\"Render complete client form with all fields.\"\"\"\n        if not self.st:\n            return True  # allow tests without streamlit\n        \n        with self.st.form(self.form_id):\n            self.st.markdown(f\"### {se...",
        "suggested_refactor": "Extract UI rendering to render_client_fields_ui_layer() + Extract logging to render_client_fields_audit_layer()"
      },
      {
        "function_name": "render_divider",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 204,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_divider(text: str = None) -> None:\n        \"\"\"Render a divider in the sidebar.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"--- {text or ''} ---\")\n            return\n        \n        if text:\n            st.sidebar.markdown(f\"---\\n**{text}**\")\n        else:\n            s...",
        "suggested_refactor": "Extract UI rendering to render_divider_ui_layer() + Extract logging to render_divider_audit_layer()"
      },
      {
        "function_name": "render_error_messages",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 375,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_error_messages(errors: list[str], icon: str = \"\u274c\"):\n    \"\"\"Render standardized error messages.\"\"\"\n    if st and errors:\n        for error in errors:\n            st.error(f\"{icon} {error}\")\n\n",
        "suggested_refactor": "Extract UI rendering to render_error_messages_ui_layer() + Extract logging to render_error_messages_audit_layer()"
      },
      {
        "function_name": "render_full_debug_dashboard",
        "file_path": "streamlit_extension/components/debug_widgets.py",
        "line_number": 366,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_full_debug_dashboard() -> None:\n    \"\"\"Render comprehensive debug dashboard with all tools.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"## \ud83d\udee0\ufe0f Debug Dashboard\")\n        \n        # Main debug sections\n        render_debug_panel()\n        \n        st....",
        "suggested_refactor": "Extract UI rendering to render_full_debug_dashboard_ui_layer() + Extract logging to render_full_debug_dashboard_audit_layer()"
      },
      {
        "function_name": "render_grid",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 124,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_grid(cards: List[Dict[str, Any]], columns: int = 2) -> None:\n        \"\"\"Render multiple cards in a grid layout.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            for card_data in cards:\n                print(f\"=== {card_data.get('title', 'Card')} ===\")\n                if 'content' in...",
        "suggested_refactor": "Extract UI rendering to render_grid_ui_layer() + Extract logging to render_grid_audit_layer()"
      },
      {
        "function_name": "render_info_card",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 329,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_info_card(title: str, content: str, type: str = \"info\") -> None:\n    \"\"\"\n    Render an information card with specified type.\n    \n    Args:\n        title: Card title\n        content: Card content\n        type: Card type (\"info\", \"success\", \"warning\", \"error\")\n    \"\"\"\n    if not STREAMLIT_...",
        "suggested_refactor": "Extract UI rendering to render_info_card_ui_layer() + Extract logging to render_info_card_audit_layer()"
      },
      {
        "function_name": "render_kpi_summary",
        "file_path": "streamlit_extension/components/analytics_cards.py",
        "line_number": 194,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_kpi_summary(kpis: Optional[Dict[str, Any]] = None) -> None:\n    \"\"\"\n    Render high-level KPI summary cards.\n    Alternative layout for executive dashboards.\n    \n    Args:\n        kpis: Dictionary containing KPI data\n              Expected keys: total_tasks, completed_tasks, focus_time_h...",
        "suggested_refactor": "Extract UI rendering to render_kpi_summary_ui_layer() + Extract logging to render_kpi_summary_audit_layer()"
      },
      {
        "function_name": "render_list",
        "file_path": "streamlit_extension/components/status_components.py",
        "line_number": 134,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_list(statuses: List[str], texts: Optional[List[str]] = None, \n                   show_icons: bool = True, size: str = \"normal\") -> None:\n        \"\"\"Render multiple status badges in a row.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            for i, status in enumerate(statuses):\n        ...",
        "suggested_refactor": "Extract UI rendering to render_list_ui_layer() + Extract logging to render_list_audit_layer()"
      },
      {
        "function_name": "render_login_page",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 487,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_login_page(auth_manager=None):\n        safe_ui(st.warning, \"Auth indispon\u00edvel; seguindo sem login.\")",
        "suggested_refactor": "Extract UI rendering to render_login_page_ui_layer()"
      },
      {
        "function_name": "render_login_page",
        "file_path": "streamlit_extension/auth/login_page.py",
        "line_number": 8,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_login_page():\n    \"\"\"Render login/registration page.\"\"\"\n    st.title(\"\ud83d\udd10 Authentication\")\n    \n    auth_manager = AuthManager()\n    \n    # Create tabs for login and registration\n    login_tab, register_tab = st.tabs([\"Login\", \"Register\"])\n    \n    with login_tab:\n        render_login_form(...",
        "suggested_refactor": "Extract UI rendering to render_login_page_ui_layer()"
      },
      {
        "function_name": "render_mini",
        "file_path": "streamlit_extension/components/status_components.py",
        "line_number": 272,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_mini(self, width: int = 100) -> None:\n        \"\"\"Render a compact version of the progress card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.percentage:.1f}%\")\n            return\n        \n        progress_html = f\"\"\"\n        <div style=\"display: inlin...",
        "suggested_refactor": "Extract UI rendering to render_mini_ui_layer() + Extract logging to render_mini_audit_layer()"
      },
      {
        "function_name": "render_page",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 498,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_page(page_id: str): \n        safe_ui(st.error, f\"Page '{page_id}' not available\")\n        return {\"error\": f\"Page system not available\"}",
        "suggested_refactor": "Extract UI rendering to render_page_ui_layer() + Extract logging to render_page_audit_layer()"
      },
      {
        "function_name": "render_page",
        "file_path": "streamlit_extension/pages/__init__.py",
        "line_number": 120,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_page(page_id: str):\n    \"\"\"Render a specific page by ID.\"\"\"\n    if page_id not in PAGE_REGISTRY:\n        return {\"error\": f\"Unknown page: {page_id}\"}\n    \n    page_info = PAGE_REGISTRY[page_id]\n    \n    if not page_info[\"available\"]:\n        return {\"error\": f\"Page '{page_id}' is not avai...",
        "suggested_refactor": "Extract UI rendering to render_page_ui_layer() + Extract logging to render_page_audit_layer()"
      },
      {
        "function_name": "render_sparkline_chart_card",
        "file_path": "streamlit_extension/components/analytics_cards.py",
        "line_number": 132,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_sparkline_chart_card(stats: Dict[str, Any]) -> None:\n    \"\"\"Render focus sparkline chart with fallback.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    validated_stats = _validate_stats_input(stats)\n    \n    try:\n        focus_series = validated_stats.get(\"focus_series\") or []\n...",
        "suggested_refactor": "Extract UI rendering to render_sparkline_chart_card_ui_layer() + Extract logging to render_sparkline_chart_card_audit_layer()"
      },
      {
        "function_name": "render_tab_content",
        "file_path": "streamlit_extension/components/layout_components.py",
        "line_number": 319,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def render_tab_content(self, tab_index: int):\n        \"\"\"Context manager for rendering content in a specific tab.\"\"\"\n        tab_objects = self.render()\n        \n        if STREAMLIT_AVAILABLE:\n            with tab_objects[tab_index]:\n                yield\n        else:\n            print(f\"[TAB ...",
        "suggested_refactor": "Extract UI rendering to render_tab_content_ui_layer() + Extract logging to render_tab_content_audit_layer()"
      },
      {
        "function_name": "render_timer_and_notifications",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 453,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_timer_and_notifications():\n    c1, c2 = st.columns([0.65, 0.35])\n    with c1:\n        st.markdown(\"### \u23f1\ufe0f Foco\")\n        st.session_state.timer.render()\n    with c2:\n        st.markdown(\"### \ud83d\udd14 Notifica\u00e7\u00f5es\")\n        NotificationToast.show(\n            NotificationData(\n                tit...",
        "suggested_refactor": "Extract UI rendering to render_timer_and_notifications_ui_layer()"
      },
      {
        "function_name": "render_timer_config",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 384,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_timer_config(current_config: Optional[Dict[str, Any]] = None, \n                       form_id: str = \"timer_config\") -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Render timer configuration form with sliders and checkboxes.\n    \n    Args:\n        current_config: Current timer configuration val...",
        "suggested_refactor": "Extract UI rendering to render_timer_config_ui_layer()"
      },
      {
        "function_name": "render_topbar",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 373,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_topbar(user: Optional[Dict[str, Any]]):\n    # Render main header\n    render_header()\n    \n    # System status section\n    col1, col2 = st.columns([0.75, 0.25])\n    with col2:\n        health = st.session_state.get(\"health\", {}) or {}\n        overall = health.get(\"overall\", {}) or {}\n      ...",
        "suggested_refactor": "Extract UI rendering to render_topbar_ui_layer()"
      },
      {
        "function_name": "render_topbar",
        "file_path": "streamlit_extension/components/layout_renderers.py",
        "line_number": 105,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_topbar(user: Optional[Dict[str, Any]]) -> None:\n    \"\"\"\n    Render the top bar with header and system status.\n    \n    Args:\n        user: Current user information dict\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        # Render main header\n        render_header(...",
        "suggested_refactor": "Extract UI rendering to render_topbar_ui_layer() + Extract logging to render_topbar_audit_layer()"
      },
      {
        "function_name": "render_user_menu",
        "file_path": "streamlit_extension/utils/auth.py",
        "line_number": 388,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def render_user_menu(auth_manager: GoogleOAuthManager):\n    \"\"\"Render user menu with profile and logout options.\"\"\"\n    if not auth_manager.is_authenticated():\n        return\n    \n    user = auth_manager.get_current_user()\n    if not user:\n        return\n    \n    with st.sidebar:\n        st.markdown...",
        "suggested_refactor": "Extract UI rendering to render_user_menu_ui_layer()"
      },
      {
        "function_name": "require_authentication",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 286,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def require_authentication(self) -> User:\n        \"\"\"Decorator/helper to require authentication for pages.\"\"\"\n        user = self.get_current_user()\n        if not user:\n            st.error(\"\ud83d\udd12 Authentication required. Please log in.\")\n            st.stop()\n        return user\n    ",
        "suggested_refactor": "Extract UI rendering to require_authentication_ui_layer()"
      },
      {
        "function_name": "require_permission",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 294,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def require_permission(self, permission: str) -> User:\n        \"\"\"Decorator/helper to require specific permission.\"\"\"\n        user = self.require_authentication()\n        if not user.has_permission(permission):\n            st.error(f\"\ud83d\udeab Access denied. Required permission: {permission}\")\n         ...",
        "suggested_refactor": "Extract UI rendering to require_permission_ui_layer()"
      },
      {
        "function_name": "require_role",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 302,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def require_role(self, role: str) -> User:\n        \"\"\"Decorator/helper to require specific role.\"\"\"\n        user = self.require_authentication()\n        if not user.has_role(role):\n            st.error(f\"\ud83d\udeab Access denied. Required role: {role}\")\n            st.stop()\n        return user\n    ",
        "suggested_refactor": "Extract UI rendering to require_role_ui_layer()"
      },
      {
        "function_name": "reset_error_statistics",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 638,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def reset_error_statistics():\n    \"\"\"Reset error statistics.\"\"\"\n    global_exception_handler.reset_error_stats()\n\n",
        "suggested_refactor": "Extract UI rendering to reset_error_statistics_ui_layer() + Extract logging to reset_error_statistics_audit_layer()"
      },
      {
        "function_name": "reset_error_stats",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 489,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def reset_error_stats(self):\n        \"\"\"Reset error statistics.\"\"\"\n        with self._stats_lock:\n            self.error_stats = {\n                \"total_errors\": 0,\n                \"errors_by_category\": {},\n                \"errors_by_severity\": {},\n                \"recent_errors\": [],\n         ...",
        "suggested_refactor": "Extract UI rendering to reset_error_stats_ui_layer() + Extract logging to reset_error_stats_audit_layer()"
      },
      {
        "function_name": "run_headless_mode",
        "file_path": "streamlit_extension/streamlit_app.py",
        "line_number": 135,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def run_headless_mode() -> None:\n    \"\"\"Run application in headless mode for testing.\"\"\"\n    logger.info(\"Running in headless mode - smoke test\")\n    \n    try:\n        epics = list_epics()\n        health = check_health()\n        logger.info(f\"Headless test - Epics: {len(epics)}, Health: {health.get(...",
        "suggested_refactor": "Extract UI rendering to run_headless_mode_ui_layer() + Extract logging to run_headless_mode_audit_layer()"
      },
      {
        "function_name": "safe_float",
        "file_path": "streamlit_extension/utils/data_utils.py",
        "line_number": 101,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_float(value: Any, default: float = 0.0) -> float:\n    \"\"\"\n    Safely convert value to float.\n    \n    Args:\n        value: Value to convert\n        default: Default value if conversion fails\n        \n    Returns:\n        Float value or default\n    \"\"\"\n    try:\n        return float(value)\n  ...",
        "suggested_refactor": "Extract UI rendering to safe_float_ui_layer() + Extract logging to safe_float_audit_layer()"
      },
      {
        "function_name": "safe_int",
        "file_path": "streamlit_extension/utils/data_utils.py",
        "line_number": 85,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_int(value: Any, default: int = 0) -> int:\n    \"\"\"\n    Safely convert value to integer.\n    \n    Args:\n        value: Value to convert\n        default: Default value if conversion fails\n        \n    Returns:\n        Integer value or default\n    \"\"\"\n    try:\n        return int(value)\n    exce...",
        "suggested_refactor": "Extract UI rendering to safe_int_ui_layer() + Extract logging to safe_int_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_error",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 83,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_streamlit_error(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display error message in Streamlit.\n    \n    Args:\n        message: Error message to display\n        container: Optional container to write to\n    \"\"\"\n    def _error():\n        if container:\n            contain...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_error_ui_layer() + Extract logging to safe_streamlit_error_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_info",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 99,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_streamlit_info(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display info message in Streamlit.\n    \n    Args:\n        message: Info message to display\n        container: Optional container to write to\n    \"\"\"\n    def _info():\n        if container:\n            container.i...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_info_ui_layer() + Extract logging to safe_streamlit_info_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_operation",
        "file_path": "streamlit_extension/components/data_providers.py",
        "line_number": 59,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def safe_streamlit_operation(func, *args, default_return=None, operation_name=None, **kwargs):\n        \"\"\"Fallback safe operation wrapper.\"\"\"\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            print(f\"\ud83d\udea8 OPERATION ERROR ({operation_name or 'unknown'})...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_warning",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 131,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_streamlit_warning(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display warning message in Streamlit.\n    \n    Args:\n        message: Warning message to display\n        container: Optional container to write to\n    \"\"\"\n    def _warning():\n        if container:\n           ...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_warning_ui_layer() + Extract logging to safe_streamlit_warning_audit_layer()"
      },
      {
        "function_name": "safe_streamlit_write",
        "file_path": "streamlit_extension/utils/ui_operations.py",
        "line_number": 67,
        "responsibilities": [
          "file_io",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_streamlit_write(content: Any, container: Any = None) -> None:\n    \"\"\"\n    Safely write content to Streamlit.\n    \n    Args:\n        content: Content to write\n        container: Optional container to write to\n    \"\"\"\n    def _write():\n        if container:\n            container.write(content...",
        "suggested_refactor": "Extract UI rendering to safe_streamlit_write_ui_layer()"
      },
      {
        "function_name": "safe_ui",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 36,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def safe_ui(fn: Callable[..., Any], *args, **kwargs) -> Any:\n    \"\"\"Executa uma opera\u00e7\u00e3o de UI somente se Streamlit estiver dispon\u00edvel.\"\"\"\n    if not is_ui():\n        return None\n    try:\n        return fn(*args, **kwargs)\n    except Exception as e:\n        # Evita derrubar a p\u00e1gina em erros de UI\n ...",
        "suggested_refactor": "Extract UI rendering to safe_ui_ui_layer() + Extract logging to safe_ui_audit_layer()"
      },
      {
        "function_name": "sanitize_display",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 796,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def sanitize_display(text: str, max_length: int = 1000) -> str:\n    \"\"\"Sanitize text for display.\"\"\"\n    return security_manager.sanitize_display_text(text, max_length)\n\n",
        "suggested_refactor": "Extract UI rendering to sanitize_display_ui_layer() + Extract validation to sanitize_display_validator()"
      },
      {
        "function_name": "sanitize_display_text",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 264,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def sanitize_display_text(self, text: str, max_length: int = 1000) -> str:\n        \"\"\"\n        Sanitize text for safe display in Streamlit UI.\n        \n        Args:\n            text: Text to display\n            max_length: Maximum length for display\n            \n        Returns:\n            Saf...",
        "suggested_refactor": "Extract UI rendering to sanitize_display_text_ui_layer() + Extract validation to sanitize_display_text_validator()"
      },
      {
        "function_name": "sanitize_form_inputs",
        "file_path": "streamlit_extension/utils/form_validation.py",
        "line_number": 84,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def sanitize_form_inputs(data: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Sanitiza todas as entradas string; preserva None e tipos primitivos.\n\n    Observa\u00e7\u00e3o: `validate_form` (se existir) roda ap\u00f3s sanitiza\u00e7\u00e3o.\n    \"\"\"\n    sanitized: Dict[str, Any] = {}\n    for key, value in data.items():\n        if...",
        "suggested_refactor": "Extract UI rendering to sanitize_form_inputs_ui_layer() + Extract validation to sanitize_form_inputs_validator()"
      },
      {
        "function_name": "sanitize_input",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 791,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def sanitize_input(value: str, field_name: str = \"input\") -> str:\n    \"\"\"Sanitize user input from forms.\"\"\"\n    return security_manager.sanitize_form_input(value, field_name)\n\n",
        "suggested_refactor": "Extract UI rendering to sanitize_input_ui_layer() + Extract validation to sanitize_input_validator()"
      },
      {
        "function_name": "security_event",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 427,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def security_event(self, component: str, operation: str, message: str, \n                      event_category: str, severity: str, **kwargs):\n        \"\"\"Log security event.\"\"\"\n        security_data = SecurityData(\n            event_category=event_category,\n            severity=severity,\n         ...",
        "suggested_refactor": "Extract UI rendering to security_event_ui_layer() + Extract logging to security_event_audit_layer()"
      },
      {
        "function_name": "session_has_key",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 234,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def session_has_key(key: str) -> bool:\n    \"\"\"\n    Check if session state has a specific key.\n    \n    Args:\n        key: Key to check\n        \n    Returns:\n        True if key exists, False otherwise\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return False\n    \n    return key in st.session_stat...",
        "suggested_refactor": "Extract UI rendering to session_has_key_ui_layer()"
      },
      {
        "function_name": "set",
        "file_path": "streamlit_extension/utils/redis_cache.py",
        "line_number": 449,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def set(self, key: str, value: Any, ttl: int = 900) -> bool:\n        \"\"\"\n        Set value in cache.\n        \n        Args:\n            key: Cache key\n            value: Value to cache\n            ttl: Time to live in seconds\n            \n        Returns:\n            True if successful, False ot...",
        "suggested_refactor": "Extract UI rendering to set_ui_layer() + Extract logging to set_audit_layer()"
      },
      {
        "function_name": "set_correlation_id",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 41,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def set_correlation_id(self, correlation_id: str) -> None:\n        \"\"\"Set correlation ID in current context\"\"\"\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            st.session_state[\"correlation_id\"] = correlation_id\n        else:\n            self._correlation_stora...",
        "suggested_refactor": "Extract UI rendering to set_correlation_id_ui_layer()"
      },
      {
        "function_name": "set_current_task",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 95,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def set_current_task(task: str) -> None:\n    \"\"\"Set the current task for the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    if task != \"No task selected\":\n        st.session_state.current_task = task",
        "suggested_refactor": "Extract UI rendering to set_current_task_ui_layer()"
      },
      {
        "function_name": "set_database_manager",
        "file_path": "streamlit_extension/database/health.py",
        "line_number": 27,
        "responsibilities": [
          "logging",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def set_database_manager(dbm: Optional[DatabaseManager]) -> None:\n    \"\"\"\n    Injeta uma inst\u00e2ncia de DatabaseManager (\u00fatil para testes) ou reseta quando None.\n    \"\"\"\n    global _DBM_INSTANCE\n    with _DBM_LOCK:\n        _DBM_INSTANCE = dbm\n        logger.debug(\"DatabaseManager singleton %s\", \"reset...",
        "suggested_refactor": "Extract database operations to set_database_manager_data_layer() + Extract logging to set_database_manager_audit_layer()"
      },
      {
        "function_name": "set_database_manager",
        "file_path": "streamlit_extension/database/schema.py",
        "line_number": 21,
        "responsibilities": [
          "logging",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def set_database_manager(dbm: Optional[DatabaseManager]) -> None:\n    \"\"\"\n    Injeta uma inst\u00e2ncia de ``DatabaseManager`` (\u00fatil para testes) ou reseta quando None.\n\n    Args:\n        dbm: Inst\u00e2ncia a ser utilizada como singleton; se None, limpa o singleton.\n    \"\"\"\n    global _DBM_INSTANCE\n    with ...",
        "suggested_refactor": "Extract database operations to set_database_manager_data_layer() + Extract logging to set_database_manager_audit_layer()"
      },
      {
        "function_name": "set_session_value",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 208,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def set_session_value(key: str, value: Any) -> None:\n    \"\"\"\n    Set a value in session state safely.\n    \n    Args:\n        key: Session state key\n        value: Value to set\n    \"\"\"\n    if STREAMLIT_AVAILABLE:\n        st.session_state[key] = value\n",
        "suggested_refactor": "Extract UI rendering to set_session_value_ui_layer()"
      },
      {
        "function_name": "setup_logging",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 616,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def setup_logging(log_dir: str = \"logs\", metrics_port: Optional[int] = None):\n    \"\"\"Setup global structured logging.\"\"\"\n    global _logger_instance\n    _logger_instance = StructuredLogger(\"tdd_framework\", log_dir)\n    \n    if metrics_port and PROMETHEUS_AVAILABLE:\n        _logger_instance.start_met...",
        "suggested_refactor": "Extract UI rendering to setup_logging_ui_layer() + Extract logging to setup_logging_audit_layer()"
      },
      {
        "function_name": "show",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 116,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def show(notification: Optional[NotificationData] = None, **kwargs):\n            def _show():\n                if notification and getattr(notification, \"message\", None):\n                    st.info(f\"\ud83d\udd14 {notification.message}\")\n                else:\n                    st.info(\"\ud83d\udd14 Notifica\u00e7\u00f5es...",
        "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
      },
      {
        "function_name": "show",
        "file_path": "streamlit_extension/components/fallback_components.py",
        "line_number": 116,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def show(notification: Optional[NotificationData] = None, **kwargs) -> None:\n        \"\"\"\n        Show notification toast fallback.\n        \n        Args:\n            notification: Notification data to display\n            **kwargs: Additional arguments (ignored in fallback)\n        \"\"\"\n        de...",
        "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
      },
      {
        "function_name": "show",
        "file_path": "streamlit_extension/components/dashboard_widgets.py",
        "line_number": 313,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def show(notification: NotificationData) -> None:\n        \"\"\"\n        Show a toast notification.\n        \n        Args:\n            notification: NotificationData object with notification details\n        \"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return\n        \n        # Type to style ...",
        "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
      },
      {
        "function_name": "show_error_dashboard",
        "file_path": "streamlit_extension/streamlit_app copy.py",
        "line_number": 219,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def show_error_dashboard(*args, **kwargs): safe_ui(st.error, \"\u274c Erro n\u00e3o tratado.\")",
        "suggested_refactor": "Extract UI rendering to show_error_dashboard_ui_layer() + Extract logging to show_error_dashboard_audit_layer()"
      },
      {
        "function_name": "show_error_dashboard",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 643,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def show_error_dashboard():\n    \"\"\"Show error dashboard in Streamlit.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    stats = get_error_statistics()\n    \n    st.subheader(\"\ud83d\udee1\ufe0f Error Monitoring Dashboard\")\n    \n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        st.metric(\n    ...",
        "suggested_refactor": "Extract UI rendering to show_error_dashboard_ui_layer() + Extract logging to show_error_dashboard_audit_layer()"
      },
      {
        "function_name": "shutdown",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 190,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def shutdown(self) -> None:\n        \"\"\"Desaloca inst\u00e2ncias e marca container como n\u00e3o inicializado.\"\"\"\n        self.clear_all_services()\n        self._initialized = False\n        self._logger.info(\"Service container shutdown\")\n",
        "suggested_refactor": "Extract UI rendering to shutdown_ui_layer() + Extract logging to shutdown_audit_layer()"
      },
      {
        "function_name": "start_timer",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 31,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def start_timer() -> None:\n    \"\"\"Start or resume the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = True\n    st.session_state.timer_start_time = datetime.now()\n\n",
        "suggested_refactor": "Extract UI rendering to start_timer_ui_layer()"
      },
      {
        "function_name": "stop_timer",
        "file_path": "streamlit_extension/components/sidebar/timer.py",
        "line_number": 53,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def stop_timer() -> None:\n    \"\"\"Stop and reset the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = False\n    st.session_state.timer_start_time = None\n    st.session_state.elapsed_seconds = 0\n\n",
        "suggested_refactor": "Extract UI rendering to stop_timer_ui_layer()"
      },
      {
        "function_name": "streamlit_error_boundary",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 555,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def streamlit_error_boundary(operation_name: str = \"operation\"):\n    \"\"\"\n    Context manager for error boundary around Streamlit operations.\n    \n    Args:\n        operation_name: Name of the operation for logging\n    \"\"\"\n    try:\n        yield\n    except Exception as e:\n        context = {\n        ...",
        "suggested_refactor": "Extract UI rendering to streamlit_error_boundary_ui_layer() + Extract logging to streamlit_error_boundary_audit_layer()"
      },
      {
        "function_name": "to_dict",
        "file_path": "streamlit_extension/models/task_models.py",
        "line_number": 370,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Converte para dicion\u00e1rio\"\"\"\n        return {\n            'epic_id': self.epic_id,\n            'execution_order': self.execution_order,\n            'parallel_batches': self.parallel_batches,\n            'total_tasks': self.total_tasks,\n            '...",
        "suggested_refactor": "Extract UI rendering to to_dict_ui_layer() + Extract logging to to_dict_audit_layer()"
      },
      {
        "function_name": "to_dict",
        "file_path": "streamlit_extension/middleware/context_manager.py",
        "line_number": 32,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"user_id\": self.user_id,\n            \"session_id\": self.session_id,\n            \"request_id\": self.request_id,\n            \"correlation_id\": self.correlation_id,\n            \"ip_address\": self.ip_address,\n            \"user_agent\":...",
        "suggested_refactor": "Extract UI rendering to to_dict_ui_layer()"
      },
      {
        "function_name": "to_dict",
        "file_path": "streamlit_extension/auth/user_model.py",
        "line_number": 68,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def to_dict(self) -> dict:\n        \"\"\"Convert to dictionary.\"\"\"\n        return {\n            \"id\": self.id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"role\": self.role.value,\n            \"is_active\": self.is_active,\n            \"created_at\": self.created...",
        "suggested_refactor": "Extract UI rendering to to_dict_ui_layer()"
      },
      {
        "function_name": "toggle_debug_mode",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 269,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def toggle_debug_mode() -> None:\n    \"\"\"Toggle debug mode on/off.\"\"\"\n    current = is_debug_mode()\n    set_session_value(\"show_debug_info\", not current)\n",
        "suggested_refactor": "Extract UI rendering to toggle_debug_mode_ui_layer() + Extract logging to toggle_debug_mode_audit_layer()"
      },
      {
        "function_name": "transaction",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 132,
        "responsibilities": [
          "logging",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def transaction(self):\n        \"\"\"Context manager for database transactions.\"\"\"\n        try:\n            # Start transaction (implementation depends on database manager)\n            yield\n            # Commit if no exception\n        except Exception as e:\n            # Rollback on exception\n    ...",
        "suggested_refactor": "Extract database operations to transaction_data_layer() + Extract logging to transaction_audit_layer()"
      },
      {
        "function_name": "transaction_scope",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 198,
        "responsibilities": [
          "logging",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def transaction_scope(self):\n        \"\"\"\n        Escopo transacional real: usa a transa\u00e7\u00e3o da API modular ou do DatabaseManager.\n        Todos os servi\u00e7os usados dentro do bloco compartilham o mesmo contexto.\n        \"\"\"\n        if self.use_modular_api:\n            cm = db_connection.transaction...",
        "suggested_refactor": "Extract database operations to transaction_scope_data_layer() + Extract logging to transaction_scope_audit_layer()"
      },
      {
        "function_name": "update_bucket_state",
        "file_path": "streamlit_extension/middleware/rate_limiting/storage.py",
        "line_number": 172,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def update_bucket_state(self, key: str, *, tokens: float, last_refill: float) -> None:\n        with self._lock, self._conn:\n            self._conn.execute(\n                \"\"\"\n                INSERT INTO rl_buckets(key, tokens, last_refill) VALUES(?,?,?)\n                ON CONFLICT(key) DO UPDAT...",
        "suggested_refactor": "Extract database operations to update_bucket_state_data_layer()"
      },
      {
        "function_name": "update_health_status",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 319,
        "responsibilities": [
          "auth",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def update_health_status(health: Dict[str, Any]) -> None:\n    \"\"\"Update health status in session state.\"\"\"\n    set_session_value(\"health\", health)\n",
        "suggested_refactor": "Extract database operations to update_health_status_data_layer()"
      },
      {
        "function_name": "update_task_status",
        "file_path": "streamlit_extension/utils/database.py",
        "line_number": 1105,
        "responsibilities": [
          "logging",
          "database"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def update_task_status(self, task_id: int, status: str, tdd_phase: Optional[str] = None) -> bool:\n        \"\"\"Update task status and TDD phase with cache invalidation.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n             ...",
        "suggested_refactor": "Extract database operations to update_task_status_data_layer() + Extract logging to update_task_status_audit_layer()"
      },
      {
        "function_name": "validate_and_submit",
        "file_path": "streamlit_extension/components/form_components.py",
        "line_number": 170,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_and_submit(self, form_data: Dict, validation_func: Callable[[Dict], list[str]]):\n        \"\"\"Validate form data and handle submission.\"\"\"\n        errors = validation_func(form_data)\n        if errors:\n            self.display_errors(errors)\n            return False, errors\n        re...",
        "suggested_refactor": "Extract UI rendering to validate_and_submit_ui_layer() + Extract logging to validate_and_submit_audit_layer()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/client_service.py",
        "line_number": 218,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate client-specific business rules.\"\"\"\n        errors = []\n        \n        # Email format validation\n        if 'email' in data and data['email']:\n            email_pattern = ValidationRules.EMAIL_PAT...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer()"
      },
      {
        "function_name": "validate_business_rules",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 180,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"\n        Validate business-specific rules. Override in subclasses.\n        \n        Args:\n            data: Data to validate\n            \n        Returns:\n            List of validation errors\n        \"\"\"\n ...",
        "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer()"
      },
      {
        "function_name": "validate_config",
        "file_path": "streamlit_extension/config/env_manager.py",
        "line_number": 67,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_config(self) -> bool:\n        \"\"\"Validate configuration completeness and format.\"\"\"\n        required = {\n            \"database\": [\"framework_db_path\", \"timer_db_path\"],\n            \"redis\": [\"host\", \"port\"],\n            \"security\": [\"enable_csrf\", \"enable_rate_limiting\"],\n        }\n...",
        "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract validation to validate_config_validator()"
      },
      {
        "function_name": "validate_csrf_token",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 260,
        "responsibilities": [
          "auth",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_csrf_token(self, token: str) -> bool:\n        \"\"\"Validate CSRF token for current session.\"\"\"\n        session = self.get_current_session()\n        if not session:\n            return False\n\n        return self.csrf_protection.validate_token(token, session.session_id)\n",
        "suggested_refactor": "Extract validation to validate_csrf_token_validator()"
      },
      {
        "function_name": "validate_field",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 369,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_field(field_name: str, field_value: Any, field_schema: Any, path: str = \"\"):\n        current_path = f\"{path}.{field_name}\" if path else field_name\n        \n        if isinstance(field_schema, dict):\n            if \"type\" in field_schema:\n                expected_type = field_schema[...",
        "suggested_refactor": "Extract UI rendering to validate_field_ui_layer() + Extract logging to validate_field_audit_layer()"
      },
      {
        "function_name": "validate_form",
        "file_path": "streamlit_extension/utils/security.py",
        "line_number": 801,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def validate_form(data: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"Validate form data for security threats.\"\"\"\n    return security_manager.validate_form_data(data)\n\n",
        "suggested_refactor": "Extract UI rendering to validate_form_ui_layer() + Extract validation to validate_form_validator()"
      },
      {
        "function_name": "validate_integration_health",
        "file_path": "streamlit_extension/integration/existing_system.py",
        "line_number": 324,
        "responsibilities": [
          "database",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_integration_health(self) -> Dict[str, Any]:\n        \"\"\"\n        Check health of all integrations.\n        \n        Returns:\n            Health status of each integration component\n        \"\"\"\n        health = {\n            \"database_manager\": DATABASE_UTILS_AVAILABLE and self.db_man...",
        "suggested_refactor": "Extract database operations to validate_integration_health_data_layer() + Extract validation to validate_integration_health_validator()"
      },
      {
        "function_name": "validate_required_fields",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 160,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_required_fields(self, data: Dict[str, Any], required_fields: List[str]) -> List[ServiceError]:\n        \"\"\"Validate that required fields are present and not empty.\"\"\"\n        errors = []\n        \n        for field in required_fields:\n            if field not in data:\n                ...",
        "suggested_refactor": "Extract UI rendering to validate_required_fields_ui_layer() + Extract logging to validate_required_fields_audit_layer()"
      },
      {
        "function_name": "validate_required_fields",
        "file_path": "streamlit_extension/utils/form_validation.py",
        "line_number": 31,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def validate_required_fields(data: Dict[str, Any], required_fields: Iterable[str]) -> List[str]:\n    \"\"\"Valida se campos obrigat\u00f3rios existem e n\u00e3o s\u00e3o vazios/whitespace.\"\"\"\n    errors: List[str] = []\n    for field in required_fields:\n        value = data.get(field)\n        if value is None:\n       ...",
        "suggested_refactor": "Extract UI rendering to validate_required_fields_ui_layer() + Extract logging to validate_required_fields_audit_layer()"
      },
      {
        "function_name": "validate_services",
        "file_path": "streamlit_extension/services/service_container.py",
        "line_number": 253,
        "responsibilities": [
          "logging",
          "validation"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validate_services(self) -> Dict[str, bool]:\n        \"\"\"\n        Verifica se todos os servi\u00e7os podem ser instanciados.\n        N\u00e3o persiste as inst\u00e2ncias quando validate_only=True.\n        \"\"\"\n        results: Dict[str, bool] = {}\n        for name in self._service_classes.keys():\n            ...",
        "suggested_refactor": "Extract logging to validate_services_audit_layer() + Extract validation to validate_services_validator()"
      },
      {
        "function_name": "validate_session_state",
        "file_path": "streamlit_extension/utils/session_manager.py",
        "line_number": 354,
        "responsibilities": [
          "auth",
          "network"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def validate_session_state() -> Dict[str, Any]:\n    \"\"\"Validate session state integrity.\"\"\"\n    issues = []\n    \n    # Check required keys\n    required_keys = [\"config\", \"timer\", \"current_page\"]\n    for key in required_keys:\n        if not session_has_key(key):\n            issues.append(f\"Missing re...",
        "suggested_refactor": ""
      },
      {
        "function_name": "validate_streamlit_config",
        "file_path": "streamlit_extension/utils/validators.py",
        "line_number": 134,
        "responsibilities": [
          "validation",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def validate_streamlit_config(config: 'StreamlitConfig') -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate StreamlitConfig object.\n    \n    Args:\n        config: StreamlitConfig instance\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    if not StreamlitConfig:\n        return Fa...",
        "suggested_refactor": "Extract UI rendering to validate_streamlit_config_ui_layer() + Extract validation to validate_streamlit_config_validator()"
      },
      {
        "function_name": "validate_text_length",
        "file_path": "streamlit_extension/utils/form_validation.py",
        "line_number": 57,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "def validate_text_length(text: str, min_len: int, max_len: int, field_name: str) -> List[str]:\n    \"\"\"Validate text length constraints.\"\"\"\n    errors: List[str] = []\n    text = text or \"\"\n    if len(text) < min_len:\n        errors.append(f\"{field_name} must be at least {min_len} characters\")\n    if ...",
        "suggested_refactor": "Extract UI rendering to validate_text_length_ui_layer() + Extract logging to validate_text_length_audit_layer()"
      },
      {
        "function_name": "validation_error",
        "file_path": "streamlit_extension/services/base.py",
        "line_number": 78,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def validation_error(cls, message: str, field: Optional[str] = None) -> 'ServiceResult[T]':\n        \"\"\"Create a validation error result.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.VALIDATION_ERROR,\n            message=message,\n            field=field\n        )\n     ...",
        "suggested_refactor": "Extract UI rendering to validation_error_ui_layer() + Extract logging to validation_error_audit_layer()"
      },
      {
        "function_name": "warning",
        "file_path": "streamlit_extension/utils/structured_logger.py",
        "line_number": 415,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def warning(self, component: str, operation: str, message: str, **kwargs):\n        \"\"\"Log warning message.\"\"\"\n        return self.log(LogLevel.WARNING, EventType.APPLICATION, component, operation, message, **kwargs)\n    ",
        "suggested_refactor": "Extract UI rendering to warning_ui_layer() + Extract logging to warning_audit_layer()"
      },
      {
        "function_name": "warning",
        "file_path": "streamlit_extension/utils/correlation_logging.py",
        "line_number": 140,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def warning(self, operation: str, message: str, **kwargs: Any) -> None:\n        \"\"\"Log warning level operation\"\"\"\n        self.log_operation(operation, \"WARNING\", message, **kwargs)\n",
        "suggested_refactor": "Extract UI rendering to warning_ui_layer() + Extract logging to warning_audit_layer()"
      },
      {
        "function_name": "wrapper",
        "file_path": "streamlit_extension/utils/auth_manager.py",
        "line_number": 445,
        "responsibilities": [
          "auth",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        \n        session = auth_manager.get_current_session()\n        if not session:\n            st.error(\"\ud83d\udd12 Session expired. Please l...",
        "suggested_refactor": "Extract UI rendering to wrapper_ui_layer()"
      },
      {
        "function_name": "wrapper",
        "file_path": "streamlit_extension/utils/global_exception_handler.py",
        "line_number": 199,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def wrapper(*args, **kwargs):\n            try:\n                return f(*args, **kwargs)\n            except Exception as e:\n                handler = GlobalExceptionHandler()\n                \n                # Prepare context\n                error_context = {\n                    \"function_na...",
        "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
      },
      {
        "function_name": "wrapper",
        "file_path": "streamlit_extension/utils/exception_handler.py",
        "line_number": 530,
        "responsibilities": [
          "logging",
          "ui"
        ],
        "severity": "MEDIUM",
        "code_snippet": "        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                context = {\n                    \"function\": func.__name__,\n                    \"module\": func.__module__,\n                    \"args_count\": len(args)...",
        "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
      }
    ]
  },
  "responsibility_frequency": {
    "logging": 599,
    "ui": 705,
    "auth": 285,
    "network": 245,
    "file_io": 67,
    "database": 252,
    "validation": 116,
    "business_logic": 72
  },
  "top_violations": [
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 99,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def __init__(self, \n                 framework_db_path: str, \n                 timer_db_path: Optional[str] = None,\n                 enable_cache: bool = True,\n                 cache_debug: bool = False):\n        \"\"\"\n        Initialize cached database manager.\n        \n        Args:\n            ...",
      "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_calculate_daily_focus_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 320,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_daily_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[str, float]:\n        \"\"\"Calculate daily focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        daily_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n     ...",
      "suggested_refactor": "Extract UI rendering to _calculate_daily_focus_trends_ui_layer() + Extract logging to _calculate_daily_focus_trends_audit_layer() + Extract business logic to _calculate_daily_focus_trends_processor()"
    },
    {
      "function_name": "_calculate_daily_metrics",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 436,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_daily_metrics(self, timer_sessions: List[Dict], tasks: List[Dict]) -> List[Dict[str, Any]]:\n        \"\"\"Calculate daily metrics for the report.\"\"\"\n        \n        from collections import defaultdict\n        daily_data = defaultdict(lambda: {\n            \"date\": \"\",\n            \"se...",
      "suggested_refactor": "Extract UI rendering to _calculate_daily_metrics_ui_layer() + Extract logging to _calculate_daily_metrics_audit_layer() + Extract business logic to _calculate_daily_metrics_processor()"
    },
    {
      "function_name": "_calculate_elapsed_time",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 927,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_elapsed_time(self, session: Dict[str, Any]) -> int:\n        \"\"\"Calculate elapsed time for active session.\"\"\"\n        start_time = session['start_time']\n        was_utc_format = False\n        \n        if isinstance(start_time, str):\n            # Normaliza ISO 8601 com sufixo 'Z' (...",
      "suggested_refactor": "Extract UI rendering to _calculate_elapsed_time_ui_layer() + Extract logging to _calculate_elapsed_time_audit_layer() + Extract business logic to _calculate_elapsed_time_processor()"
    },
    {
      "function_name": "_calculate_hourly_focus_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 340,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_hourly_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[int, float]:\n        \"\"\"Calculate hourly focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        hourly_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n  ...",
      "suggested_refactor": "Extract UI rendering to _calculate_hourly_focus_trends_ui_layer() + Extract logging to _calculate_hourly_focus_trends_audit_layer() + Extract business logic to _calculate_hourly_focus_trends_processor()"
    },
    {
      "function_name": "_call",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 298,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _call():\n        try:\n            if user_id is not None:\n                return get_user_stats(user_id)  # type: ignore[call-arg]\n        except TypeError:\n            try:\n                return get_user_stats(user_id=user_id)  # type: ignore[call-arg]\n            except TypeError:\n       ...",
      "suggested_refactor": "Extract UI rendering to _call_ui_layer() + Extract logging to _call_audit_layer()"
    },
    {
      "function_name": "_cleanup_old_backups",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 397,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _cleanup_old_backups(self) -> None:\n        \"\"\"Clean up old backups based on retention policies.\"\"\"\n        current_time = datetime.now()\n        \n        # Count backups by type\n        auto_backups = []\n        manual_backups = []\n        \n        for backup_info in self._backup_index.valu...",
      "suggested_refactor": "Extract database operations to _cleanup_old_backups_data_layer() + Extract UI rendering to _cleanup_old_backups_ui_layer() + Extract logging to _cleanup_old_backups_audit_layer()"
    },
    {
      "function_name": "_configure_streamlit_dos_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 164,
      "responsibilities": [
        "auth",
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _configure_streamlit_dos_protection(self):\n        \"\"\"Configure DoS protection for Streamlit operations.\"\"\"\n        if not self.dos_protector:\n            return\n        \n        # Add circuit breakers for critical operations\n        try:\n            from circuit_breaker import CircuitBreake...",
      "suggested_refactor": "Extract UI rendering to _configure_streamlit_dos_protection_ui_layer() + Extract logging to _configure_streamlit_dos_protection_audit_layer()"
    },
    {
      "function_name": "_create_backup",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 117,
      "responsibilities": [
        "logging",
        "network",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_backup(self, backup_name: str, backup_type: BackupType, description: str) -> Optional[BackupInfo]:\n        \"\"\"Create a backup with specified parameters.\"\"\"\n        backup_file = self.backup_dir / f\"{backup_name}.zip\"\n        \n        try:\n            with zipfile.ZipFile(backup_file,...",
      "suggested_refactor": "Extract UI rendering to _create_backup_ui_layer() + Extract logging to _create_backup_audit_layer()"
    },
    {
      "function_name": "_create_log_entry",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 299,
      "responsibilities": [
        "ui",
        "business_logic",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_log_entry(self, level: LogLevel, event_type: EventType, \n                         component: str, operation: str, message: str,\n                         extra_data: Optional[Dict[str, Any]] = None,\n                         performance_data: Optional[PerformanceData] = None,\n         ...",
      "suggested_refactor": "Extract UI rendering to _create_log_entry_ui_layer() + Extract logging to _create_log_entry_audit_layer() + Extract business logic to _create_log_entry_processor()"
    },
    {
      "function_name": "_create_service",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 303,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_service(self, service_name: str, validate_only: bool = False) -> BaseService:\n        if service_name not in self._service_classes:\n            raise ServiceError(f\"Unknown service: {service_name}\")\n\n        cls = self._service_classes[service_name]\n        try:\n            if self.u...",
      "suggested_refactor": "Extract database operations to _create_service_data_layer() + Extract UI rendering to _create_service_ui_layer() + Extract logging to _create_service_audit_layer() + Extract validation to _create_service_validator()"
    },
    {
      "function_name": "_delete_from_disk",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 513,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _delete_from_disk(self, cache_key: str) -> bool:\n        \"\"\"Delete value from disk cache.\"\"\"\n        if not self.cache_dir:\n            return False\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(cache_ke...",
      "suggested_refactor": "Extract database operations to _delete_from_disk_data_layer() + Extract UI rendering to _delete_from_disk_ui_layer() + Extract logging to _delete_from_disk_audit_layer() + Extract validation to _delete_from_disk_validator()"
    }
  ],
  "all_violations": [
    {
      "function_name": "safe_ui",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 36,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_ui(fn: Callable[..., Any], *args, **kwargs) -> Any:\n    \"\"\"Executa uma opera\u00e7\u00e3o de UI somente se Streamlit estiver dispon\u00edvel.\"\"\"\n    if not is_ui():\n        return None\n    try:\n        return fn(*args, **kwargs)\n    except Exception as e:\n        # Evita derrubar a p\u00e1gina em erros de UI\n ...",
      "suggested_refactor": "Extract UI rendering to safe_ui_ui_layer() + Extract logging to safe_ui_audit_layer()"
    },
    {
      "function_name": "_clear_caches",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 265,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _clear_caches():\n    if not is_ui():\n        return\n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        cfg = st.session_state.get(\"config\") if is_ui() else None\n        if cfg an...",
      "suggested_refactor": "Extract UI rendering to _clear_caches_ui_layer() + Extract logging to _clear_caches_audit_layer()"
    },
    {
      "function_name": "fetch_user_stats",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 297,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def fetch_user_stats(user_id: Optional[int] = None) -> Dict[str, Any]:\n    def _call():\n        try:\n            if user_id is not None:\n                return get_user_stats(user_id)  # type: ignore[call-arg]\n        except TypeError:\n            try:\n                return get_user_stats(user_id=u...",
      "suggested_refactor": "Extract UI rendering to fetch_user_stats_ui_layer() + Extract logging to fetch_user_stats_audit_layer()"
    },
    {
      "function_name": "initialize_session_state",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 334,
      "responsibilities": [
        "ui",
        "auth",
        "network",
        "file_io",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def initialize_session_state():\n    if not is_ui():\n        return\n\n    if EXC_AVAILABLE and not st.session_state.get(\"exception_handler_installed\"):\n        install_global_exception_handler()\n        st.session_state.exception_handler_installed = True\n\n    if CONFIG_AVAILABLE and \"config\" not in st...",
      "suggested_refactor": "Extract UI rendering to initialize_session_state_ui_layer() + Extract logging to initialize_session_state_audit_layer()"
    },
    {
      "function_name": "render_topbar",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 373,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_topbar(user: Optional[Dict[str, Any]]):\n    # Render main header\n    render_header()\n    \n    # System status section\n    col1, col2 = st.columns([0.75, 0.25])\n    with col2:\n        health = st.session_state.get(\"health\", {}) or {}\n        overall = health.get(\"overall\", {}) or {}\n      ...",
      "suggested_refactor": "Extract UI rendering to render_topbar_ui_layer()"
    },
    {
      "function_name": "render_heatmap_and_tasks",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 403,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "file_io",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_heatmap_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]):\n    left, right = st.columns([1.2, 1.0])\n    with left:\n        ProductivityHeatmap.render(activity_data={})\n    with right:\n        if not epics:\n            st.info(\"Nenhum \u00e9pico dispon\u00edvel.\")\n            r...",
      "suggested_refactor": "Extract database operations to render_heatmap_and_tasks_data_layer() + Extract UI rendering to render_heatmap_and_tasks_ui_layer() + Extract logging to render_heatmap_and_tasks_audit_layer()"
    },
    {
      "function_name": "render_timer_and_notifications",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 453,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_timer_and_notifications():\n    c1, c2 = st.columns([0.65, 0.35])\n    with c1:\n        st.markdown(\"### \u23f1\ufe0f Foco\")\n        st.session_state.timer.render()\n    with c2:\n        st.markdown(\"### \ud83d\udd14 Notifica\u00e7\u00f5es\")\n        NotificationToast.show(\n            NotificationData(\n                tit...",
      "suggested_refactor": "Extract UI rendering to render_timer_and_notifications_ui_layer()"
    },
    {
      "function_name": "render_debug_panel",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 469,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_debug_panel():\n    with st.expander(\"\ud83d\udee0\ufe0f Debug / Telemetria\", expanded=False):\n        st.json(\n            {\n                \"health\": st.session_state.get(\"health\"),\n                \"error_stats\": safe_streamlit_operation(get_error_statistics, default_return={}),  # type: ignore\n        ...",
      "suggested_refactor": "Extract UI rendering to render_debug_panel_ui_layer() + Extract logging to render_debug_panel_audit_layer()"
    },
    {
      "function_name": "render_current_page",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 505,
      "responsibilities": [
        "auth",
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_current_page(user: Dict[str, Any]):\n    \"\"\"Render the current page based on session state navigation.\"\"\"\n    current_page = st.session_state.get(\"current_page\", \"Dashboard\")\n    \n    # DEBUG: Show current navigation state\n    st.sidebar.write(f\"\ud83d\udd0d DEBUG: Current page = {current_page}\")\n   ...",
      "suggested_refactor": "Extract UI rendering to render_current_page_ui_layer() + Extract logging to render_current_page_audit_layer()"
    },
    {
      "function_name": "render_dashboard_content",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 541,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_dashboard_content(user: Dict[str, Any]):\n    \"\"\"Render the default dashboard content.\"\"\"\n    # Linhas principais do dashboard\n    with streamlit_error_boundary(\"analytics_row\"):\n        stats = fetch_user_stats(user.get(\"id\") if isinstance(user, dict) else None)\n        render_analytics_r...",
      "suggested_refactor": "Extract UI rendering to render_dashboard_content_ui_layer() + Extract logging to render_dashboard_content_audit_layer()"
    },
    {
      "function_name": "main",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 557,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def main():\n    # Headless \u2192 smoke test e sair\n    if not is_ui():\n        print(\"\u26a0\ufe0f Streamlit n\u00e3o dispon\u00edvel \u2014 headless smoke test:\")\n        if DB_AVAILABLE:\n            try:\n                print(\" - list_epics():\", len(list_epics()))\n                print(\" - health:\", check_health())\n          ...",
      "suggested_refactor": "Extract UI rendering to main_ui_layer() + Extract logging to main_audit_layer()"
    },
    {
      "function_name": "_call",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 298,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _call():\n        try:\n            if user_id is not None:\n                return get_user_stats(user_id)  # type: ignore[call-arg]\n        except TypeError:\n            try:\n                return get_user_stats(user_id=user_id)  # type: ignore[call-arg]\n            except TypeError:\n       ...",
      "suggested_refactor": "Extract UI rendering to _call_ui_layer() + Extract logging to _call_audit_layer()"
    },
    {
      "function_name": "safe_streamlit_operation",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 196,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def safe_streamlit_operation(func: Callable[..., Any], *args,\n                                 default_return=None, operation_name=None, label=None, **kwargs):\n        \"\"\"Execu\u00e7\u00e3o protegida, ciente de headless/produ\u00e7\u00e3o.\"\"\"\n        try:\n            return func(*args, **kwargs)\n        except Exce...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
    },
    {
      "function_name": "show_error_dashboard",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 219,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def show_error_dashboard(*args, **kwargs): safe_ui(st.error, \"\u274c Erro n\u00e3o tratado.\")",
      "suggested_refactor": "Extract UI rendering to show_error_dashboard_ui_layer() + Extract logging to show_error_dashboard_audit_layer()"
    },
    {
      "function_name": "render_login_page",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 487,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_login_page(auth_manager=None):\n        safe_ui(st.warning, \"Auth indispon\u00edvel; seguindo sem login.\")",
      "suggested_refactor": "Extract UI rendering to render_login_page_ui_layer()"
    },
    {
      "function_name": "render_page",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 498,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_page(page_id: str): \n        safe_ui(st.error, f\"Page '{page_id}' not available\")\n        return {\"error\": f\"Page system not available\"}",
      "suggested_refactor": "Extract UI rendering to render_page_ui_layer() + Extract logging to render_page_audit_layer()"
    },
    {
      "function_name": "show",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 116,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def show(notification: Optional[NotificationData] = None, **kwargs):\n            def _show():\n                if notification and getattr(notification, \"message\", None):\n                    st.info(f\"\ud83d\udd14 {notification.message}\")\n                else:\n                    st.info(\"\ud83d\udd14 Notifica\u00e7\u00f5es...",
      "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
    },
    {
      "function_name": "_show",
      "file_path": "streamlit_extension/streamlit_app copy.py",
      "line_number": 117,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "            def _show():\n                if notification and getattr(notification, \"message\", None):\n                    st.info(f\"\ud83d\udd14 {notification.message}\")\n                else:\n                    st.info(\"\ud83d\udd14 Notifica\u00e7\u00f5es indispon\u00edveis.\")",
      "suggested_refactor": "Extract UI rendering to _show_ui_layer() + Extract logging to _show_audit_layer()"
    },
    {
      "function_name": "setup_application",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 90,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def setup_application() -> None:\n    \"\"\"Setup application environment and dependencies.\"\"\"\n    initialize_session_state()\n    logger.info(\"Session state initialized successfully\")\n",
      "suggested_refactor": "Extract UI rendering to setup_application_ui_layer() + Extract logging to setup_application_audit_layer()"
    },
    {
      "function_name": "authenticate_user",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 95,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def authenticate_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Handle user authentication.\"\"\"\n    if not is_ui():\n        return {\"name\": \"Headless\"}\n    \n    if not is_user_authenticated():\n        try:\n            render_login_page()\n            return None  # Not authenticated\n        except TypeErr...",
      "suggested_refactor": "Extract UI rendering to authenticate_user_ui_layer() + Extract logging to authenticate_user_audit_layer()"
    },
    {
      "function_name": "render_application_ui",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 111,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_application_ui(user: Dict[str, Any]) -> None:\n    \"\"\"Render the main application UI components.\"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        # Render sidebar navigation\n        sidebar_state = render_sidebar()\n        logger.debug(f\"Sidebar rendered with state: {type(sideba...",
      "suggested_refactor": "Extract UI rendering to render_application_ui_ui_layer() + Extract logging to render_application_ui_audit_layer()"
    },
    {
      "function_name": "run_headless_mode",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 135,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def run_headless_mode() -> None:\n    \"\"\"Run application in headless mode for testing.\"\"\"\n    logger.info(\"Running in headless mode - smoke test\")\n    \n    try:\n        epics = list_epics()\n        health = check_health()\n        logger.info(f\"Headless test - Epics: {len(epics)}, Health: {health.get(...",
      "suggested_refactor": "Extract UI rendering to run_headless_mode_ui_layer() + Extract logging to run_headless_mode_audit_layer()"
    },
    {
      "function_name": "main",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 153,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def main() -> None:\n    \"\"\"\n    Main orchestrator function - delegates all functionality to specialized modules.\n    \n    This function serves as the single entry point and coordinates between:\n    - Session management\n    - Authentication\n    - UI rendering \n    - Page management\n    - Debug tools\n...",
      "suggested_refactor": "Extract UI rendering to main_ui_layer() + Extract logging to main_audit_layer()"
    },
    {
      "function_name": "check_orchestrator_health",
      "file_path": "streamlit_extension/streamlit_app.py",
      "line_number": 195,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def check_orchestrator_health() -> Dict[str, Any]:\n    \"\"\"Check health of all orchestrator dependencies.\"\"\"\n    return {\n        \"streamlit_helpers_available\": True,\n        \"session_manager_available\": True,\n        \"exception_handler_available\": True,\n        \"sidebar_available\": True,\n        \"la...",
      "suggested_refactor": "Extract UI rendering to check_orchestrator_health_ui_layer()"
    },
    {
      "function_name": "get_database_manager",
      "file_path": "streamlit_extension/database/database_singleton.py",
      "line_number": 29,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_database_manager() -> DatabaseManager:\n    \"\"\"\n    Thread-safe singleton DatabaseManager (double-checked locking).\n    \n    CANONICAL IMPLEMENTATION - replaces all duplicate _db() functions.\n    \n    Returns:\n        DatabaseManager: Singleton instance\n        \n    Thread Safety:\n        Use...",
      "suggested_refactor": "Extract database operations to get_database_manager_data_layer() + Extract UI rendering to get_database_manager_ui_layer()"
    },
    {
      "function_name": "_new_sqlite_connection",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 55,
      "responsibilities": [
        "database",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _new_sqlite_connection() -> sqlite3.Connection:\n    \"\"\"\n    Cria uma nova conex\u00e3o SQLite com configura\u00e7\u00f5es padr\u00e3o do m\u00f3dulo.\n    \"\"\"\n    conn = sqlite3.connect(\n        _resolve_db_path(),\n        detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES,\n        # Seguran\u00e7a: cada thread tem...",
      "suggested_refactor": "Extract database operations to _new_sqlite_connection_data_layer() + Extract validation to _new_sqlite_connection_validator()"
    },
    {
      "function_name": "get_connection",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 93,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_connection() -> Any:\n    \"\"\"Obt\u00e9m uma conex\u00e3o do manager atual.\"\"\"\n    return _db().get_connection()",
      "suggested_refactor": "Extract database operations to get_connection_data_layer()"
    },
    {
      "function_name": "get_connection_metrics",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 418,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_connection_metrics() -> Dict[str, Any]:\n    \"\"\"Retorna m\u00e9tricas de performance do pool e cache.\"\"\"\n    return _optimized_pool.get_performance_metrics()\n",
      "suggested_refactor": "Extract database operations to get_connection_metrics_data_layer() + Extract UI rendering to get_connection_metrics_ui_layer()"
    },
    {
      "function_name": "_evict_if_needed",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 195,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _evict_if_needed(self) -> None:\n        # Evict LRU enquanto exceder max_connections\n        while len(self._pool) > self.max_connections and self._lru_threads:\n            victim_tid = self._lru_threads.popleft()\n            info = self._pool.pop(victim_tid, None)\n            if info:\n     ...",
      "suggested_refactor": "Extract UI rendering to _evict_if_needed_ui_layer() + Extract logging to _evict_if_needed_audit_layer()"
    },
    {
      "function_name": "_cleanup_old_connections",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 208,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _cleanup_old_connections(self) -> None:\n        \"\"\"Fecha conex\u00f5es n\u00e3o usadas por al\u00e9m do TTL.\"\"\"\n        current_time = time.time()\n        with self._pool_lock:\n            stale_tids: list[int] = []\n            for tid, info in self._pool.items():\n                if current_time - info[\"la...",
      "suggested_refactor": "Extract UI rendering to _cleanup_old_connections_ui_layer() + Extract logging to _cleanup_old_connections_audit_layer()"
    },
    {
      "function_name": "get_optimized_connection",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 233,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_optimized_connection(self) -> Iterator[sqlite3.Connection]:\n        \"\"\"\n        Fornece uma conex\u00e3o otimizada para o thread atual.\n        - Reuso por thread_id\n        - Evic\u00e7\u00e3o LRU se exceder o limite\n        - Cleanup peri\u00f3dico por TTL\n        - Rollback autom\u00e1tico em exce\u00e7\u00e3o com tran...",
      "suggested_refactor": "Extract database operations to get_optimized_connection_data_layer() + Extract UI rendering to get_optimized_connection_ui_layer() + Extract logging to get_optimized_connection_audit_layer()"
    },
    {
      "function_name": "_close_all",
      "file_path": "streamlit_extension/database/connection.py",
      "line_number": 297,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _close_all(self) -> None:\n        \"\"\"Fecha todas as conex\u00f5es do pool (atexit).\"\"\"\n        with self._pool_lock:\n            for tid, info in list(self._pool.items()):\n                try:\n                    info[\"connection\"].close()\n                except Exception:\n                    pas...",
      "suggested_refactor": "Extract UI rendering to _close_all_ui_layer() + Extract logging to _close_all_audit_layer()"
    },
    {
      "function_name": "set_database_manager",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 27,
      "responsibilities": [
        "logging",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def set_database_manager(dbm: Optional[DatabaseManager]) -> None:\n    \"\"\"\n    Injeta uma inst\u00e2ncia de DatabaseManager (\u00fatil para testes) ou reseta quando None.\n    \"\"\"\n    global _DBM_INSTANCE\n    with _DBM_LOCK:\n        _DBM_INSTANCE = dbm\n        logger.debug(\"DatabaseManager singleton %s\", \"reset...",
      "suggested_refactor": "Extract database operations to set_database_manager_data_layer() + Extract logging to set_database_manager_audit_layer()"
    },
    {
      "function_name": "check_health",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 49,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_health() -> Dict[str, Any]:\n    \"\"\"\n    Health-check do banco.\n    Prefer\u00eancia: legado -> modular -> erro estruturado.\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().check_database_health()\n    except Exception as e:\n        logger.debug(\"Legacy health check unavailable/faile...",
      "suggested_refactor": "Extract UI rendering to check_health_ui_layer() + Extract logging to check_health_audit_layer() + Extract validation to check_health_validator()"
    },
    {
      "function_name": "get_query_stats",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 71,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_query_stats() -> Dict[str, Any]:\n    \"\"\"\n    Estat\u00edsticas de queries conforme implementado no manager.\n    Fallback: PRAGMAs b\u00e1sicos (page_count, page_size, freelist_count, cache_size).\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().get_query_statistics()\n    except Exception a...",
      "suggested_refactor": "Extract database operations to get_query_stats_data_layer() + Extract UI rendering to get_query_stats_ui_layer() + Extract logging to get_query_stats_audit_layer()"
    },
    {
      "function_name": "optimize",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 105,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def optimize() -> Dict[str, Any]:\n    \"\"\"\n    Executa rotinas de otimiza\u00e7\u00e3o (VACUUM/ANALYZE/etc.).\n    Prefer\u00eancia: manager. Fallback: modular + PRAGMAs padr\u00e3o.\n    \"\"\"\n    # 1) Tentar legado\n    try:\n        return _db().optimize_database()\n    except Exception as e:\n        logger.debug(\"Legacy op...",
      "suggested_refactor": "Extract database operations to optimize_data_layer() + Extract UI rendering to optimize_ui_layer() + Extract logging to optimize_audit_layer()"
    },
    {
      "function_name": "create_backup",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 146,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def create_backup(path: str) -> str:\n    \"\"\"\n    Cria backup no caminho informado.\n    - Se 'path' aponta para diret\u00f3rio, gera nome com timestamp.\n    - Garante diret\u00f3rio existente.\n    - Prefer\u00eancia: m\u00e9todo do manager; fallback: SQLite Backup API.\n    \"\"\"\n    p = Path(path)\n    if p.suffix == \"\" or...",
      "suggested_refactor": "Extract database operations to create_backup_data_layer() + Extract UI rendering to create_backup_ui_layer() + Extract logging to create_backup_audit_layer()"
    },
    {
      "function_name": "restore_backup",
      "file_path": "streamlit_extension/database/health.py",
      "line_number": 184,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def restore_backup(path: str) -> str:\n    \"\"\"\n    Restaura backup a partir de um arquivo existente.\n    Prefer\u00eancia: m\u00e9todo do manager; fallback: SQLite Backup API (copia do arquivo para a DB ativa).\n    \"\"\"\n    p = Path(path)\n    if not p.exists():\n        raise FileNotFoundError(f\"Backup n\u00e3o encon...",
      "suggested_refactor": "Extract database operations to restore_backup_data_layer() + Extract UI rendering to restore_backup_ui_layer() + Extract logging to restore_backup_audit_layer()"
    },
    {
      "function_name": "get_user_stats",
      "file_path": "streamlit_extension/database/queries.py",
      "line_number": 49,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_user_stats(user_id: int) -> Dict[str, Any]:\n    \"\"\"M\u00e9tricas agregadas por usu\u00e1rio (via legado).\"\"\"\n    return _db().get_user_stats(user_id)\n\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_achievements",
      "file_path": "streamlit_extension/database/queries.py",
      "line_number": 54,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_achievements(user_id: int) -> List[Dict[str, Any]]:\n    \"\"\"Conquistas/gamifica\u00e7\u00e3o do usu\u00e1rio (via legado).\"\"\"\n    return _db().get_achievements(user_id)\n\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_user_stats_optimized",
      "file_path": "streamlit_extension/database/queries.py",
      "line_number": 160,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_user_stats_optimized(user_id: int = 1, cache_ttl: int = 240) -> Dict[str, Any]:\n    \"\"\"\n    Estat\u00edsticas agregadas do usu\u00e1rio (com cache).\n\n    Tabelas/colunas usadas (schema atual):\n      - epics: id\n      - tasks: id, epic_id, status\n      - work_sessions: id, task_id, duration_minutes, fo...",
      "suggested_refactor": "Extract database operations to get_user_stats_optimized_data_layer()"
    },
    {
      "function_name": "get_recent_timer_sessions_optimized",
      "file_path": "streamlit_extension/database/queries.py",
      "line_number": 188,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_recent_timer_sessions_optimized(days: int = 7, cache_ttl: int = 60) -> List[Dict[str, Any]]:\n    \"\"\"\n    Lista sess\u00f5es de timer recentes (\u00faltimos N dias) com JOIN em task/epic.\n\n    Observa\u00e7\u00f5es:\n      - Usa `datetime('now', ?)` com par\u00e2metro '-{days} days' para evitar concatena\u00e7\u00e3o em SQL.\n  ...",
      "suggested_refactor": "Extract database operations to get_recent_timer_sessions_optimized_data_layer()"
    },
    {
      "function_name": "set_database_manager",
      "file_path": "streamlit_extension/database/schema.py",
      "line_number": 21,
      "responsibilities": [
        "logging",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def set_database_manager(dbm: Optional[DatabaseManager]) -> None:\n    \"\"\"\n    Injeta uma inst\u00e2ncia de ``DatabaseManager`` (\u00fatil para testes) ou reseta quando None.\n\n    Args:\n        dbm: Inst\u00e2ncia a ser utilizada como singleton; se None, limpa o singleton.\n    \"\"\"\n    global _DBM_INSTANCE\n    with ...",
      "suggested_refactor": "Extract database operations to set_database_manager_data_layer() + Extract logging to set_database_manager_audit_layer()"
    },
    {
      "function_name": "create_schema_if_needed",
      "file_path": "streamlit_extension/database/schema.py",
      "line_number": 49,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def create_schema_if_needed(verbose: bool = False) -> None:\n    \"\"\"\n    Ponto central de DDL (schema do framework).\n\n    Estrat\u00e9gia:\n      1) Se o DatabaseManager legado exp\u00f5e `create_schema_if_needed`, delega para ele.\n      2) Caso contr\u00e1rio, tenta a API modular (`streamlit_extension.database.crea...",
      "suggested_refactor": "Extract database operations to create_schema_if_needed_data_layer() + Extract UI rendering to create_schema_if_needed_ui_layer() + Extract logging to create_schema_if_needed_audit_layer()"
    },
    {
      "function_name": "quick_sync_epics_json_to_db",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 388,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def quick_sync_epics_json_to_db(project_root: Path = None) -> bool:\n    \"\"\"Quick utility to sync JSON epics to database.\"\"\"\n    integrator = ExistingSystemIntegrator(project_root)\n    results = integrator.sync_epics_from_json()\n    \n    success = results.get(\"synced\", 0) > 0 and not results.get(\"err...",
      "suggested_refactor": "Extract UI rendering to quick_sync_epics_json_to_db_ui_layer() + Extract logging to quick_sync_epics_json_to_db_audit_layer()"
    },
    {
      "function_name": "_validate_epic_data",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 56,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _validate_epic_data(self, epic_data: Dict[str, Any], filename: str) -> tuple[bool, List[str]]:\n        \"\"\"\n        Validate and sanitize epic JSON data before processing.\n        \n        Returns:\n            Tuple of (is_valid, list_of_errors)\n        \"\"\"\n        errors = []\n        \n      ...",
      "suggested_refactor": "Extract UI rendering to _validate_epic_data_ui_layer() + Extract logging to _validate_epic_data_audit_layer() + Extract validation to _validate_epic_data_validator()"
    },
    {
      "function_name": "sync_epics_from_json",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 112,
      "responsibilities": [
        "database",
        "ui",
        "file_io",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def sync_epics_from_json(self) -> Dict[str, Any]:\n        \"\"\"\n        Synchronize epic JSON files with database.\n        \n        Returns:\n            Dict with sync results and statistics\n        \"\"\"\n        if not self.epics_dir.exists():\n            return {\"error\": \"Epics directory not found...",
      "suggested_refactor": "Extract database operations to sync_epics_from_json_data_layer() + Extract UI rendering to sync_epics_from_json_ui_layer() + Extract logging to sync_epics_from_json_audit_layer() + Extract validation to sync_epics_from_json_validator()"
    },
    {
      "function_name": "sync_epics_to_json",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 172,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "file_io",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def sync_epics_to_json(self) -> Dict[str, Any]:\n        \"\"\"\n        Export database epics to JSON files.\n        \n        Returns:\n            Dict with export results\n        \"\"\"\n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\", \"exported\": 0}\n      ...",
      "suggested_refactor": "Extract database operations to sync_epics_to_json_data_layer() + Extract UI rendering to sync_epics_to_json_ui_layer() + Extract logging to sync_epics_to_json_audit_layer()"
    },
    {
      "function_name": "get_analytics_data",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 238,
      "responsibilities": [
        "logging",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_analytics_data(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"\n        Get analytics data from existing analytics engine.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            Analytics data or fallback data if engine unavailabl...",
      "suggested_refactor": "Extract logging to get_analytics_data_audit_layer()"
    },
    {
      "function_name": "_get_fallback_analytics",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 258,
      "responsibilities": [
        "auth",
        "database",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_fallback_analytics(self, days: int) -> Dict[str, Any]:\n        \"\"\"Fallback analytics using database manager.\"\"\"\n        if not self.db_manager:\n            return {\"error\": \"No analytics data available\"}\n        \n        # Get basic stats from database\n        user_stats = self.db_manag...",
      "suggested_refactor": "Extract database operations to _get_fallback_analytics_data_layer() + Extract UI rendering to _get_fallback_analytics_ui_layer()"
    },
    {
      "function_name": "get_gantt_data",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 282,
      "responsibilities": [
        "logging",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_gantt_data(self) -> Dict[str, Any]:\n        \"\"\"\n        Get Gantt chart data from existing tracker.\n        \n        Returns:\n            Gantt data compatible with existing gantt_tracker.py\n        \"\"\"\n        if not self.gantt:\n            return self._get_fallback_gantt_data()\n       ...",
      "suggested_refactor": "Extract logging to get_gantt_data_audit_layer()"
    },
    {
      "function_name": "_get_fallback_gantt_data",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 298,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _get_fallback_gantt_data(self) -> Dict[str, Any]:\n        \"\"\"Fallback Gantt data from database.\"\"\"\n        if not self.db_manager:\n            return {\"tasks\": [], \"epics\": []}\n        \n        epics = self.db_manager.get_epics()\n        all_tasks = self.db_manager.get_tasks()\n        \n     ...",
      "suggested_refactor": "Extract database operations to _get_fallback_gantt_data_data_layer()"
    },
    {
      "function_name": "validate_integration_health",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 324,
      "responsibilities": [
        "database",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_integration_health(self) -> Dict[str, Any]:\n        \"\"\"\n        Check health of all integrations.\n        \n        Returns:\n            Health status of each integration component\n        \"\"\"\n        health = {\n            \"database_manager\": DATABASE_UTILS_AVAILABLE and self.db_man...",
      "suggested_refactor": "Extract database operations to validate_integration_health_data_layer() + Extract validation to validate_integration_health_validator()"
    },
    {
      "function_name": "get_compatibility_info",
      "file_path": "streamlit_extension/integration/existing_system.py",
      "line_number": 360,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_compatibility_info(self) -> Dict[str, Any]:\n        \"\"\"\n        Get information about compatibility with existing system components.\n        \n        Returns:\n            Compatibility status and recommendations\n        \"\"\"\n        return {\n            \"framework_version\": \"1.1.2\",  # Fr...",
      "suggested_refactor": "Extract UI rendering to get_compatibility_info_ui_layer() + Extract logging to get_compatibility_info_audit_layer()"
    },
    {
      "function_name": "get_client_metrics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 31,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_client_metrics(self, client_id: Optional[int] = None, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get client-level metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            if client_id:\n                where_clause = \"WHERE c.id ...",
      "suggested_refactor": "Extract database operations to get_client_metrics_data_layer() + Extract UI rendering to get_client_metrics_ui_layer() + Extract logging to get_client_metrics_audit_layer()"
    },
    {
      "function_name": "get_project_progress_metrics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 68,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_project_progress_metrics(self, project_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get project progress metrics.\"\"\"\n        try:\n            if project_id:\n                where_clause = \"WHERE p.id = ?\"\n                params = [project_id]\n            else:\n          ...",
      "suggested_refactor": "Extract database operations to get_project_progress_metrics_data_layer() + Extract UI rendering to get_project_progress_metrics_ui_layer() + Extract logging to get_project_progress_metrics_audit_layer()"
    },
    {
      "function_name": "get_tdd_cycle_metrics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 111,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_tdd_cycle_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get TDD cycle completion metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Tasks by TDD phase\n            phase_query = \"\"\"\n                SELECT \n    ...",
      "suggested_refactor": "Extract database operations to get_tdd_cycle_metrics_data_layer() + Extract UI rendering to get_tdd_cycle_metrics_ui_layer() + Extract logging to get_tdd_cycle_metrics_audit_layer()"
    },
    {
      "function_name": "get_productivity_metrics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 163,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_productivity_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get productivity and time tracking metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Daily productivity\n            daily_query = \"\"\"\n               ...",
      "suggested_refactor": "Extract database operations to get_productivity_metrics_data_layer() + Extract UI rendering to get_productivity_metrics_ui_layer() + Extract logging to get_productivity_metrics_audit_layer()"
    },
    {
      "function_name": "get_gamification_metrics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 228,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_gamification_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get gamification and achievement metrics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Epic completion and points\n            epic_query = \"\"\"\n          ...",
      "suggested_refactor": "Extract database operations to get_gamification_metrics_data_layer() + Extract UI rendering to get_gamification_metrics_ui_layer() + Extract logging to get_gamification_metrics_audit_layer()"
    },
    {
      "function_name": "get_dashboard_summary",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 291,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_dashboard_summary(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get comprehensive dashboard summary metrics.\n        \n        Args:\n            days: Number of days to include in metrics\n            \n        Returns:\n            ServiceResult with dashboard ...",
      "suggested_refactor": "Extract UI rendering to get_dashboard_summary_ui_layer() + Extract logging to get_dashboard_summary_audit_layer() + Extract business logic to get_dashboard_summary_processor()"
    },
    {
      "function_name": "get_client_analytics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 347,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_client_analytics(self, client_id: int, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get analytics for a specific client.\n        \n        Args:\n            client_id: Client ID\n            days: Number of days to include\n            \n        Returns:\n            ...",
      "suggested_refactor": "Extract UI rendering to get_client_analytics_ui_layer() + Extract logging to get_client_analytics_audit_layer() + Extract business logic to get_client_analytics_processor()"
    },
    {
      "function_name": "get_project_analytics",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 385,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_project_analytics(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get analytics for a specific project.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project analytics\n        \"\"\"\n      ...",
      "suggested_refactor": "Extract UI rendering to get_project_analytics_ui_layer() + Extract logging to get_project_analytics_audit_layer()"
    },
    {
      "function_name": "get_productivity_report",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 421,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_productivity_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get comprehensive productivity report.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with productivity report\n     ...",
      "suggested_refactor": "Extract UI rendering to get_productivity_report_ui_layer() + Extract logging to get_productivity_report_audit_layer()"
    },
    {
      "function_name": "get_tdd_metrics_report",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 460,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_tdd_metrics_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get TDD-specific metrics and analysis.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with TDD metrics report\n       ...",
      "suggested_refactor": "Extract UI rendering to get_tdd_metrics_report_ui_layer() + Extract logging to get_tdd_metrics_report_audit_layer() + Extract business logic to get_tdd_metrics_report_processor()"
    },
    {
      "function_name": "get_time_tracking_report",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 499,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_time_tracking_report(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get time tracking analysis report.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with time tracking report\n       ...",
      "suggested_refactor": "Extract UI rendering to get_time_tracking_report_ui_layer() + Extract logging to get_time_tracking_report_audit_layer()"
    },
    {
      "function_name": "_calculate_completion_rates",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 539,
      "responsibilities": [
        "business_logic",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_completion_rates(self, metrics: Dict[str, Any]) -> Dict[str, float]:\n        \"\"\"Calculate completion rates for different entity types.\"\"\"\n        return {\n            'projects': self._safe_percentage(metrics.get('completed_projects', 0), metrics.get('total_projects', 0)),\n       ...",
      "suggested_refactor": "Extract UI rendering to _calculate_completion_rates_ui_layer() + Extract business logic to _calculate_completion_rates_processor()"
    },
    {
      "function_name": "_calculate_client_performance",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 615,
      "responsibilities": [
        "business_logic",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_client_performance(self, projects: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Calculate client performance metrics.\"\"\"\n        if not projects:\n            return {'overall_score': 0, 'on_time_rate': 0, 'budget_efficiency': 0}\n        \n        completed_projects = [p for ...",
      "suggested_refactor": "Extract UI rendering to _calculate_client_performance_ui_layer() + Extract business logic to _calculate_client_performance_processor()"
    },
    {
      "function_name": "_calculate_tdd_score",
      "file_path": "streamlit_extension/services/analytics_service.py",
      "line_number": 885,
      "responsibilities": [
        "business_logic",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_tdd_score(self, tdd_metrics: Dict[str, Any]) -> float:\n        \"\"\"Calculate overall TDD effectiveness score.\"\"\"\n        phase_dist = tdd_metrics.get('phase_distribution', {})\n        completed_cycles = tdd_metrics.get('completed_cycles', 0)\n        \n        total_tasks = sum(phase...",
      "suggested_refactor": "Extract UI rendering to _calculate_tdd_score_ui_layer() + Extract business logic to _calculate_tdd_score_processor()"
    },
    {
      "function_name": "_validate_planning_inputs",
      "file_path": "streamlit_extension/services/task_execution_planner.py",
      "line_number": 158,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _validate_planning_inputs(self, epic_id: int, scoring_preset: str) -> ServiceResult[bool]:\n        \"\"\"Valida inputs do planejamento\"\"\"\n        errors = []\n        \n        if not isinstance(epic_id, int) or epic_id <= 0:\n            errors.append(f\"epic_id deve ser inteiro positivo, recebido...",
      "suggested_refactor": "Extract UI rendering to _validate_planning_inputs_ui_layer() + Extract logging to _validate_planning_inputs_audit_layer()"
    },
    {
      "function_name": "_load_planning_context",
      "file_path": "streamlit_extension/services/task_execution_planner.py",
      "line_number": 174,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _load_planning_context(self, epic_id: int) -> ServiceResult[PlanningContext]:\n        \"\"\"Carrega contexto necess\u00e1rio para planejamento usando repositories\"\"\"\n        try:\n            # Carregar tarefas\n            tasks = self.tasks_repo.list_by_epic(epic_id)\n            if not tasks:\n      ...",
      "suggested_refactor": "Extract UI rendering to _load_planning_context_ui_layer() + Extract logging to _load_planning_context_audit_layer()"
    },
    {
      "function_name": "_validate_dag_structure",
      "file_path": "streamlit_extension/services/task_execution_planner.py",
      "line_number": 245,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _validate_dag_structure(self, context: PlanningContext) -> Dict[str, Any]:\n        \"\"\"Valida estrutura DAG usando GraphAlgorithms\"\"\"\n        try:\n            # Inverter grafo para ordena\u00e7\u00e3o correta (prerequisite -> dependent)\n            inverted_graph = defaultdict(set)\n            for depe...",
      "suggested_refactor": "Extract UI rendering to _validate_dag_structure_ui_layer() + Extract logging to _validate_dag_structure_audit_layer() + Extract validation to _validate_dag_structure_validator() + Extract business logic to _validate_dag_structure_processor()"
    },
    {
      "function_name": "_calculate_critical_path",
      "file_path": "streamlit_extension/services/task_execution_planner.py",
      "line_number": 388,
      "responsibilities": [
        "business_logic",
        "logging"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_critical_path(self, context: PlanningContext) -> List[str]:\n        \"\"\"Calcula caminho cr\u00edtico usando GraphAlgorithms\"\"\"\n        try:\n            # Usar grafo invertido\n            inverted_graph = defaultdict(set)\n            for dependent, prerequisites in context.adjacency_grap...",
      "suggested_refactor": "Extract logging to _calculate_critical_path_audit_layer() + Extract business logic to _calculate_critical_path_processor()"
    },
    {
      "function_name": "get_execution_summary",
      "file_path": "streamlit_extension/services/task_execution_planner.py",
      "line_number": 463,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_execution_summary(self, plan: ExecutionPlan) -> Dict[str, Any]:\n        \"\"\"\n        Gera sum\u00e1rio executivo do plano de execu\u00e7\u00e3o.\n        \n        Args:\n            plan: Plano de execu\u00e7\u00e3o\n            \n        Returns:\n            Dicion\u00e1rio com sum\u00e1rio executivo\n        \"\"\"\n        try:\n...",
      "suggested_refactor": "Extract UI rendering to get_execution_summary_ui_layer() + Extract logging to get_execution_summary_audit_layer()"
    },
    {
      "function_name": "find_session_by_id",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 44,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def find_session_by_id(self, session_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find work session by ID.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t.task_key, \n                       e.title as epic_title, e.epic_key\n                FROM wo...",
      "suggested_refactor": "Extract database operations to find_session_by_id_data_layer() + Extract UI rendering to find_session_by_id_ui_layer() + Extract logging to find_session_by_id_audit_layer()"
    },
    {
      "function_name": "find_active_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 61,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def find_active_session(self) -> Optional[Dict[str, Any]]:\n        \"\"\"Find currently active work session.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t.task_key,\n                       e.title as epic_title, e.epic_key\n                FROM work_ses...",
      "suggested_refactor": "Extract database operations to find_active_session_data_layer() + Extract UI rendering to find_active_session_ui_layer() + Extract logging to find_active_session_audit_layer()"
    },
    {
      "function_name": "find_sessions_by_task",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 80,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def find_sessions_by_task(self, task_id: int, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find all work sessions for a specific task.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT * FROM work_sessions\n                WHERE task_id = ?\n                ORDER B...",
      "suggested_refactor": "Extract database operations to find_sessions_by_task_data_layer() + Extract UI rendering to find_sessions_by_task_ui_layer() + Extract logging to find_sessions_by_task_audit_layer()"
    },
    {
      "function_name": "find_recent_sessions",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 128,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def find_recent_sessions(self, days: int = 7, limit: int = 50) -> List[Dict[str, Any]]:\n        \"\"\"Find recent work sessions.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            query = \"\"\"\n                SELECT ws.*, t.title as task_title, t...",
      "suggested_refactor": "Extract database operations to find_recent_sessions_data_layer() + Extract UI rendering to find_recent_sessions_ui_layer() + Extract logging to find_recent_sessions_audit_layer()"
    },
    {
      "function_name": "create_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 149,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_session(self, session_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new work session and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO work_sessions (\n                    task_id, epic_id, session_type, status, start_time,\n             ...",
      "suggested_refactor": "Extract database operations to create_session_data_layer() + Extract UI rendering to create_session_ui_layer() + Extract logging to create_session_audit_layer()"
    },
    {
      "function_name": "update_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 182,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_session(self, session_id: int, session_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing work session.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE work_sessions SET\n                    status = ?, end_time = ?, duration_minutes = ?,\n                    focus...",
      "suggested_refactor": "Extract database operations to update_session_data_layer() + Extract UI rendering to update_session_ui_layer() + Extract logging to update_session_audit_layer()"
    },
    {
      "function_name": "delete_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 214,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_session(self, session_id: int) -> bool:\n        \"\"\"Delete work session.\"\"\"\n        try:\n            query = \"DELETE FROM work_sessions WHERE id = ?\"\n            affected_rows = self.db_manager.execute_update(query, (session_id,))\n            return affected_rows > 0\n        except Exc...",
      "suggested_refactor": "Extract database operations to delete_session_data_layer() + Extract UI rendering to delete_session_ui_layer() + Extract logging to delete_session_audit_layer()"
    },
    {
      "function_name": "get_session_statistics",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 224,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_session_statistics(self, task_id: Optional[int] = None, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get session statistics for analytics.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            if task_id:\n                where_clause = ...",
      "suggested_refactor": "Extract database operations to get_session_statistics_data_layer() + Extract UI rendering to get_session_statistics_ui_layer() + Extract logging to get_session_statistics_audit_layer()"
    },
    {
      "function_name": "get_productivity_patterns",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 260,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_productivity_patterns(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get productivity patterns for analysis.\"\"\"\n        try:\n            date_filter = datetime.now() - timedelta(days=days)\n            \n            # Sessions by hour of day\n            hourly_query = \"\"\"\n            ...",
      "suggested_refactor": "Extract database operations to get_productivity_patterns_data_layer() + Extract UI rendering to get_productivity_patterns_ui_layer() + Extract logging to get_productivity_patterns_audit_layer()"
    },
    {
      "function_name": "task_exists",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 319,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def task_exists(self, task_id: int) -> bool:\n        \"\"\"Check if task exists.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_tasks WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (task_id,))\n            return len(result) > 0\n        except Exception as e:\n...",
      "suggested_refactor": "Extract database operations to task_exists_data_layer() + Extract UI rendering to task_exists_ui_layer() + Extract logging to task_exists_audit_layer()"
    },
    {
      "function_name": "epic_exists",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 329,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def epic_exists(self, epic_id: int) -> bool:\n        \"\"\"Check if epic exists.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_epics WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return len(result) > 0\n        except Exception as e:\n...",
      "suggested_refactor": "Extract database operations to epic_exists_data_layer() + Extract UI rendering to epic_exists_ui_layer() + Extract logging to epic_exists_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 347,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate timer-specific business rules.\"\"\"\n        errors = []\n        \n        # Planned duration validation\n        if 'planned_duration_minutes' in data and data['planned_duration_minutes'] is not None:\n...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
    },
    {
      "function_name": "start_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 456,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def start_session(self, session_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Start a new work session.\n        \n        Args:\n            session_data: Session information dictionary\n            \n        Returns:\n            ServiceResult with session ID if successful\n       ...",
      "suggested_refactor": "Extract UI rendering to start_session_ui_layer() + Extract logging to start_session_audit_layer() + Extract business logic to start_session_processor()"
    },
    {
      "function_name": "stop_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 513,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def stop_session(self, session_id: int, completion_data: Optional[Dict[str, Any]] = None) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Stop/complete a work session.\n        \n        Args:\n            session_id: Session ID to stop\n            completion_data: Optional completion data (r...",
      "suggested_refactor": "Extract database operations to stop_session_data_layer() + Extract UI rendering to stop_session_ui_layer() + Extract logging to stop_session_audit_layer() + Extract business logic to stop_session_processor()"
    },
    {
      "function_name": "pause_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 590,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def pause_session(self, session_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Pause an active work session.\n        \n        Args:\n            session_id: Session ID to pause\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation...",
      "suggested_refactor": "Extract database operations to pause_session_data_layer() + Extract UI rendering to pause_session_ui_layer() + Extract logging to pause_session_audit_layer() + Extract business logic to pause_session_processor()"
    },
    {
      "function_name": "resume_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 626,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def resume_session(self, session_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Resume a paused work session.\n        \n        Args:\n            session_id: Session ID to resume\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operati...",
      "suggested_refactor": "Extract database operations to resume_session_data_layer() + Extract UI rendering to resume_session_ui_layer() + Extract logging to resume_session_audit_layer() + Extract business logic to resume_session_processor()"
    },
    {
      "function_name": "cancel_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 669,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def cancel_session(self, session_id: int, reason: Optional[str] = None) -> ServiceResult[bool]:\n        \"\"\"\n        Cancel a work session.\n        \n        Args:\n            session_id: Session ID to cancel\n            reason: Optional cancellation reason\n            \n        Returns:\n          ...",
      "suggested_refactor": "Extract database operations to cancel_session_data_layer() + Extract UI rendering to cancel_session_ui_layer() + Extract logging to cancel_session_audit_layer() + Extract business logic to cancel_session_processor()"
    },
    {
      "function_name": "get_active_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 710,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_active_session(self) -> ServiceResult[Optional[Dict[str, Any]]]:\n        \"\"\"\n        Get currently active work session.\n        \n        Returns:\n            ServiceResult with active session or None\n        \"\"\"\n        self.log_operation(\"get_active_session\")\n        \n        try:\n     ...",
      "suggested_refactor": "Extract logging to get_active_session_audit_layer() + Extract business logic to get_active_session_processor()"
    },
    {
      "function_name": "get_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 733,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_session(self, session_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get work session by ID.\n        \n        Args:\n            session_id: Session ID\n            \n        Returns:\n            ServiceResult with session data\n        \"\"\"\n        self.log_operation(\"get_ses...",
      "suggested_refactor": "Extract logging to get_session_audit_layer() + Extract business logic to get_session_processor()"
    },
    {
      "function_name": "get_sessions_for_task",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 762,
      "responsibilities": [
        "logging",
        "auth",
        "network"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_sessions_for_task(self, task_id: int, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all work sessions for a specific task.\n        \n        Args:\n            task_id: Task ID\n            limit: Optional limit on number of sessions\n          ...",
      "suggested_refactor": "Extract logging to get_sessions_for_task_audit_layer()"
    },
    {
      "function_name": "get_recent_sessions",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 782,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_recent_sessions(self, days: int = 7, limit: int = 50) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get recent work sessions.\n        \n        Args:\n            days: Number of days to look back\n            limit: Maximum number of sessions to return\n            \n        Re...",
      "suggested_refactor": "Extract UI rendering to get_recent_sessions_ui_layer() + Extract logging to get_recent_sessions_audit_layer()"
    },
    {
      "function_name": "get_session_statistics",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 805,
      "responsibilities": [
        "ui",
        "business_logic",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_session_statistics(self, task_id: Optional[int] = None, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get session statistics for analytics.\n        \n        Args:\n            task_id: Optional task ID to filter by\n            days: Number of days to analyze\n      ...",
      "suggested_refactor": "Extract UI rendering to get_session_statistics_ui_layer() + Extract logging to get_session_statistics_audit_layer() + Extract business logic to get_session_statistics_processor()"
    },
    {
      "function_name": "get_productivity_patterns",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 836,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_productivity_patterns(self, days: int = 30) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get productivity patterns for analysis.\n        \n        Args:\n            days: Number of days to analyze\n            \n        Returns:\n            ServiceResult with productivity patterns\n...",
      "suggested_refactor": "Extract UI rendering to get_productivity_patterns_ui_layer() + Extract logging to get_productivity_patterns_audit_layer()"
    },
    {
      "function_name": "suggest_optimal_session",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 868,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def suggest_optimal_session(self, task_id: Optional[int] = None) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Suggest optimal session configuration based on patterns.\n        \n        Args:\n            task_id: Optional task ID for task-specific suggestions\n            \n        Returns:...",
      "suggested_refactor": "Extract UI rendering to suggest_optimal_session_ui_layer() + Extract logging to suggest_optimal_session_audit_layer()"
    },
    {
      "function_name": "update_session_ratings",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 895,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_session_ratings(self, session_id: int, ratings: Dict[str, int]) -> ServiceResult[bool]:\n        \"\"\"\n        Update session ratings (focus, energy, mood).\n        \n        Args:\n            session_id: Session ID\n            ratings: Dictionary with rating values\n            \n        R...",
      "suggested_refactor": "Extract database operations to update_session_ratings_data_layer() + Extract UI rendering to update_session_ratings_ui_layer() + Extract logging to update_session_ratings_audit_layer() + Extract business logic to update_session_ratings_processor()"
    },
    {
      "function_name": "_calculate_elapsed_time",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 927,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_elapsed_time(self, session: Dict[str, Any]) -> int:\n        \"\"\"Calculate elapsed time for active session.\"\"\"\n        start_time = session['start_time']\n        was_utc_format = False\n        \n        if isinstance(start_time, str):\n            # Normaliza ISO 8601 com sufixo 'Z' (...",
      "suggested_refactor": "Extract UI rendering to _calculate_elapsed_time_ui_layer() + Extract logging to _calculate_elapsed_time_audit_layer() + Extract business logic to _calculate_elapsed_time_processor()"
    },
    {
      "function_name": "_calculate_remaining_time",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 945,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_remaining_time(self, session: Dict[str, Any]) -> int:\n        \"\"\"Calculate remaining time for session.\"\"\"\n        planned_duration = session.get('planned_duration_minutes', 0)\n        elapsed = self._calculate_elapsed_time(session)\n        \n        return max(0, planned_duration -...",
      "suggested_refactor": "Extract business logic to _calculate_remaining_time_processor()"
    },
    {
      "function_name": "_calculate_progress_percentage",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 952,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_progress_percentage(self, session: Dict[str, Any]) -> float:\n        \"\"\"Calculate progress percentage for session.\"\"\"\n        planned_duration = session.get('planned_duration_minutes', 0)\n        if planned_duration <= 0:\n            return 0.0\n        \n        elapsed = self._cal...",
      "suggested_refactor": "Extract business logic to _calculate_progress_percentage_processor()"
    },
    {
      "function_name": "_calculate_performance_metrics",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 999,
      "responsibilities": [
        "business_logic",
        "auth",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _calculate_performance_metrics(self, session: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate performance metrics for session.\"\"\"\n        metrics = {}\n        \n        # Focus score\n        focus_rating = session.get('focus_rating')\n        if focus_rating:\n            metrics['focus...",
      "suggested_refactor": "Extract UI rendering to _calculate_performance_metrics_ui_layer() + Extract business logic to _calculate_performance_metrics_processor()"
    },
    {
      "function_name": "_calculate_productivity_score",
      "file_path": "streamlit_extension/services/timer_service.py",
      "line_number": 1049,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_productivity_score(self, stats: Dict[str, Any]) -> float:\n        \"\"\"Calculate overall productivity score.\"\"\"\n        if not stats:\n            return 0.0\n        \n        # Factors: session count, average duration, focus rating, low interruptions\n        session_count = stats.get...",
      "suggested_refactor": "Extract business logic to _calculate_productivity_score_processor()"
    },
    {
      "function_name": "find_by_id",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 26,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_id(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find client by ID.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_clients WHERE id = ?\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return result[0] if result else N...",
      "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
    },
    {
      "function_name": "find_by_email",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 36,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_email(self, email: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find client by email address.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_clients WHERE email = ?\"\n            result = self.db_manager.execute_query(query, (email,))\n            return result[0] if resu...",
      "suggested_refactor": "Extract database operations to find_by_email_data_layer() + Extract UI rendering to find_by_email_ui_layer() + Extract logging to find_by_email_audit_layer()"
    },
    {
      "function_name": "create",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 120,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def create(self, client_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new client and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_clients (\n                    name, email, phone, company, address, \n                    contact_person, s...",
      "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
    },
    {
      "function_name": "update",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 147,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update(self, client_id: int, client_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing client.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_clients SET\n                    name = ?, email = ?, phone = ?, company = ?,\n                    address = ?, contact...",
      "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
    },
    {
      "function_name": "delete",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 177,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def delete(self, client_id: int) -> bool:\n        \"\"\"Delete client (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_clients SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            params...",
      "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
    },
    {
      "function_name": "count_projects",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 194,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def count_projects(self, client_id: int) -> int:\n        \"\"\"Count projects for a client.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) FROM framework_projects WHERE client_id = ?\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return result[0]['COUNT(*...",
      "suggested_refactor": "Extract database operations to count_projects_data_layer() + Extract UI rendering to count_projects_ui_layer() + Extract logging to count_projects_audit_layer()"
    },
    {
      "function_name": "_log_security_warning",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 212,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _log_security_warning(self, message: str) -> None:\n        \"\"\"Log security-related warnings.\"\"\"\n        import logging\n        logger = logging.getLogger(__name__)\n        logger.warning(f\"SECURITY: {message}\")\n    ",
      "suggested_refactor": "Extract UI rendering to _log_security_warning_ui_layer() + Extract logging to _log_security_warning_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 218,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate client-specific business rules.\"\"\"\n        errors = []\n        \n        # Email format validation\n        if 'email' in data and data['email']:\n            email_pattern = ValidationRules.EMAIL_PAT...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer()"
    },
    {
      "function_name": "create_client",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 264,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_client(self, client_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new client with validation.\n        \n        Args:\n            client_data: Client information dictionary\n            \n        Returns:\n            ServiceResult with client ID if successful\n...",
      "suggested_refactor": "Extract UI rendering to create_client_ui_layer() + Extract logging to create_client_audit_layer() + Extract validation to create_client_validator() + Extract business logic to create_client_processor()"
    },
    {
      "function_name": "get_client",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 307,
      "responsibilities": [
        "logging",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_client(self, client_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get client by ID.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with client data if found\n        \"\"\"\n        self.log_operation(\"get_clien...",
      "suggested_refactor": "Extract logging to get_client_audit_layer()"
    },
    {
      "function_name": "update_client",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 330,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_client(self, client_id: int, client_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing client.\n        \n        Args:\n            client_id: Client ID\n            client_data: Updated client information\n            \n        Returns:\n            ServiceRe...",
      "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer() + Extract validation to update_client_validator() + Extract business logic to update_client_processor()"
    },
    {
      "function_name": "delete_client",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 380,
      "responsibilities": [
        "logging",
        "database",
        "ui",
        "business_logic",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_client(self, client_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete client (soft delete).\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_clie...",
      "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer() + Extract business logic to delete_client_processor()"
    },
    {
      "function_name": "get_client_summary",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 468,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_client_summary(self, client_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get client summary with project count and other metrics.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with client summary data\n   ...",
      "suggested_refactor": "Extract UI rendering to get_client_summary_ui_layer() + Extract logging to get_client_summary_audit_layer()"
    },
    {
      "function_name": "validate_client_data",
      "file_path": "streamlit_extension/services/client_service.py",
      "line_number": 504,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_client_data(self, client_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate client data without creating/updating.\n        \n        Args:\n            client_data: Client data to validate\n            \n        Returns:\n            ServiceResult indicating if da...",
      "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
    },
    {
      "function_name": "initialize_service_container",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 337,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def initialize_service_container(db_manager: DatabaseManager, lazy_loading: bool = True) -> ServiceContainer:\n    global _service_container\n    if _service_container is not None:\n        _service_container.shutdown()\n    _service_container = ServiceContainer(db_manager=db_manager, use_modular_api=Fa...",
      "suggested_refactor": "Extract database operations to initialize_service_container_data_layer() + Extract UI rendering to initialize_service_container_ui_layer()"
    },
    {
      "function_name": "service_transaction",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 393,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def service_transaction():\n    container = get_service_container()\n    with container.transaction_scope():\n        yield container\n\n",
      "suggested_refactor": "Extract database operations to service_transaction_data_layer() + Extract UI rendering to service_transaction_ui_layer()"
    },
    {
      "function_name": "check_service_health",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 402,
      "responsibilities": [
        "logging",
        "network",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def check_service_health() -> Dict[str, Any]:\n    try:\n        container = get_service_container()\n        validation = container.validate_services()\n        status = container.get_service_status()\n        all_ok = all(validation.values())\n        return {\n            \"overall_health\": \"healthy\" if ...",
      "suggested_refactor": "Extract UI rendering to check_service_health_ui_layer() + Extract logging to check_service_health_audit_layer() + Extract validation to check_service_health_validator()"
    },
    {
      "function_name": "example_service_usage",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 425,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def example_service_usage() -> None:\n    \"\"\"Exemplo simples de inicializa\u00e7\u00e3o e uso do container (modo legado).\"\"\"\n    dm = DatabaseManager()  # type: ignore[call-arg]\n    container = initialize_service_container(dm, lazy_loading=True)\n\n    try:\n        client_service = get_client_service()\n        p...",
      "suggested_refactor": "Extract database operations to example_service_usage_data_layer() + Extract UI rendering to example_service_usage_ui_layer()"
    },
    {
      "function_name": "get_connection",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 48,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_connection(self):\n        \"\"\"Obt\u00e9m conex\u00e3o via API modular (quando exposta pelo projeto).\"\"\"\n        return db_connection.get_connection()\n",
      "suggested_refactor": "Extract database operations to get_connection_data_layer()"
    },
    {
      "function_name": "get_connection_context",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 52,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_connection_context(self):\n        \"\"\"Context manager de conex\u00e3o direta SQLite da API modular.\"\"\"\n        return db_connection.get_connection_context()\n",
      "suggested_refactor": "Extract database operations to get_connection_context_data_layer()"
    },
    {
      "function_name": "get_epics",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 65,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_epics(self) -> list[dict]:\n        try:\n            res = db_queries.list_epics()\n            return list(res)  # j\u00e1 \u00e9 list[dict]\n        except Exception as e:\n            self._logger.error(\"get_epics failed: %s\", e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_epics_ui_layer() + Extract logging to get_epics_audit_layer()"
    },
    {
      "function_name": "get_all_epics",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 73,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_all_epics(self) -> list[dict]:\n        try:\n            res = db_queries.list_all_epics()\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_all_epics failed: %s\", e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_all_epics_ui_layer() + Extract logging to get_all_epics_audit_layer()"
    },
    {
      "function_name": "get_tasks",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 81,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_tasks(self, epic_id: int) -> list[dict]:\n        try:\n            res = db_queries.list_tasks(epic_id)\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_tasks(%s) failed: %s\", epic_id, e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_tasks_ui_layer() + Extract logging to get_tasks_audit_layer()"
    },
    {
      "function_name": "get_all_tasks",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 89,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_all_tasks(self) -> list[dict]:\n        try:\n            res = db_queries.list_all_tasks()\n            return list(res)\n        except Exception as e:\n            self._logger.error(\"get_all_tasks failed: %s\", e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_all_tasks_ui_layer() + Extract logging to get_all_tasks_audit_layer()"
    },
    {
      "function_name": "get_timer_sessions",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 97,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_timer_sessions(self, **kwargs: Any) -> list[dict]:\n        try:\n            return db_queries.list_timer_sessions()\n        except Exception as e:\n            self._logger.error(\"get_timer_sessions failed: %s\", e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_timer_sessions_ui_layer() + Extract logging to get_timer_sessions_audit_layer()"
    },
    {
      "function_name": "get_user_stats",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 104,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_user_stats(self, user_id: int = 1, **kwargs: Any) -> dict:\n        try:\n            return db_queries.get_user_stats(user_id)\n        except Exception as e:\n            self._logger.error(\"get_user_stats(%s) failed: %s\", user_id, e, exc_info=True)\n            return {}\n",
      "suggested_refactor": "Extract UI rendering to get_user_stats_ui_layer() + Extract logging to get_user_stats_audit_layer()"
    },
    {
      "function_name": "get_achievements",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 111,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_achievements(self, user_id: int = 1, **kwargs: Any) -> list[dict]:\n        try:\n            return db_queries.get_achievements(user_id)\n        except Exception as e:\n            self._logger.error(\"get_achievements(%s) failed: %s\", user_id, e, exc_info=True)\n            return []\n",
      "suggested_refactor": "Extract UI rendering to get_achievements_ui_layer() + Extract logging to get_achievements_audit_layer()"
    },
    {
      "function_name": "check_database_health",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 118,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def check_database_health(self) -> dict:\n        from ..database.health import check_health  # type: ignore\n        try:\n            return check_health()\n        except Exception as e:\n            self._logger.error(\"check_database_health failed: %s\", e, exc_info=True)\n            return {\"stat...",
      "suggested_refactor": "Extract UI rendering to check_database_health_ui_layer() + Extract logging to check_database_health_audit_layer() + Extract validation to check_database_health_validator()"
    },
    {
      "function_name": "__getattr__",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 126,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __getattr__(self, name: str):\n        self._logger.warning(\"ModularDatabaseAdapter: m\u00e9todo '%s' n\u00e3o implementado\", name)\n        raise AttributeError(f\"ModularDatabaseAdapter has no method '{name}'\")\n\n",
      "suggested_refactor": "Extract UI rendering to __getattr___ui_layer() + Extract logging to __getattr___audit_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 147,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, db_manager: Optional[DatabaseManager] = None, use_modular_api: bool = False) -> None:\n        \"\"\"\n        Args:\n            db_manager: Inst\u00e2ncia do DatabaseManager (obrigat\u00f3ria se use_modular_api=False)\n            use_modular_api: True para usar a API modular\n        \"\"\"\n   ...",
      "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "initialize",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 180,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def initialize(self, lazy_loading: bool = True) -> None:\n        self._lazy_loading = lazy_loading\n\n        if not lazy_loading:\n            for name in list(self._service_classes.keys()):\n                self._create_service(name)\n\n        self._initialized = True\n        self._logger.info(\"Ser...",
      "suggested_refactor": "Extract UI rendering to initialize_ui_layer() + Extract logging to initialize_audit_layer()"
    },
    {
      "function_name": "shutdown",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 190,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def shutdown(self) -> None:\n        \"\"\"Desaloca inst\u00e2ncias e marca container como n\u00e3o inicializado.\"\"\"\n        self.clear_all_services()\n        self._initialized = False\n        self._logger.info(\"Service container shutdown\")\n",
      "suggested_refactor": "Extract UI rendering to shutdown_ui_layer() + Extract logging to shutdown_audit_layer()"
    },
    {
      "function_name": "transaction_scope",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 198,
      "responsibilities": [
        "logging",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def transaction_scope(self):\n        \"\"\"\n        Escopo transacional real: usa a transa\u00e7\u00e3o da API modular ou do DatabaseManager.\n        Todos os servi\u00e7os usados dentro do bloco compartilham o mesmo contexto.\n        \"\"\"\n        if self.use_modular_api:\n            cm = db_connection.transaction...",
      "suggested_refactor": "Extract database operations to transaction_scope_data_layer() + Extract logging to transaction_scope_audit_layer()"
    },
    {
      "function_name": "validate_services",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 253,
      "responsibilities": [
        "logging",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_services(self) -> Dict[str, bool]:\n        \"\"\"\n        Verifica se todos os servi\u00e7os podem ser instanciados.\n        N\u00e3o persiste as inst\u00e2ncias quando validate_only=True.\n        \"\"\"\n        results: Dict[str, bool] = {}\n        for name in self._service_classes.keys():\n            ...",
      "suggested_refactor": "Extract logging to validate_services_audit_layer() + Extract validation to validate_services_validator()"
    },
    {
      "function_name": "_get_service",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 289,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _get_service(self, service_name: str, service_class: Type[T]) -> T:\n        with self._lock:\n            if service_name not in self._services:\n                if not self._initialized:\n                    raise ServiceError(\"Service container not initialized. Call initialize() first.\")\n    ...",
      "suggested_refactor": "Extract UI rendering to _get_service_ui_layer() + Extract logging to _get_service_audit_layer()"
    },
    {
      "function_name": "_create_service",
      "file_path": "streamlit_extension/services/service_container.py",
      "line_number": 303,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_service(self, service_name: str, validate_only: bool = False) -> BaseService:\n        if service_name not in self._service_classes:\n            raise ServiceError(f\"Unknown service: {service_name}\")\n\n        cls = self._service_classes[service_name]\n        try:\n            if self.u...",
      "suggested_refactor": "Extract database operations to _create_service_data_layer() + Extract UI rendering to _create_service_ui_layer() + Extract logging to _create_service_audit_layer() + Extract validation to _create_service_validator()"
    },
    {
      "function_name": "find_by_id",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 27,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_id(self, epic_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find epic by ID with project and client information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT e.*, p.name as project_name, c.name as client_name\n                FROM framework_epics e\n               ...",
      "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
    },
    {
      "function_name": "find_by_key",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 43,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_key(self, epic_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find epic by unique key.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_epics WHERE epic_key = ?\"\n            result = self.db_manager.execute_query(query, (epic_key,))\n            return result[0] if resu...",
      "suggested_refactor": "Extract database operations to find_by_key_data_layer() + Extract UI rendering to find_by_key_ui_layer() + Extract logging to find_by_key_audit_layer()"
    },
    {
      "function_name": "find_by_project",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 175,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_project(self, project_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all epics for a specific project.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT e.*, COUNT(t.id) as task_count,\n                       SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as c...",
      "suggested_refactor": "Extract database operations to find_by_project_data_layer() + Extract UI rendering to find_by_project_ui_layer() + Extract logging to find_by_project_audit_layer()"
    },
    {
      "function_name": "create",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 202,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create(self, epic_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new epic and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_epics (\n                    epic_key, title, description, project_id, status, priority,\n                    di...",
      "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
    },
    {
      "function_name": "update",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 234,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update(self, epic_id: int, epic_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing epic.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_epics SET\n                    epic_key = ?, title = ?, description = ?, project_id = ?,\n                    status = ?, pri...",
      "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
    },
    {
      "function_name": "delete",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 269,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def delete(self, epic_id: int) -> bool:\n        \"\"\"Delete epic (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_epics SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            params = (Ep...",
      "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
    },
    {
      "function_name": "count_tasks",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 286,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def count_tasks(self, epic_id: int) -> int:\n        \"\"\"Count tasks for an epic.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) AS total FROM framework_tasks WHERE epic_id = ?\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return int(result[0]['total']) i...",
      "suggested_refactor": "Extract database operations to count_tasks_data_layer() + Extract UI rendering to count_tasks_ui_layer() + Extract logging to count_tasks_audit_layer()"
    },
    {
      "function_name": "get_epic_metrics",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 296,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_metrics(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get epic metrics (tasks, progress, time tracking).\"\"\"\n        try:\n            # Task counts by status\n            task_query = \"\"\"\n                SELECT status, COUNT(*) as count\n                FROM framework_tasks\n       ...",
      "suggested_refactor": "Extract database operations to get_epic_metrics_data_layer() + Extract UI rendering to get_epic_metrics_ui_layer() + Extract logging to get_epic_metrics_audit_layer()"
    },
    {
      "function_name": "project_exists",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 342,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def project_exists(self, project_id: int) -> bool:\n        \"\"\"Check if project exists and is active.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_projects WHERE id = ? AND status != 'cancelled'\"\n            result = self.db_manager.execute_query(query, (project_id,))\n           ...",
      "suggested_refactor": "Extract database operations to project_exists_data_layer() + Extract UI rendering to project_exists_ui_layer() + Extract logging to project_exists_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 360,
      "responsibilities": [
        "logging",
        "validation",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate epic-specific business rules.\"\"\"\n        errors = []\n        \n        # Epic key format validation (EPIC-X.X or similar)\n        if 'epic_key' in data and data['epic_key']:\n            epic_key_pat...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
    },
    {
      "function_name": "create_epic",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 540,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_epic(self, epic_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new epic with validation and gamification.\n        \n        Args:\n            epic_data: Epic information dictionary\n            \n        Returns:\n            ServiceResult with epic ID if succes...",
      "suggested_refactor": "Extract UI rendering to create_epic_ui_layer() + Extract logging to create_epic_audit_layer() + Extract validation to create_epic_validator() + Extract business logic to create_epic_processor()"
    },
    {
      "function_name": "get_epic",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 596,
      "responsibilities": [
        "logging",
        "network",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get epic by ID with project and client information.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with epic data if found\n        \"\"\"\n        self....",
      "suggested_refactor": "Extract UI rendering to get_epic_ui_layer() + Extract logging to get_epic_audit_layer()"
    },
    {
      "function_name": "update_epic",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 632,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_epic(self, epic_id: int, epic_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing epic.\n        \n        Args:\n            epic_id: Epic ID\n            epic_data: Updated epic information\n            \n        Returns:\n            ServiceResult with succes...",
      "suggested_refactor": "Extract database operations to update_epic_data_layer() + Extract UI rendering to update_epic_ui_layer() + Extract logging to update_epic_audit_layer() + Extract validation to update_epic_validator() + Extract business logic to update_epic_processor()"
    },
    {
      "function_name": "delete_epic",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 687,
      "responsibilities": [
        "logging",
        "database",
        "ui",
        "business_logic",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_epic(self, epic_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete epic (soft delete).\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_epic\", epic_id...",
      "suggested_refactor": "Extract database operations to delete_epic_data_layer() + Extract UI rendering to delete_epic_ui_layer() + Extract logging to delete_epic_audit_layer() + Extract business logic to delete_epic_processor()"
    },
    {
      "function_name": "get_epics_by_project",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 789,
      "responsibilities": [
        "logging",
        "ui",
        "business_logic",
        "file_io",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epics_by_project(self, project_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all epics for a specific project.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with list of epics\n        \"\"\"\n     ...",
      "suggested_refactor": "Extract UI rendering to get_epics_by_project_ui_layer() + Extract logging to get_epics_by_project_audit_layer() + Extract business logic to get_epics_by_project_processor()"
    },
    {
      "function_name": "get_epic_summary",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 829,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_summary(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get epic summary with metrics and gamification data.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with epic summary data\n        \"\"\"\n     ...",
      "suggested_refactor": "Extract UI rendering to get_epic_summary_ui_layer() + Extract logging to get_epic_summary_audit_layer() + Extract business logic to get_epic_summary_processor()"
    },
    {
      "function_name": "validate_epic_data",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 869,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_epic_data(self, epic_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate epic data without creating/updating.\n        \n        Args:\n            epic_data: Epic data to validate\n            \n        Returns:\n            ServiceResult indicating if data is vali...",
      "suggested_refactor": "Extract UI rendering to validate_epic_data_ui_layer() + Extract logging to validate_epic_data_audit_layer() + Extract validation to validate_epic_data_validator()"
    },
    {
      "function_name": "_calculate_completion_reward",
      "file_path": "streamlit_extension/services/epic_service.py",
      "line_number": 924,
      "responsibilities": [
        "business_logic",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _calculate_completion_reward(self, epic: Dict[str, Any], metrics: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate rewards for completing this epic.\"\"\"\n        base_points = epic.get('points', 0)\n        difficulty_multiplier = epic.get('difficulty', 3) * 0.2\n        \n        # Bonus ...",
      "suggested_refactor": "Extract UI rendering to _calculate_completion_reward_ui_layer() + Extract business logic to _calculate_completion_reward_processor()"
    },
    {
      "function_name": "find_by_id",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 26,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_id(self, project_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find project by ID with client information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT p.*, c.name as client_name, c.email as client_email\n                FROM framework_projects p\n                L...",
      "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
    },
    {
      "function_name": "find_by_name_and_client",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 41,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_name_and_client(self, name: str, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find project by name and client ID.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_projects WHERE name = ? AND client_id = ?\"\n            result = self.db_manager.execute_query(quer...",
      "suggested_refactor": "Extract database operations to find_by_name_and_client_data_layer() + Extract UI rendering to find_by_name_and_client_ui_layer() + Extract logging to find_by_name_and_client_audit_layer()"
    },
    {
      "function_name": "find_by_client",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 149,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_client(self, client_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all projects for a specific client.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_projects WHERE client_id = ? ORDER BY created_at DESC\"\n            return self.db_manager.execute_query(query, (clien...",
      "suggested_refactor": "Extract database operations to find_by_client_data_layer() + Extract UI rendering to find_by_client_ui_layer() + Extract logging to find_by_client_audit_layer()"
    },
    {
      "function_name": "create",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 158,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def create(self, project_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new project and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_projects (\n                    name, description, client_id, status, start_date, end_date,\n             ...",
      "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
    },
    {
      "function_name": "update",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 186,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update(self, project_id: int, project_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing project.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_projects SET\n                    name = ?, description = ?, client_id = ?, status = ?,\n                    start_d...",
      "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
    },
    {
      "function_name": "delete",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 217,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def delete(self, project_id: int) -> bool:\n        \"\"\"Delete project (soft delete by changing status).\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_projects SET\n                    status = ?, updated_at = ?\n                WHERE id = ?\n            \"\"\"\n            par...",
      "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
    },
    {
      "function_name": "count_epics",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 234,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def count_epics(self, project_id: int) -> int:\n        \"\"\"Count epics for a project.\"\"\"\n        try:\n            query = \"SELECT COUNT(*) FROM framework_epics WHERE project_id = ?\"\n            result = self.db_manager.execute_query(query, (project_id,))\n            return result[0]['COUNT(*)'] i...",
      "suggested_refactor": "Extract database operations to count_epics_data_layer() + Extract UI rendering to count_epics_ui_layer() + Extract logging to count_epics_audit_layer()"
    },
    {
      "function_name": "get_project_metrics",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 244,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_project_metrics(self, project_id: int) -> Dict[str, Any]:\n        \"\"\"Get project metrics (epics, tasks, progress).\"\"\"\n        try:\n            # Count epics by status\n            epic_query = \"\"\"\n                SELECT status, COUNT(*) as count\n                FROM framework_epics\n      ...",
      "suggested_refactor": "Extract database operations to get_project_metrics_data_layer() + Extract UI rendering to get_project_metrics_ui_layer() + Extract logging to get_project_metrics_audit_layer()"
    },
    {
      "function_name": "client_exists",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 291,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def client_exists(self, client_id: int) -> bool:\n        \"\"\"Check if client exists and is active.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_clients WHERE id = ? AND status = 'active'\"\n            result = self.db_manager.execute_query(query, (client_id,))\n            return l...",
      "suggested_refactor": "Extract database operations to client_exists_data_layer() + Extract UI rendering to client_exists_ui_layer() + Extract logging to client_exists_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 309,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate project-specific business rules.\"\"\"\n        errors = []\n        \n        # Name length validation\n        if 'name' in data and data['name']:\n            if len(data['name']) > ValidationRules.MAX_...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator()"
    },
    {
      "function_name": "create_project",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 407,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_project(self, project_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new project with validation.\n        \n        Args:\n            project_data: Project information dictionary\n            \n        Returns:\n            ServiceResult with project ID if succe...",
      "suggested_refactor": "Extract UI rendering to create_project_ui_layer() + Extract logging to create_project_audit_layer() + Extract validation to create_project_validator() + Extract business logic to create_project_processor()"
    },
    {
      "function_name": "get_project",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 458,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_project(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get project by ID with client information.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project data if found\n        \"\"\"\n       ...",
      "suggested_refactor": "Extract UI rendering to get_project_ui_layer() + Extract logging to get_project_audit_layer()"
    },
    {
      "function_name": "update_project",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 481,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_project(self, project_id: int, project_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing project.\n        \n        Args:\n            project_id: Project ID\n            project_data: Updated project information\n            \n        Returns:\n            S...",
      "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer() + Extract validation to update_project_validator() + Extract business logic to update_project_processor()"
    },
    {
      "function_name": "delete_project",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 538,
      "responsibilities": [
        "logging",
        "database",
        "ui",
        "business_logic",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_project(self, project_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete project (soft delete).\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete...",
      "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer() + Extract business logic to delete_project_processor()"
    },
    {
      "function_name": "get_projects_by_client",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 626,
      "responsibilities": [
        "business_logic",
        "logging",
        "network"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_projects_by_client(self, client_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all projects for a specific client.\n        \n        Args:\n            client_id: Client ID\n            \n        Returns:\n            ServiceResult with list of projects\n        \"\"\"\n ...",
      "suggested_refactor": "Extract logging to get_projects_by_client_audit_layer() + Extract business logic to get_projects_by_client_processor()"
    },
    {
      "function_name": "get_project_summary",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 651,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_project_summary(self, project_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get project summary with metrics and client information.\n        \n        Args:\n            project_id: Project ID\n            \n        Returns:\n            ServiceResult with project summary dat...",
      "suggested_refactor": "Extract UI rendering to get_project_summary_ui_layer() + Extract logging to get_project_summary_audit_layer() + Extract business logic to get_project_summary_processor()"
    },
    {
      "function_name": "validate_project_data",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 688,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_project_data(self, project_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate project data without creating/updating.\n        \n        Args:\n            project_data: Project data to validate\n            \n        Returns:\n            ServiceResult indicating ...",
      "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
    },
    {
      "function_name": "_calculate_project_duration",
      "file_path": "streamlit_extension/services/project_service.py",
      "line_number": 711,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _calculate_project_duration(self, start_date: Any, end_date: Any) -> Optional[int]:\n        \"\"\"Calculate project duration in days.\"\"\"\n        if not start_date or not end_date:\n            return None\n        \n        try:\n            # Convert to date objects if they're strings\n            ...",
      "suggested_refactor": "Extract UI rendering to _calculate_project_duration_ui_layer() + Extract logging to _calculate_project_duration_audit_layer() + Extract business logic to _calculate_project_duration_processor()"
    },
    {
      "function_name": "create_error_result",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 270,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_error_result(error_type: ServiceErrorType, message: str, **kwargs) -> ServiceResult[Any]:\n    \"\"\"Utility function to create error result.\"\"\"\n    error = ServiceError(error_type=error_type, message=message, **kwargs)\n    return ServiceResult.fail(error)\n\n",
      "suggested_refactor": "Extract UI rendering to create_error_result_ui_layer() + Extract logging to create_error_result_audit_layer()"
    },
    {
      "function_name": "combine_results",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 276,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def combine_results(*results: ServiceResult) -> ServiceResult[List[Any]]:\n    \"\"\"\n    Combine multiple service results into one.\n    \n    If any result failed, return a failed result with all errors.\n    If all succeeded, return success with all data.\n    \"\"\"\n    all_errors = []\n    all_data = []\n  ...",
      "suggested_refactor": "Extract UI rendering to combine_results_ui_layer() + Extract logging to combine_results_audit_layer()"
    },
    {
      "function_name": "__post_init__",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 58,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __post_init__(self):\n        if self.errors is None:\n            self.errors = []\n    ",
      "suggested_refactor": "Extract UI rendering to __post_init___ui_layer() + Extract logging to __post_init___audit_layer()"
    },
    {
      "function_name": "fail",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 68,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def fail(cls, error: ServiceError) -> 'ServiceResult[T]':\n        \"\"\"Create a failed result with single error.\"\"\"\n        return cls(success=False, errors=[error])\n    ",
      "suggested_refactor": "Extract UI rendering to fail_ui_layer() + Extract logging to fail_audit_layer()"
    },
    {
      "function_name": "fail_multiple",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 73,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def fail_multiple(cls, errors: List[ServiceError]) -> 'ServiceResult[T]':\n        \"\"\"Create a failed result with multiple errors.\"\"\"\n        return cls(success=False, errors=errors)\n    ",
      "suggested_refactor": "Extract UI rendering to fail_multiple_ui_layer() + Extract logging to fail_multiple_audit_layer()"
    },
    {
      "function_name": "validation_error",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 78,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validation_error(cls, message: str, field: Optional[str] = None) -> 'ServiceResult[T]':\n        \"\"\"Create a validation error result.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.VALIDATION_ERROR,\n            message=message,\n            field=field\n        )\n     ...",
      "suggested_refactor": "Extract UI rendering to validation_error_ui_layer() + Extract logging to validation_error_audit_layer()"
    },
    {
      "function_name": "not_found",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 88,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def not_found(cls, entity: str, identifier: Any) -> 'ServiceResult[T]':\n        \"\"\"Create a not found error result.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.NOT_FOUND,\n            message=f\"{entity} not found: {identifier}\"\n        )\n        return cls.fail(error)...",
      "suggested_refactor": "Extract UI rendering to not_found_ui_layer() + Extract logging to not_found_audit_layer()"
    },
    {
      "function_name": "business_rule_violation",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 97,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def business_rule_violation(cls, message: str, details: Optional[Dict[str, Any]] = None) -> 'ServiceResult[T]':\n        \"\"\"Create a business rule violation error.\"\"\"\n        error = ServiceError(\n            error_type=ServiceErrorType.BUSINESS_RULE_VIOLATION,\n            message=message,\n      ...",
      "suggested_refactor": "Extract UI rendering to business_rule_violation_ui_layer() + Extract logging to business_rule_violation_audit_layer() + Extract business logic to business_rule_violation_processor()"
    },
    {
      "function_name": "add_error",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 106,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def add_error(self, error: ServiceError) -> None:\n        \"\"\"Add an error to the result.\"\"\"\n        self.success = False\n        self.errors.append(error)\n    ",
      "suggested_refactor": "Extract UI rendering to add_error_ui_layer() + Extract logging to add_error_audit_layer()"
    },
    {
      "function_name": "get_error_messages",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 111,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_error_messages(self) -> List[str]:\n        \"\"\"Get all error messages as a list of strings.\"\"\"\n        return [str(error) for error in self.errors]\n    ",
      "suggested_refactor": "Extract UI rendering to get_error_messages_ui_layer() + Extract logging to get_error_messages_audit_layer()"
    },
    {
      "function_name": "get_first_error",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 115,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_first_error(self) -> Optional[ServiceError]:\n        \"\"\"Get the first error if any.\"\"\"\n        return self.errors[0] if self.errors else None\n\n",
      "suggested_refactor": "Extract UI rendering to get_first_error_ui_layer() + Extract logging to get_first_error_audit_layer()"
    },
    {
      "function_name": "transaction",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 132,
      "responsibilities": [
        "logging",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def transaction(self):\n        \"\"\"Context manager for database transactions.\"\"\"\n        try:\n            # Start transaction (implementation depends on database manager)\n            yield\n            # Commit if no exception\n        except Exception as e:\n            # Rollback on exception\n    ...",
      "suggested_refactor": "Extract database operations to transaction_data_layer() + Extract logging to transaction_audit_layer()"
    },
    {
      "function_name": "validate_required_fields",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 160,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_required_fields(self, data: Dict[str, Any], required_fields: List[str]) -> List[ServiceError]:\n        \"\"\"Validate that required fields are present and not empty.\"\"\"\n        errors = []\n        \n        for field in required_fields:\n            if field not in data:\n                ...",
      "suggested_refactor": "Extract UI rendering to validate_required_fields_ui_layer() + Extract logging to validate_required_fields_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 180,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"\n        Validate business-specific rules. Override in subclasses.\n        \n        Args:\n            data: Data to validate\n            \n        Returns:\n            List of validation errors\n        \"\"\"\n ...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer()"
    },
    {
      "function_name": "handle_database_error",
      "file_path": "streamlit_extension/services/base.py",
      "line_number": 192,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def handle_database_error(self, operation: str, error: Exception) -> ServiceResult[Any]:\n        \"\"\"Handle database errors with consistent error mapping.\"\"\"\n        self.logger.error(f\"Database error in {operation}: {error}\")\n        \n        service_error = ServiceError(\n            error_type=...",
      "suggested_refactor": "Extract UI rendering to handle_database_error_ui_layer() + Extract logging to handle_database_error_audit_layer()"
    },
    {
      "function_name": "find_by_id",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 28,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_id(self, task_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Find task by ID with epic and project information.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key, \n                       p.name as project_name, c.name as client_na...",
      "suggested_refactor": "Extract database operations to find_by_id_data_layer() + Extract UI rendering to find_by_id_ui_layer() + Extract logging to find_by_id_audit_layer()"
    },
    {
      "function_name": "find_by_task_key",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 46,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_task_key(self, task_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Find task by unique task key.\"\"\"\n        try:\n            query = \"SELECT * FROM framework_tasks WHERE task_key = ?\"\n            result = self.db_manager.execute_query(query, (task_key,))\n            return result[...",
      "suggested_refactor": "Extract database operations to find_by_task_key_data_layer() + Extract UI rendering to find_by_task_key_ui_layer() + Extract logging to find_by_task_key_audit_layer()"
    },
    {
      "function_name": "find_by_epic",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 186,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_epic(self, epic_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Find all tasks for a specific epic.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, COALESCE(ws.total_time, 0) as total_time_minutes\n                FROM framework_tasks t\n                LEFT JOIN (\n   ...",
      "suggested_refactor": "Extract database operations to find_by_epic_data_layer() + Extract UI rendering to find_by_epic_ui_layer() + Extract logging to find_by_epic_audit_layer()"
    },
    {
      "function_name": "find_by_status",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 205,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_status(self, status: str, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find tasks by status.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key\n                FROM framework_tasks t\n                LEFT JOIN fram...",
      "suggested_refactor": "Extract database operations to find_by_status_data_layer() + Extract UI rendering to find_by_status_ui_layer() + Extract logging to find_by_status_audit_layer()"
    },
    {
      "function_name": "find_by_tdd_phase",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 226,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def find_by_tdd_phase(self, tdd_phase: str, limit: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Find tasks by TDD phase.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT t.*, e.title as epic_title, e.epic_key\n                FROM framework_tasks t\n                LEFT ...",
      "suggested_refactor": "Extract database operations to find_by_tdd_phase_data_layer() + Extract UI rendering to find_by_tdd_phase_ui_layer() + Extract logging to find_by_tdd_phase_audit_layer()"
    },
    {
      "function_name": "create",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 247,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create(self, task_data: Dict[str, Any]) -> Optional[int]:\n        \"\"\"Create new task and return the ID.\"\"\"\n        try:\n            query = \"\"\"\n                INSERT INTO framework_tasks (\n                    task_key, title, description, epic_id, status, tdd_phase,\n                    prio...",
      "suggested_refactor": "Extract database operations to create_data_layer() + Extract UI rendering to create_ui_layer() + Extract logging to create_audit_layer()"
    },
    {
      "function_name": "update",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 279,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update(self, task_id: int, task_data: Dict[str, Any]) -> bool:\n        \"\"\"Update existing task.\"\"\"\n        try:\n            query = \"\"\"\n                UPDATE framework_tasks SET\n                    task_key = ?, title = ?, description = ?, epic_id = ?,\n                    status = ?, tdd_ph...",
      "suggested_refactor": "Extract database operations to update_data_layer() + Extract UI rendering to update_ui_layer() + Extract logging to update_audit_layer()"
    },
    {
      "function_name": "delete",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 314,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete(self, task_id: int) -> bool:\n        \"\"\"Delete task (hard delete since tasks are granular).\"\"\"\n        try:\n            # First delete related work sessions\n            self.db_manager.execute_update(\n                \"DELETE FROM work_sessions WHERE task_id = ?\", \n                (tas...",
      "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
    },
    {
      "function_name": "epic_exists",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 332,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def epic_exists(self, epic_id: int) -> bool:\n        \"\"\"Check if epic exists and is not cancelled.\"\"\"\n        try:\n            query = \"SELECT id FROM framework_epics WHERE id = ? AND status != 'cancelled'\"\n            result = self.db_manager.execute_query(query, (epic_id,))\n            return ...",
      "suggested_refactor": "Extract database operations to epic_exists_data_layer() + Extract UI rendering to epic_exists_ui_layer() + Extract logging to epic_exists_audit_layer()"
    },
    {
      "function_name": "get_task_time_tracking",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 342,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_task_time_tracking(self, task_id: int) -> Dict[str, Any]:\n        \"\"\"Get time tracking data for a task.\"\"\"\n        try:\n            query = \"\"\"\n                SELECT \n                    COUNT(*) as session_count,\n                    SUM(duration_minutes) as total_minutes,\n             ...",
      "suggested_refactor": "Extract database operations to get_task_time_tracking_data_layer() + Extract UI rendering to get_task_time_tracking_ui_layer() + Extract logging to get_task_time_tracking_audit_layer()"
    },
    {
      "function_name": "validate_business_rules",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 408,
      "responsibilities": [
        "ui",
        "business_logic",
        "network",
        "file_io",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_business_rules(self, data: Dict[str, Any]) -> List[ServiceError]:\n        \"\"\"Validate task-specific business rules.\"\"\"\n        errors = []\n        \n        # Task key format validation (TASK-X.X.X or similar)\n        if 'task_key' in data and data['task_key']:\n            task_key_p...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_ui_layer() + Extract logging to validate_business_rules_audit_layer() + Extract validation to validate_business_rules_validator() + Extract business logic to validate_business_rules_processor()"
    },
    {
      "function_name": "create_task",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 580,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_task(self, task_data: Dict[str, Any]) -> ServiceResult[int]:\n        \"\"\"\n        Create a new task with TDD workflow validation.\n        \n        Args:\n            task_data: Task information dictionary\n            \n        Returns:\n            ServiceResult with task ID if successful...",
      "suggested_refactor": "Extract UI rendering to create_task_ui_layer() + Extract logging to create_task_audit_layer() + Extract validation to create_task_validator() + Extract business logic to create_task_processor()"
    },
    {
      "function_name": "get_task",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 636,
      "responsibilities": [
        "logging",
        "network",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_task(self, task_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get task by ID with epic and project information.\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with task data if found\n        \"\"\"\n        self.lo...",
      "suggested_refactor": "Extract UI rendering to get_task_ui_layer() + Extract logging to get_task_audit_layer()"
    },
    {
      "function_name": "update_task",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 672,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def update_task(self, task_id: int, task_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Update existing task with TDD workflow validation.\n        \n        Args:\n            task_id: Task ID\n            task_data: Updated task information\n            \n        Returns:\n        ...",
      "suggested_refactor": "Extract database operations to update_task_data_layer() + Extract UI rendering to update_task_ui_layer() + Extract logging to update_task_audit_layer() + Extract validation to update_task_validator() + Extract business logic to update_task_processor()"
    },
    {
      "function_name": "delete_task",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 727,
      "responsibilities": [
        "logging",
        "database",
        "ui",
        "business_logic",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_task(self, task_id: int) -> ServiceResult[bool]:\n        \"\"\"\n        Delete task (hard delete).\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with success status\n        \"\"\"\n        self.log_operation(\"delete_task\", task_id...",
      "suggested_refactor": "Extract database operations to delete_task_data_layer() + Extract UI rendering to delete_task_ui_layer() + Extract logging to delete_task_audit_layer() + Extract business logic to delete_task_processor()"
    },
    {
      "function_name": "get_tasks_by_epic",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 821,
      "responsibilities": [
        "logging",
        "ui",
        "business_logic",
        "file_io",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_tasks_by_epic(self, epic_id: int) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get all tasks for a specific epic.\n        \n        Args:\n            epic_id: Epic ID\n            \n        Returns:\n            ServiceResult with list of tasks\n        \"\"\"\n        self.log_ope...",
      "suggested_refactor": "Extract UI rendering to get_tasks_by_epic_ui_layer() + Extract logging to get_tasks_by_epic_audit_layer() + Extract business logic to get_tasks_by_epic_processor()"
    },
    {
      "function_name": "get_tasks_by_status",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 861,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_tasks_by_status(self, status: str, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get tasks by status for workflow management.\n        \n        Args:\n            status: Task status\n            limit: Optional limit on number of tasks\n           ...",
      "suggested_refactor": "Extract UI rendering to get_tasks_by_status_ui_layer() + Extract logging to get_tasks_by_status_audit_layer()"
    },
    {
      "function_name": "get_tasks_by_tdd_phase",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 888,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_tasks_by_tdd_phase(self, tdd_phase: str, limit: Optional[int] = None) -> ServiceResult[List[Dict[str, Any]]]:\n        \"\"\"\n        Get tasks by TDD phase for workflow management.\n        \n        Args:\n            tdd_phase: TDD phase\n            limit: Optional limit on number of tasks\n ...",
      "suggested_refactor": "Extract UI rendering to get_tasks_by_tdd_phase_ui_layer() + Extract logging to get_tasks_by_tdd_phase_audit_layer()"
    },
    {
      "function_name": "advance_tdd_phase",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 915,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def advance_tdd_phase(self, task_id: int) -> ServiceResult[str]:\n        \"\"\"\n        Advance task to next TDD phase (RED -> GREEN -> REFACTOR).\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with new TDD phase\n        \"\"\"\n        self....",
      "suggested_refactor": "Extract database operations to advance_tdd_phase_data_layer() + Extract UI rendering to advance_tdd_phase_ui_layer() + Extract logging to advance_tdd_phase_audit_layer()"
    },
    {
      "function_name": "get_task_summary",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 975,
      "responsibilities": [
        "business_logic",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_task_summary(self, task_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Get task summary with time tracking and TDD progress.\n        \n        Args:\n            task_id: Task ID\n            \n        Returns:\n            ServiceResult with task summary data\n        \"\"\"\n    ...",
      "suggested_refactor": "Extract UI rendering to get_task_summary_ui_layer() + Extract logging to get_task_summary_audit_layer() + Extract business logic to get_task_summary_processor()"
    },
    {
      "function_name": "validate_task_data",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1017,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_task_data(self, task_data: Dict[str, Any]) -> ServiceResult[bool]:\n        \"\"\"\n        Validate task data without creating/updating.\n        \n        Args:\n            task_data: Task data to validate\n            \n        Returns:\n            ServiceResult indicating if data is vali...",
      "suggested_refactor": "Extract UI rendering to validate_task_data_ui_layer() + Extract logging to validate_task_data_audit_layer() + Extract validation to validate_task_data_validator()"
    },
    {
      "function_name": "_is_task_overdue",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1117,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _is_task_overdue(self, due_date: Any) -> bool:\n        \"\"\"Check if task is overdue.\"\"\"\n        if not due_date:\n            return False\n        \n        try:\n            if isinstance(due_date, str):\n                due_date = datetime.strptime(due_date, '%Y-%m-%d').date()\n            \n    ...",
      "suggested_refactor": "Extract UI rendering to _is_task_overdue_ui_layer() + Extract logging to _is_task_overdue_audit_layer()"
    },
    {
      "function_name": "_days_until_due",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1130,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _days_until_due(self, due_date: Any) -> Optional[int]:\n        \"\"\"Calculate days until due date.\"\"\"\n        if not due_date:\n            return None\n        \n        try:\n            if isinstance(due_date, str):\n                due_date = datetime.strptime(due_date, '%Y-%m-%d').date()\n     ...",
      "suggested_refactor": "Extract UI rendering to _days_until_due_ui_layer() + Extract logging to _days_until_due_audit_layer()"
    },
    {
      "function_name": "get_execution_summary",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1199,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_execution_summary(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Obt\u00e9m sum\u00e1rio executivo de um plano de execu\u00e7\u00e3o.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            ServiceResult contendo sum\u00e1rio executivo\n        ...",
      "suggested_refactor": "Extract database operations to get_execution_summary_data_layer() + Extract UI rendering to get_execution_summary_ui_layer() + Extract logging to get_execution_summary_audit_layer()"
    },
    {
      "function_name": "validate_epic_dependencies",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1233,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_epic_dependencies(self, epic_id: int) -> ServiceResult[Dict[str, Any]]:\n        \"\"\"\n        Valida estrutura de depend\u00eancias de um \u00e9pico (DAG validation).\n        \n        Args:\n            epic_id: ID do \u00e9pico para validar\n            \n        Returns:\n            ServiceResult con...",
      "suggested_refactor": "Extract database operations to validate_epic_dependencies_data_layer() + Extract UI rendering to validate_epic_dependencies_ui_layer() + Extract logging to validate_epic_dependencies_audit_layer() + Extract validation to validate_epic_dependencies_validator()"
    },
    {
      "function_name": "_enrich_execution_plan",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1396,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _enrich_execution_plan(self, plan: ExecutionPlan) -> ExecutionPlan:\n        \"\"\"Enriquece plano de execu\u00e7\u00e3o com dados espec\u00edficos do TaskService.\"\"\"\n        try:\n            # Add additional metadata from TaskService context\n            # This could include deadline information, resource assi...",
      "suggested_refactor": "Extract UI rendering to _enrich_execution_plan_ui_layer() + Extract logging to _enrich_execution_plan_audit_layer()"
    },
    {
      "function_name": "_enhance_execution_summary",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1406,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _enhance_execution_summary(self, summary: Dict[str, Any], epic_id: int) -> Dict[str, Any]:\n        \"\"\"Enriquece sum\u00e1rio executivo com m\u00e9tricas do TaskService.\"\"\"\n        try:\n            # Get epic tasks for additional context\n            tasks_result = self.get_tasks_by_epic(epic_id)\n      ...",
      "suggested_refactor": "Extract UI rendering to _enhance_execution_summary_ui_layer() + Extract logging to _enhance_execution_summary_audit_layer() + Extract business logic to _enhance_execution_summary_processor()"
    },
    {
      "function_name": "_generate_dependency_recommendations",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1431,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_dependency_recommendations(self, validation_result: Dict[str, Any]) -> List[str]:\n        \"\"\"Gera recomenda\u00e7\u00f5es baseadas na valida\u00e7\u00e3o de depend\u00eancias.\"\"\"\n        recommendations = []\n        \n        try:\n            if not validation_result[\"is_valid\"]:\n                if \"ciclo\" ...",
      "suggested_refactor": "Extract UI rendering to _generate_dependency_recommendations_ui_layer() + Extract logging to _generate_dependency_recommendations_audit_layer()"
    },
    {
      "function_name": "_calculate_sequence_efficiency",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1458,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _calculate_sequence_efficiency(self, plan: ExecutionPlan) -> float:\n        \"\"\"Calcula efici\u00eancia da sequ\u00eancia de execu\u00e7\u00e3o.\"\"\"\n        try:\n            # Simple metric: ratio of critical path to total tasks\n            if plan.execution_metrics.get(\"total_tasks\", 0) == 0:\n                ret...",
      "suggested_refactor": "Extract UI rendering to _calculate_sequence_efficiency_ui_layer() + Extract logging to _calculate_sequence_efficiency_audit_layer() + Extract business logic to _calculate_sequence_efficiency_processor()"
    },
    {
      "function_name": "_analyze_dependency_optimization",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1472,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _analyze_dependency_optimization(self, plan: ExecutionPlan) -> Dict[str, Any]:\n        \"\"\"Analisa otimiza\u00e7\u00e3o de depend\u00eancias.\"\"\"\n        try:\n            metrics = plan.execution_metrics\n            return {\n                \"dependency_ratio\": metrics.get(\"avg_dependencies_per_task\", 0),\n   ...",
      "suggested_refactor": "Extract UI rendering to _analyze_dependency_optimization_ui_layer() + Extract logging to _analyze_dependency_optimization_audit_layer()"
    },
    {
      "function_name": "_generate_optimization_recommendations",
      "file_path": "streamlit_extension/services/task_service.py",
      "line_number": 1500,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_optimization_recommendations(self, plan: ExecutionPlan, goal: str) -> List[str]:\n        \"\"\"Gera recomenda\u00e7\u00f5es de otimiza\u00e7\u00e3o baseadas no objetivo.\"\"\"\n        recommendations = []\n        \n        try:\n            metrics = plan.execution_metrics\n            total_hours = metrics.ge...",
      "suggested_refactor": "Extract UI rendering to _generate_optimization_recommendations_ui_layer() + Extract logging to _generate_optimization_recommendations_audit_layer()"
    },
    {
      "function_name": "render_current_page",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 99,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_current_page(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the current page based on session state navigation.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        current_page = get_current_pa...",
      "suggested_refactor": "Extract UI rendering to render_current_page_ui_layer() + Extract logging to render_current_page_audit_layer()"
    },
    {
      "function_name": "_render_pages_system_page",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 128,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _render_pages_system_page(current_page: str) -> None:\n    \"\"\"\n    Render a page using the pages system.\n    \n    Args:\n        current_page: Name of the page to render\n    \"\"\"\n    page_id = current_page.lower()  # Convert \"Clients\" -> \"clients\"\n    \n    with streamlit_error_boundary(f\"render_pag...",
      "suggested_refactor": "Extract UI rendering to _render_pages_system_page_ui_layer() + Extract logging to _render_pages_system_page_audit_layer()"
    },
    {
      "function_name": "_render_page_not_found",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 147,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _render_page_not_found(current_page: str) -> None:\n    \"\"\"\n    Render page not found error.\n    \n    Args:\n        current_page: Name of the page that was not found\n    \"\"\"\n    st.error(f\"\u274c Page '{current_page}' is not available\")\n    st.info(\"Available pages: Dashboard\")\n    if st.button(\"\ud83c\udfe0 Ret...",
      "suggested_refactor": "Extract UI rendering to _render_page_not_found_ui_layer() + Extract logging to _render_page_not_found_audit_layer()"
    },
    {
      "function_name": "render_dashboard_content",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 168,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_dashboard_content(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the default dashboard content.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        # Analytics row\n        with streamlit_error_...",
      "suggested_refactor": "Extract UI rendering to render_dashboard_content_ui_layer() + Extract logging to render_dashboard_content_audit_layer()"
    },
    {
      "function_name": "_render_analytics_section",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 196,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _render_analytics_section(user: Dict[str, Any]) -> None:\n    \"\"\"\n    Render the analytics cards section.\n    \n    Args:\n        user: Current authenticated user information\n    \"\"\"\n    stats = fetch_user_stats(user.get(\"id\") if isinstance(user, dict) else None)\n    render_analytics_cards(stats o...",
      "suggested_refactor": "Extract UI rendering to _render_analytics_section_ui_layer()"
    },
    {
      "function_name": "_render_heatmap_tasks_section",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 206,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _render_heatmap_tasks_section() -> None:\n    \"\"\"Render the heatmap and tasks section.\"\"\"\n    epics = fetch_epics()\n    selected_epic_id = get_selected_epic_id()\n    render_heatmap_and_tasks(epics, selected_epic_id)\n",
      "suggested_refactor": "Extract database operations to _render_heatmap_tasks_section_data_layer() + Extract UI rendering to _render_heatmap_tasks_section_ui_layer()"
    },
    {
      "function_name": "get_available_page_names",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 230,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_available_page_names() -> List[str]:\n    \"\"\"\n    Get list of available page names.\n    \n    Returns:\n        List of available page names\n    \"\"\"\n    if PAGES_AVAILABLE:\n        try:\n            available_pages = get_available_pages()\n            page_names = list(available_pages.keys())\n   ...",
      "suggested_refactor": "Extract UI rendering to get_available_page_names_ui_layer() + Extract logging to get_available_page_names_audit_layer()"
    },
    {
      "function_name": "render_breadcrumb_navigation",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 297,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_breadcrumb_navigation() -> None:\n    \"\"\"Render breadcrumb navigation based on current page.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        current_page = get_current_page()\n        \n        # Build breadcrumb trail\n        breadcrumbs = [\"\ud83c\udfe0 Home\"]\n        if curre...",
      "suggested_refactor": "Extract UI rendering to render_breadcrumb_navigation_ui_layer() + Extract logging to render_breadcrumb_navigation_audit_layer()"
    },
    {
      "function_name": "check_page_manager_health",
      "file_path": "streamlit_extension/components/page_manager.py",
      "line_number": 319,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def check_page_manager_health() -> Dict[str, Any]:\n    \"\"\"Check health of page manager dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"analytics_cards_available\": ANALYTICS_CARDS_AVAILABLE,\n        \"layout_renderers_available\": LAYOUT_RENDERERS_AVAILABLE,\n ...",
      "suggested_refactor": "Extract UI rendering to check_page_manager_health_ui_layer()"
    },
    {
      "function_name": "fetch_user_stats",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 82,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def fetch_user_stats(user_id: Optional[int] = None) -> Dict[str, Any]:\n    \"\"\"Fetch user statistics using AnalyticsService with fallbacks.\"\"\"\n    def _call():\n        try:\n            # Use AnalyticsService instead of direct database queries\n            from ..services.service_container import Servi...",
      "suggested_refactor": "Extract UI rendering to fetch_user_stats_ui_layer()"
    },
    {
      "function_name": "clear_all_caches",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 163,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def clear_all_caches() -> None:\n    \"\"\"Clear all data provider caches.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n        \n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        l...",
      "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer() + Extract logging to clear_all_caches_audit_layer()"
    },
    {
      "function_name": "clear_specific_cache",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 177,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def clear_specific_cache(cache_key: str) -> None:\n    \"\"\"Clear specific cache by key pattern.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n        \n    try:\n        # Clear specific function caches\n        if cache_key == \"user_stats\":\n            fetch_user_stats.clear()\n        elif cache_key...",
      "suggested_refactor": "Extract UI rendering to clear_specific_cache_ui_layer() + Extract logging to clear_specific_cache_audit_layer()"
    },
    {
      "function_name": "refresh_all_data",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 220,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def refresh_all_data() -> Dict[str, Any]:\n    \"\"\"Force refresh all data by clearing all caches.\"\"\"\n    clear_all_caches()\n    return {\n        \"user_stats\": fetch_user_stats(),\n        \"epics\": fetch_epics(),\n        \"health\": fetch_health(),\n        \"refreshed_at\": \"now\"\n    }\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "_call",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 84,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _call():\n        try:\n            # Use AnalyticsService instead of direct database queries\n            from ..services.service_container import ServiceContainer\n            \n            container = ServiceContainer()\n            analytics = container.get_analytics_service()\n            \n   ...",
      "suggested_refactor": "Extract UI rendering to _call_ui_layer()"
    },
    {
      "function_name": "safe_streamlit_operation",
      "file_path": "streamlit_extension/components/data_providers.py",
      "line_number": 59,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def safe_streamlit_operation(func, *args, default_return=None, operation_name=None, **kwargs):\n        \"\"\"Fallback safe operation wrapper.\"\"\"\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            print(f\"\ud83d\udea8 OPERATION ERROR ({operation_name or 'unknown'})...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
    },
    {
      "function_name": "show",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 116,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def show(notification: Optional[NotificationData] = None, **kwargs) -> None:\n        \"\"\"\n        Show notification toast fallback.\n        \n        Args:\n            notification: Notification data to display\n            **kwargs: Additional arguments (ignored in fallback)\n        \"\"\"\n        de...",
      "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 153,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self) -> None:\n        \"\"\"Render timer component fallback.\"\"\"\n        def _render():\n            st.write(\"\u23f1\ufe0f Timer Component (Fallback Mode)\")\n            st.info(\"Timer functionality indispon\u00edvel. Componente principal n\u00e3o carregado.\")\n            \n            # Basic timer controls ...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 182,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(fields: List[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:\n        \"\"\"\n        Render standard form fallback.\n        \n        Args:\n            fields: Form field definitions\n            **kwargs: Additional form options\n            \n        Returns:\n            Form result di...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 285,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def render(items: List[Dict[str, Any]] = None, **kwargs) -> Optional[str]:\n        \"\"\"\n        Render navigation menu fallback.\n        \n        Args:\n            items: Menu item definitions\n            **kwargs: Additional options\n            \n        Returns:\n            Selected menu item or...",
      "suggested_refactor": "Extract database operations to render_data_layer() + Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "_show",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 124,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def _show():\n            if notification and getattr(notification, \"message\", None):\n                message = f\"\ud83d\udd14 {notification.message}\"\n                \n                # Show notification based on type\n                if notification.type == \"success\":\n                    st.success(mess...",
      "suggested_refactor": "Extract UI rendering to _show_ui_layer() + Extract logging to _show_audit_layer()"
    },
    {
      "function_name": "_render",
      "file_path": "streamlit_extension/components/fallback_components.py",
      "line_number": 155,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def _render():\n            st.write(\"\u23f1\ufe0f Timer Component (Fallback Mode)\")\n            st.info(\"Timer functionality indispon\u00edvel. Componente principal n\u00e3o carregado.\")\n            \n            # Basic timer controls fallback\n            col1, col2, col3 = st.columns(3)\n            \n          ...",
      "suggested_refactor": "Extract UI rendering to _render_ui_layer()"
    },
    {
      "function_name": "fetch_health",
      "file_path": "streamlit_extension/components/health_widgets.py",
      "line_number": 49,
      "responsibilities": [
        "network",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def fetch_health() -> Dict[str, Any]:\n    \"\"\"\n    Fetch health status from available sources.\n    Uses same logic as streamlit_app.fetch_health() - UI-only, no reimplementation.\n    \"\"\"\n    try:\n        if SERVICES_HEALTH_AVAILABLE:\n            return check_services_health()\n        return {\n       ...",
      "suggested_refactor": "Extract validation to fetch_health_validator()"
    },
    {
      "function_name": "clear_health_cache",
      "file_path": "streamlit_extension/components/health_widgets.py",
      "line_number": 97,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def clear_health_cache() -> None:\n    \"\"\"Clear health-related caches using same logic as streamlit_app._clear_caches().\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n      ...",
      "suggested_refactor": "Extract UI rendering to clear_health_cache_ui_layer() + Extract logging to clear_health_cache_audit_layer()"
    },
    {
      "function_name": "render_health_section",
      "file_path": "streamlit_extension/components/health_widgets.py",
      "line_number": 149,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_health_section(show_detailed: bool = False) -> None:\n    \"\"\"\n    Main health section renderer - UI only with graceful fallbacks.\n\n    Args:\n        show_detailed: Whether to show detailed metrics expansion\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        health = s...",
      "suggested_refactor": "Extract UI rendering to render_health_section_ui_layer() + Extract logging to render_health_section_audit_layer()"
    },
    {
      "function_name": "_safe_float_conversion",
      "file_path": "streamlit_extension/components/analytics_cards.py",
      "line_number": 50,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _safe_float_conversion(value: Any, default: float = 0.0) -> float:\n    \"\"\"\n    Safely convert value to float with fallback.\n    Extracted from streamlit_app._as_float() for reusability.\n    \"\"\"\n    try:\n        return float(value if value is not None else default)\n    except (ValueError, TypeErr...",
      "suggested_refactor": "Extract UI rendering to _safe_float_conversion_ui_layer() + Extract logging to _safe_float_conversion_audit_layer()"
    },
    {
      "function_name": "_safe_session_state_access",
      "file_path": "streamlit_extension/components/analytics_cards.py",
      "line_number": 76,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _safe_session_state_access(key: str, default: Any = None) -> Any:\n    \"\"\"\n    Safely access Streamlit session state with fallback.\n    USES SESSION_MANAGER ABSTRACTION - NO DIRECT ACCESS\n    \"\"\"\n    try:\n        from ..utils.session_manager import get_session_value\n        return get_session_val...",
      "suggested_refactor": "Extract UI rendering to _safe_session_state_access_ui_layer()"
    },
    {
      "function_name": "render_sparkline_chart_card",
      "file_path": "streamlit_extension/components/analytics_cards.py",
      "line_number": 132,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_sparkline_chart_card(stats: Dict[str, Any]) -> None:\n    \"\"\"Render focus sparkline chart with fallback.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    validated_stats = _validate_stats_input(stats)\n    \n    try:\n        focus_series = validated_stats.get(\"focus_series\") or []\n...",
      "suggested_refactor": "Extract UI rendering to render_sparkline_chart_card_ui_layer() + Extract logging to render_sparkline_chart_card_audit_layer()"
    },
    {
      "function_name": "render_analytics_cards",
      "file_path": "streamlit_extension/components/analytics_cards.py",
      "line_number": 157,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_analytics_cards(stats: Optional[Dict[str, Any]] = None) -> None:\n    \"\"\"\n    Main analytics cards renderer - UI only with prepared data.\n    \n    Args:\n        stats: Dictionary containing analytics data (KPIs, metrics, series)\n               Expected keys: completed_tasks, weekly_complet...",
      "suggested_refactor": "Extract UI rendering to render_analytics_cards_ui_layer() + Extract logging to render_analytics_cards_audit_layer()"
    },
    {
      "function_name": "render_kpi_summary",
      "file_path": "streamlit_extension/components/analytics_cards.py",
      "line_number": 194,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_kpi_summary(kpis: Optional[Dict[str, Any]] = None) -> None:\n    \"\"\"\n    Render high-level KPI summary cards.\n    Alternative layout for executive dashboards.\n    \n    Args:\n        kpis: Dictionary containing KPI data\n              Expected keys: total_tasks, completed_tasks, focus_time_h...",
      "suggested_refactor": "Extract UI rendering to render_kpi_summary_ui_layer() + Extract logging to render_kpi_summary_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/status_components.py",
      "line_number": 93,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self, text: str = None, show_icon: bool = True, size: str = \"normal\") -> None:\n        \"\"\"Render the status badge.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[{self.status.upper()}] {text or self.status}\")\n            return\n        \n        display_text = text or self...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render_list",
      "file_path": "streamlit_extension/components/status_components.py",
      "line_number": 134,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_list(statuses: List[str], texts: Optional[List[str]] = None, \n                   show_icons: bool = True, size: str = \"normal\") -> None:\n        \"\"\"Render multiple status badges in a row.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            for i, status in enumerate(statuses):\n        ...",
      "suggested_refactor": "Extract UI rendering to render_list_ui_layer() + Extract logging to render_list_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/status_components.py",
      "line_number": 194,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self, color_scheme: str = \"blue\", show_numbers: bool = True,\n              height: int = 20) -> None:\n        \"\"\"Render the progress card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.current}/{self.total} ({self.percentage:.1f}%)\")\n            if sel...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render_mini",
      "file_path": "streamlit_extension/components/status_components.py",
      "line_number": 272,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_mini(self, width: int = 100) -> None:\n        \"\"\"Render a compact version of the progress card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.percentage:.1f}%\")\n            return\n        \n        progress_html = f\"\"\"\n        <div style=\"display: inlin...",
      "suggested_refactor": "Extract UI rendering to render_mini_ui_layer() + Extract logging to render_mini_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/status_components.py",
      "line_number": 316,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self, layout: str = \"default\", show_chart: bool = False,\n              chart_data: Optional[List[Union[int, float]]] = None) -> None:\n        \"\"\"Render the metric card with various layout options.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"{self.title}: {self.prefix}{s...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "_init_state",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 120,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _init_state():\n    if not STREAMLIT_AVAILABLE:\n        return\n    st.session_state.setdefault(SK_CFG, DEFAULT_CFG.copy())\n    st.session_state.setdefault(SK_SESSION, None)\n    st.session_state.setdefault(SK_CYCLES, 0)\n",
      "suggested_refactor": "Extract UI rendering to _init_state_ui_layer()"
    },
    {
      "function_name": "get_session_summary",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 165,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_session_summary(self) -> Dict[str, Any]:\n        \"\"\"Resumo da sess\u00e3o atual (sem render).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return {}\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cfg = st.session_state.get(SK_CFG, DEFAULT_CFG)\n        retu...",
      "suggested_refactor": "Extract UI rendering to get_session_summary_ui_layer()"
    },
    {
      "function_name": "_render_ui",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 181,
      "responsibilities": [
        "auth",
        "database",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _render_ui(self, get_current_task_id: Optional[Callable[[], Optional[int]]]) -> Dict[str, Any]:\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cfg: Dict[str, Any] = st.session_state.get(SK_CFG, DEFAULT_CFG)\n\n        # Header\n        st.markdown(\"## \u23f1\ufe0f Focus Tim...",
      "suggested_refactor": "Extract database operations to _render_ui_data_layer() + Extract UI rendering to _render_ui_ui_layer()"
    },
    {
      "function_name": "_action_start",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 313,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _action_start(self, ts: Optional[TimerSession], cfg: Dict[str, Any],\n                      get_current_task_id: Optional[Callable[[], Optional[int]]]) -> None:\n        # Retomar sess\u00e3o pausada\n        if ts and not ts.is_active:\n            ts.is_active = True\n            ts.started_at = now...",
      "suggested_refactor": "Extract UI rendering to _action_start_ui_layer()"
    },
    {
      "function_name": "_action_stop",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 359,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _action_stop(self, ts: Optional[TimerSession], cfg: Dict[str, Any], save: bool) -> None:\n        if not ts:\n            return\n        # Finaliza\n        ts.is_active = False\n        ts.ended_at = now().isoformat()\n        # normaliza acumulado final\n        ts.accum_sec = ts.elapsed_sec()\n ...",
      "suggested_refactor": "Extract UI rendering to _action_stop_ui_layer()"
    },
    {
      "function_name": "_next_session_type",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 390,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _next_session_type(self, cfg: Dict[str, Any]) -> str:\n        ts: Optional[TimerSession] = st.session_state.get(SK_SESSION)\n        cycles = _safe_int(st.session_state.get(SK_CYCLES), 0)\n        # Se ainda n\u00e3o houve foco conclu\u00eddo, come\u00e7a com foco\n        if ts is None:\n            return \"f...",
      "suggested_refactor": "Extract UI rendering to _next_session_type_ui_layer()"
    },
    {
      "function_name": "_persist_focus_session",
      "file_path": "streamlit_extension/components/timer.py",
      "line_number": 419,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _persist_focus_session(self, ts: TimerSession) -> bool:\n        if not DATABASE_AVAILABLE:\n            if STREAMLIT_AVAILABLE:\n                st.info(\"\u2139\ufe0f Banco indispon\u00edvel \u2014 sess\u00e3o n\u00e3o foi salva.\")\n            return False\n\n        payload = {\n            \"task_id\": ts.task_id,\n           ...",
      "suggested_refactor": "Extract database operations to _persist_focus_session_data_layer() + Extract UI rendering to _persist_focus_session_ui_layer() + Extract logging to _persist_focus_session_audit_layer()"
    },
    {
      "function_name": "create_two_column_layout",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 332,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_two_column_layout(left_content: Callable[[], None], \n                           right_content: Callable[[], None],\n                           ratio: List[int] = [1, 1]) -> None:\n    \"\"\"Create a simple two-column layout.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[LEFT COLUMN]\")\n   ...",
      "suggested_refactor": "Extract UI rendering to create_two_column_layout_ui_layer() + Extract logging to create_two_column_layout_audit_layer()"
    },
    {
      "function_name": "create_three_column_layout",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 358,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_three_column_layout(left_content: Callable[[], None],\n                             center_content: Callable[[], None], \n                             right_content: Callable[[], None],\n                             ratio: List[int] = [1, 1, 1]) -> None:\n    \"\"\"Create a three-column layout.\"...",
      "suggested_refactor": "Extract UI rendering to create_three_column_layout_ui_layer() + Extract logging to create_three_column_layout_audit_layer()"
    },
    {
      "function_name": "create_sidebar_main_layout",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 385,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_sidebar_main_layout(sidebar_content: Callable[[], None],\n                             main_content: Callable[[], None]) -> None:\n    \"\"\"Create sidebar + main content layout.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[SIDEBAR]\")\n        sidebar_content()\n        print(\"[MAIN CONTEN...",
      "suggested_refactor": "Extract UI rendering to create_sidebar_main_layout_ui_layer() + Extract logging to create_sidebar_main_layout_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 64,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering content within the card.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            if self.title:\n                print(f\"=== {self.title} ===\")\n            if self.subtitle:\n                print(f\"--- {self.subtitle} ---\")\n            \n      ...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render_grid",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 124,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_grid(cards: List[Dict[str, Any]], columns: int = 2) -> None:\n        \"\"\"Render multiple cards in a grid layout.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            for card_data in cards:\n                print(f\"=== {card_data.get('title', 'Card')} ===\")\n                if 'content' in...",
      "suggested_refactor": "Extract UI rendering to render_grid_ui_layer() + Extract logging to render_grid_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 172,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering sidebar section content.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            icon_part = f\"{self.icon} \" if self.icon else \"\"\n            print(f\"[SIDEBAR] {icon_part}{self.title}\")\n            if self.help_text:\n                print(f\" ...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render_divider",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 204,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_divider(text: str = None) -> None:\n        \"\"\"Render a divider in the sidebar.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"--- {text or ''} ---\")\n            return\n        \n        if text:\n            st.sidebar.markdown(f\"---\\n**{text}**\")\n        else:\n            s...",
      "suggested_refactor": "Extract UI rendering to render_divider_ui_layer() + Extract logging to render_divider_audit_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 234,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self):\n        \"\"\"Context manager for rendering expandable section.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[EXPANDABLE] {self.icon} {self.title}\")\n            if self.help_text:\n                print(f\"  Help: {self.help_text}\")\n            \n            yield\n     ...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "is_expanded",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 279,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def is_expanded(self) -> bool:\n        \"\"\"Check if the section is currently expanded (approximation).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return self.default_expanded\n        \n        # Note: Streamlit doesn't provide direct access to expander state\n        # This is a best-effort...",
      "suggested_refactor": "Extract UI rendering to is_expanded_ui_layer()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 303,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(self):\n        \"\"\"Render tabs e retorna objetos dos tabs (padr\u00e3o st.tabs).\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            print(f\"[TABS] Available: {', '.join(self.tabs)}\")\n            return self.default_tab\n        \n        # Build tab labels with icons\n        tab_labels = [f\"{...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "render_tab_content",
      "file_path": "streamlit_extension/components/layout_components.py",
      "line_number": 319,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_tab_content(self, tab_index: int):\n        \"\"\"Context manager for rendering content in a specific tab.\"\"\"\n        tab_objects = self.render()\n        \n        if STREAMLIT_AVAILABLE:\n            with tab_objects[tab_index]:\n                yield\n        else:\n            print(f\"[TAB ...",
      "suggested_refactor": "Extract UI rendering to render_tab_content_ui_layer() + Extract logging to render_tab_content_audit_layer()"
    },
    {
      "function_name": "get_available_components",
      "file_path": "streamlit_extension/components/__init__.py",
      "line_number": 76,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_available_components():\n    \"\"\"Get list of available component categories.\"\"\"\n    return {\n        cat_id: cat_info \n        for cat_id, cat_info in COMPONENT_REGISTRY.items() \n        if cat_info[\"available\"]\n    }\n",
      "suggested_refactor": "Extract UI rendering to get_available_components_ui_layer() + Extract logging to get_available_components_audit_layer()"
    },
    {
      "function_name": "get_component_status",
      "file_path": "streamlit_extension/components/__init__.py",
      "line_number": 84,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_component_status():\n    \"\"\"Get status of all component categories.\"\"\"\n    status = {}\n    for cat_id, cat_info in COMPONENT_REGISTRY.items():\n        status[cat_id] = {\n            \"available\": cat_info[\"available\"],\n            \"component_count\": len(cat_info[\"components\"]),\n            \"de...",
      "suggested_refactor": "Extract UI rendering to get_component_status_ui_layer() + Extract logging to get_component_status_audit_layer()"
    },
    {
      "function_name": "render_debug_panel",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 77,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_debug_panel() -> None:\n    \"\"\"\n    Render comprehensive debug panel with telemetry and system information.\n    This is an expanded version of the original render_debug_panel from streamlit_app.py\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        with st.expander(\"\ud83d\udee0\ufe0f...",
      "suggested_refactor": "Extract UI rendering to render_debug_panel_ui_layer() + Extract logging to render_debug_panel_audit_layer()"
    },
    {
      "function_name": "_render_health_debug",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 116,
      "responsibilities": [
        "logging",
        "validation",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _render_health_debug() -> None:\n    \"\"\"Render health status debugging information.\"\"\"\n    st.markdown(\"#### \ud83c\udfe5 System Health\")\n    \n    # Overall health status\n    health = get_session_value(\"health\", {})\n    \n    if health:\n        overall = health.get(\"overall\", {})\n        status = overall.get...",
      "suggested_refactor": "Extract UI rendering to _render_health_debug_ui_layer() + Extract logging to _render_health_debug_audit_layer() + Extract validation to _render_health_debug_validator()"
    },
    {
      "function_name": "_render_session_debug",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 159,
      "responsibilities": [
        "ui",
        "auth",
        "network",
        "file_io",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _render_session_debug() -> None:\n    \"\"\"Render session state debugging information.\"\"\"\n    st.markdown(\"#### \ud83d\udcca Session State\")\n    \n    if SESSION_MANAGER_AVAILABLE:\n        # Session summary\n        summary = get_session_state_summary()\n        \n        col1, col2, col3 = st.columns(3)\n        ...",
      "suggested_refactor": "Extract UI rendering to _render_session_debug_ui_layer() + Extract logging to _render_session_debug_audit_layer()"
    },
    {
      "function_name": "_render_error_debug",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 195,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _render_error_debug() -> None:\n    \"\"\"Render error debugging information.\"\"\"\n    st.markdown(\"#### \u274c Error Statistics\")\n    \n    if EXCEPTION_HANDLER_AVAILABLE:\n        error_stats = safe_streamlit_operation(get_error_statistics, default_return={})\n        \n        if error_stats:\n            to...",
      "suggested_refactor": "Extract UI rendering to _render_error_debug_ui_layer() + Extract logging to _render_error_debug_audit_layer()"
    },
    {
      "function_name": "_render_system_debug",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 225,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _render_system_debug() -> None:\n    \"\"\"Render system debugging information.\"\"\"\n    st.markdown(\"#### \ud83d\udd27 System Information\")\n    \n    # Python and environment info\n    import sys\n    import platform\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.markdown(\"**Python:**\")\n       ...",
      "suggested_refactor": "Extract UI rendering to _render_system_debug_ui_layer() + Extract logging to _render_system_debug_audit_layer()"
    },
    {
      "function_name": "_render_raw_data_debug",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 260,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _render_raw_data_debug() -> None:\n    \"\"\"Render raw data for advanced debugging.\"\"\"\n    st.markdown(\"#### \ud83d\udccb Raw Debug Data\")\n    \n    debug_data = {\n        \"health\": get_session_value(\"health\"),\n        \"error_stats\": safe_streamlit_operation(get_error_statistics, default_return={}),\n        \"t...",
      "suggested_refactor": "Extract UI rendering to _render_raw_data_debug_ui_layer() + Extract logging to _render_raw_data_debug_audit_layer()"
    },
    {
      "function_name": "render_performance_metrics",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 275,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_performance_metrics() -> None:\n    \"\"\"Render performance monitoring metrics.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \u26a1 Performance Metrics\")\n        \n        # Cache statistics\n        if hasattr(st, \"cache_data\"):\n            with st.expa...",
      "suggested_refactor": "Extract UI rendering to render_performance_metrics_ui_layer() + Extract logging to render_performance_metrics_audit_layer()"
    },
    {
      "function_name": "render_development_tools",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 308,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_development_tools() -> None:\n    \"\"\"Render development tools and utilities.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \ud83d\udd28 Development Tools\")\n        \n        col1, col2 = st.columns(2)\n        \n        with col1:\n            if st.button(\"\ud83d\udd04 R...",
      "suggested_refactor": "Extract UI rendering to render_development_tools_ui_layer() + Extract logging to render_development_tools_audit_layer()"
    },
    {
      "function_name": "render_log_viewer",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 343,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_log_viewer() -> None:\n    \"\"\"Render log viewer for recent application logs.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"#### \ud83d\udcdd Log Viewer\")\n        \n        # This is a placeholder for log viewing functionality\n        # In a full implementation, y...",
      "suggested_refactor": "Extract UI rendering to render_log_viewer_ui_layer() + Extract logging to render_log_viewer_audit_layer()"
    },
    {
      "function_name": "render_full_debug_dashboard",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 366,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_full_debug_dashboard() -> None:\n    \"\"\"Render comprehensive debug dashboard with all tools.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        st.markdown(\"## \ud83d\udee0\ufe0f Debug Dashboard\")\n        \n        # Main debug sections\n        render_debug_panel()\n        \n        st....",
      "suggested_refactor": "Extract UI rendering to render_full_debug_dashboard_ui_layer() + Extract logging to render_full_debug_dashboard_audit_layer()"
    },
    {
      "function_name": "check_debug_widgets_health",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 399,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_debug_widgets_health() -> Dict[str, Any]:\n    \"\"\"Check health of debug widgets dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"exception_handler_available\": EXCEPTION_HANDLER_AVAILABLE,\n        \"session_manager_available\": SESSION_MANAGER_AVAILABL...",
      "suggested_refactor": "Extract UI rendering to check_debug_widgets_health_ui_layer() + Extract logging to check_debug_widgets_health_audit_layer()"
    },
    {
      "function_name": "get_error_statistics",
      "file_path": "streamlit_extension/components/debug_widgets.py",
      "line_number": 29,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_error_statistics() -> Dict[str, Any]:\n        return {\"total_errors\": 0, \"error_types\": {}}",
      "suggested_refactor": "Extract UI rendering to get_error_statistics_ui_layer() + Extract logging to get_error_statistics_audit_layer()"
    },
    {
      "function_name": "render_error_messages",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 375,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_error_messages(errors: list[str], icon: str = \"\u274c\"):\n    \"\"\"Render standardized error messages.\"\"\"\n    if st and errors:\n        for error in errors:\n            st.error(f\"{icon} {error}\")\n\n",
      "suggested_refactor": "Extract UI rendering to render_error_messages_ui_layer() + Extract logging to render_error_messages_audit_layer()"
    },
    {
      "function_name": "render_timer_config",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 384,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_timer_config(current_config: Optional[Dict[str, Any]] = None, \n                       form_id: str = \"timer_config\") -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Render timer configuration form with sliders and checkboxes.\n    \n    Args:\n        current_config: Current timer configuration val...",
      "suggested_refactor": "Extract UI rendering to render_timer_config_ui_layer()"
    },
    {
      "function_name": "render_entity_filters",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 457,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_entity_filters(entity_name: str = \"items\",\n                         search_placeholder: str = \"Search...\",\n                         status_options: Optional[list[str]] = None,\n                         secondary_filter_name: str = \"Category\",\n                         secondary_options: Opt...",
      "suggested_refactor": "Extract database operations to render_entity_filters_data_layer() + Extract UI rendering to render_entity_filters_ui_layer()"
    },
    {
      "function_name": "render_selection_widget",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 518,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_selection_widget(label: str, \n                           options: list[Any],\n                           current_value: Optional[Any] = None,\n                           key_suffix: str = \"selection\") -> Any:\n    \"\"\"\n    Render simple selection widget (selectbox) with proper key management....",
      "suggested_refactor": "Extract database operations to render_selection_widget_data_layer() + Extract UI rendering to render_selection_widget_ui_layer() + Extract logging to render_selection_widget_audit_layer()"
    },
    {
      "function_name": "render_select_box",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 79,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def render_select_box(self, label: str, key: str, options: list, \n                         required: bool = False, help_text: str = \"\") -> Any:\n        \"\"\"Render selectbox with enhanced options.\"\"\"\n        if not self.st:\n            self.form_data[key] = options[0] if options else None\n        ...",
      "suggested_refactor": "Extract database operations to render_select_box_data_layer() + Extract UI rendering to render_select_box_ui_layer()"
    },
    {
      "function_name": "validate_and_submit",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 170,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_and_submit(self, form_data: Dict, validation_func: Callable[[Dict], list[str]]):\n        \"\"\"Validate form data and handle submission.\"\"\"\n        errors = validation_func(form_data)\n        if errors:\n            self.display_errors(errors)\n            return False, errors\n        re...",
      "suggested_refactor": "Extract UI rendering to validate_and_submit_ui_layer() + Extract logging to validate_and_submit_audit_layer()"
    },
    {
      "function_name": "display_errors",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 178,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def display_errors(self, errors: list[str]):\n        \"\"\"Display validation errors.\"\"\"\n        if not self.st:\n            self.errors.extend(errors)\n        else:  # pragma: no cover - simple streamlit display\n            for error in errors:\n                self.st.error(error)\n\n",
      "suggested_refactor": "Extract UI rendering to display_errors_ui_layer() + Extract logging to display_errors_audit_layer()"
    },
    {
      "function_name": "render_client_fields",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 190,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render_client_fields(self, client_data: Optional[Dict] = None):\n        \"\"\"Render complete client form with all fields.\"\"\"\n        if not self.st:\n            return True  # allow tests without streamlit\n        \n        with self.st.form(self.form_id):\n            self.st.markdown(f\"### {se...",
      "suggested_refactor": "Extract UI rendering to render_client_fields_ui_layer() + Extract logging to render_client_fields_audit_layer()"
    },
    {
      "function_name": "validate_client_data",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 241,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_client_data(self, data: Dict) -> list[str]:\n        \"\"\"Validate client-specific data using centralized validation.\"\"\"\n        from streamlit_extension.utils.form_validation import (\n            validate_required_fields,\n            validate_email_format,\n            validate_phone_f...",
      "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
    },
    {
      "function_name": "render_project_fields",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 279,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def render_project_fields(self, client_options: list, project_data: Optional[Dict] = None):\n        \"\"\"Render complete project form with all fields.\"\"\"\n        if not self.st:\n            return True\n        \n        with self.st.form(self.form_id):\n            self.st.markdown(f\"### {self.title...",
      "suggested_refactor": "Extract database operations to render_project_fields_data_layer() + Extract UI rendering to render_project_fields_ui_layer() + Extract logging to render_project_fields_audit_layer()"
    },
    {
      "function_name": "validate_project_data",
      "file_path": "streamlit_extension/components/form_components.py",
      "line_number": 329,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_project_data(self, data: Dict) -> list[str]:\n        \"\"\"Validate project-specific data using centralized validation.\"\"\"\n        from streamlit_extension.utils.form_validation import (\n            validate_required_fields,\n            validate_business_rules_project,\n            sani...",
      "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
    },
    {
      "function_name": "render",
      "file_path": "streamlit_extension/components/dashboard_widgets.py",
      "line_number": 59,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def render(activity_data: Dict[str, int], title: str = \"Activity Heatmap\", \n              height: int = 150) -> None:\n        \"\"\"\n        Render a productivity heatmap.\n        \n        Args:\n            activity_data: Dict with date strings as keys and activity counts as values\n            titl...",
      "suggested_refactor": "Extract UI rendering to render_ui_layer() + Extract logging to render_audit_layer()"
    },
    {
      "function_name": "show",
      "file_path": "streamlit_extension/components/dashboard_widgets.py",
      "line_number": 313,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def show(notification: NotificationData) -> None:\n        \"\"\"\n        Show a toast notification.\n        \n        Args:\n            notification: NotificationData object with notification details\n        \"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return\n        \n        # Type to style ...",
      "suggested_refactor": "Extract UI rendering to show_ui_layer() + Extract logging to show_audit_layer()"
    },
    {
      "function_name": "render_topbar",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 105,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_topbar(user: Optional[Dict[str, Any]]) -> None:\n    \"\"\"\n    Render the top bar with header and system status.\n    \n    Args:\n        user: Current user information dict\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        # Render main header\n        render_header(...",
      "suggested_refactor": "Extract UI rendering to render_topbar_ui_layer() + Extract logging to render_topbar_audit_layer()"
    },
    {
      "function_name": "render_heatmap_and_tasks",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 129,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_heatmap_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]) -> None:\n    \"\"\"\n    Render productivity heatmap and task selection interface.\n    \n    Args:\n        epics: List of available epics\n        selected_epic_id: Currently selected epic ID\n    \"\"\"\n    if not STRE...",
      "suggested_refactor": "Extract database operations to render_heatmap_and_tasks_data_layer() + Extract UI rendering to render_heatmap_and_tasks_ui_layer() + Extract logging to render_heatmap_and_tasks_audit_layer()"
    },
    {
      "function_name": "_render_epic_selection_and_tasks",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 156,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _render_epic_selection_and_tasks(epics: List[Dict[str, Any]], selected_epic_id: Optional[Any]) -> None:\n    \"\"\"\n    Internal function to render epic selection dropdown and task list.\n    \n    Args:\n        epics: List of available epics\n        selected_epic_id: Currently selected epic ID\n    \"\"...",
      "suggested_refactor": "Extract database operations to _render_epic_selection_and_tasks_data_layer() + Extract UI rendering to _render_epic_selection_and_tasks_ui_layer() + Extract logging to _render_epic_selection_and_tasks_audit_layer()"
    },
    {
      "function_name": "_render_task_list",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 207,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _render_task_list(tasks: List[Dict[str, Any]]) -> None:\n    \"\"\"\n    Render the task list for the selected epic.\n    \n    Args:\n        tasks: List of tasks to display\n    \"\"\"\n    st.markdown(\"#### Tarefas\")\n    \n    if not tasks:\n        st.caption(\"Nenhuma tarefa para este \u00e9pico.\")\n        retu...",
      "suggested_refactor": "Extract UI rendering to _render_task_list_ui_layer() + Extract logging to _render_task_list_audit_layer()"
    },
    {
      "function_name": "render_timer_and_notifications",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 234,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_timer_and_notifications() -> None:\n    \"\"\"\n    Render timer component and notifications section in two columns.\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    try:\n        c1, c2 = st.columns([0.65, 0.35])\n        \n        # Left column: Timer\n        with c1:\n           ...",
      "suggested_refactor": "Extract UI rendering to render_timer_and_notifications_ui_layer() + Extract logging to render_timer_and_notifications_audit_layer()"
    },
    {
      "function_name": "render_info_card",
      "file_path": "streamlit_extension/components/layout_renderers.py",
      "line_number": 329,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_info_card(title: str, content: str, type: str = \"info\") -> None:\n    \"\"\"\n    Render an information card with specified type.\n    \n    Args:\n        title: Card title\n        content: Card content\n        type: Card type (\"info\", \"success\", \"warning\", \"error\")\n    \"\"\"\n    if not STREAMLIT_...",
      "suggested_refactor": "Extract UI rendering to render_info_card_ui_layer() + Extract logging to render_info_card_audit_layer()"
    },
    {
      "function_name": "has_errors",
      "file_path": "streamlit_extension/models/task_models.py",
      "line_number": 335,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def has_errors(self) -> bool:\n        \"\"\"Verifica se h\u00e1 erros\"\"\"\n        return len(self.errors) > 0\n    ",
      "suggested_refactor": "Extract UI rendering to has_errors_ui_layer() + Extract logging to has_errors_audit_layer()"
    },
    {
      "function_name": "has_warnings",
      "file_path": "streamlit_extension/models/task_models.py",
      "line_number": 340,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def has_warnings(self) -> bool:\n        \"\"\"Verifica se h\u00e1 warnings\"\"\"\n        return len(self.warnings) > 0\n    ",
      "suggested_refactor": "Extract UI rendering to has_warnings_ui_layer() + Extract logging to has_warnings_audit_layer()"
    },
    {
      "function_name": "to_dict",
      "file_path": "streamlit_extension/models/task_models.py",
      "line_number": 370,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Converte para dicion\u00e1rio\"\"\"\n        return {\n            'epic_id': self.epic_id,\n            'execution_order': self.execution_order,\n            'parallel_batches': self.parallel_batches,\n            'total_tasks': self.total_tasks,\n            '...",
      "suggested_refactor": "Extract UI rendering to to_dict_ui_layer() + Extract logging to to_dict_audit_layer()"
    },
    {
      "function_name": "get_preset",
      "file_path": "streamlit_extension/models/scoring.py",
      "line_number": 309,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_preset(self, preset_name: str) -> ScoringPreset:\n        \"\"\"\n        Obt\u00e9m preset de scoring por nome.\n        \n        Args:\n            preset_name: Nome do preset\n            \n        Returns:\n            ScoringPreset configurado\n            \n        Raises:\n            ValueError: S...",
      "suggested_refactor": "Extract UI rendering to get_preset_ui_layer() + Extract logging to get_preset_audit_layer() + Extract validation to get_preset_validator()"
    },
    {
      "function_name": "list_by_task_id",
      "file_path": "streamlit_extension/repos/deps_repo.py",
      "line_number": 127,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def list_by_task_id(self, task_id: int) -> List[TaskDependency]:\n        \"\"\"\n        Lista depend\u00eancias de uma tarefa espec\u00edfica.\n        \n        Args:\n            task_id: ID da tarefa\n            \n        Returns:\n            Lista de depend\u00eancias da tarefa\n            \n        Raises:\n      ...",
      "suggested_refactor": "Extract database operations to list_by_task_id_data_layer() + Extract UI rendering to list_by_task_id_ui_layer() + Extract logging to list_by_task_id_audit_layer()"
    },
    {
      "function_name": "list_by_depends_on_task_key",
      "file_path": "streamlit_extension/repos/deps_repo.py",
      "line_number": 175,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def list_by_depends_on_task_key(self, depends_on_task_key: str) -> List[TaskDependency]:\n        \"\"\"\n        Lista todas as tarefas que dependem de uma tarefa espec\u00edfica.\n        \n        Args:\n            depends_on_task_key: Task key da qual outras dependem\n            \n        Returns:\n      ...",
      "suggested_refactor": "Extract database operations to list_by_depends_on_task_key_data_layer() + Extract UI rendering to list_by_depends_on_task_key_ui_layer() + Extract logging to list_by_depends_on_task_key_audit_layer()"
    },
    {
      "function_name": "get_epic_dependency_summary",
      "file_path": "streamlit_extension/repos/deps_repo.py",
      "line_number": 223,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_dependency_summary(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Retorna sum\u00e1rio de depend\u00eancias do \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict com m\u00e9tricas de depend\u00eancias\n            \n        Raises:\n  ...",
      "suggested_refactor": "Extract database operations to get_epic_dependency_summary_data_layer() + Extract UI rendering to get_epic_dependency_summary_ui_layer() + Extract logging to get_epic_dependency_summary_audit_layer()"
    },
    {
      "function_name": "count_by_epic",
      "file_path": "streamlit_extension/repos/deps_repo.py",
      "line_number": 283,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def count_by_epic(self, epic_id: int) -> int:\n        \"\"\"\n        Conta n\u00famero de depend\u00eancias no \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            N\u00famero de depend\u00eancias\n            \n        Raises:\n            RepoError: Em caso de erro na...",
      "suggested_refactor": "Extract database operations to count_by_epic_data_layer() + Extract UI rendering to count_by_epic_ui_layer() + Extract logging to count_by_epic_audit_layer()"
    },
    {
      "function_name": "validate_epic_references",
      "file_path": "streamlit_extension/repos/deps_repo.py",
      "line_number": 312,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_epic_references(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Valida integridade referencial das depend\u00eancias do \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict com resultados da valida\u00e7\u00e3o\n            \n      ...",
      "suggested_refactor": "Extract database operations to validate_epic_references_data_layer() + Extract UI rendering to validate_epic_references_ui_layer() + Extract logging to validate_epic_references_audit_layer() + Extract validation to validate_epic_references_validator()"
    },
    {
      "function_name": "get_by_task_key",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 126,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_by_task_key(self, task_key: str) -> Optional[Task]:\n        \"\"\"\n        Busca tarefa por task_key.\n        \n        Args:\n            task_key: Chave \u00fanica da tarefa\n            \n        Returns:\n            Task object ou None se n\u00e3o encontrada\n            \n        Raises:\n            R...",
      "suggested_refactor": "Extract database operations to get_by_task_key_data_layer() + Extract UI rendering to get_by_task_key_ui_layer() + Extract logging to get_by_task_key_audit_layer()"
    },
    {
      "function_name": "list_by_task_keys",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 156,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def list_by_task_keys(self, task_keys: List[str]) -> List[Task]:\n        \"\"\"\n        Lista tarefas por m\u00faltiplas task_keys com dedup e chunking.\n        \n        PATCH 2: Dedup no IN (remove duplicatas preservando ordem)\n        \n        Args:\n            task_keys: Lista de chaves de tarefas\n  ...",
      "suggested_refactor": "Extract database operations to list_by_task_keys_data_layer() + Extract UI rendering to list_by_task_keys_ui_layer() + Extract logging to list_by_task_keys_audit_layer()"
    },
    {
      "function_name": "list_tdd_tasks_by_group",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 225,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def list_tdd_tasks_by_group(self, epic_id: int) -> Dict[str, List[Task]]:\n        \"\"\"\n        Lista tarefas TDD agrupadas por task_group com ordena\u00e7\u00e3o natural.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict {task_group: [tasks]} ordenadas p...",
      "suggested_refactor": "Extract database operations to list_tdd_tasks_by_group_data_layer() + Extract UI rendering to list_tdd_tasks_by_group_ui_layer() + Extract logging to list_tdd_tasks_by_group_audit_layer()"
    },
    {
      "function_name": "get_task_id_to_key_mapping",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 282,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_task_id_to_key_mapping(self, epic_id: int) -> Dict[int, str]:\n        \"\"\"\n        Retorna mapeamento task_id -> task_key para \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            Dict {task_id: task_key}\n            \n        Raises:\n   ...",
      "suggested_refactor": "Extract database operations to get_task_id_to_key_mapping_data_layer() + Extract UI rendering to get_task_id_to_key_mapping_ui_layer() + Extract logging to get_task_id_to_key_mapping_audit_layer()"
    },
    {
      "function_name": "count_by_epic",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 314,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def count_by_epic(self, epic_id: int) -> int:\n        \"\"\"\n        Conta n\u00famero de tarefas ativas no \u00e9pico.\n        \n        Args:\n            epic_id: ID do \u00e9pico\n            \n        Returns:\n            N\u00famero de tarefas\n            \n        Raises:\n            RepoError: Em caso de erro na qu...",
      "suggested_refactor": "Extract database operations to count_by_epic_data_layer() + Extract UI rendering to count_by_epic_ui_layer() + Extract logging to count_by_epic_audit_layer()"
    },
    {
      "function_name": "get_epic_effort_summary",
      "file_path": "streamlit_extension/repos/tasks_repo.py",
      "line_number": 342,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_effort_summary(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"\n        Retorna sum\u00e1rio de esfor\u00e7o do \u00e9pico com prote\u00e7\u00e3o contra divis\u00e3o por zero.\n        \n        PATCH 5: Sum\u00e1rio robusto (divis\u00e3o por zero protegida)\n        \n        Args:\n            epic_id: ID do \u00e9pico\n        ...",
      "suggested_refactor": "Extract database operations to get_epic_effort_summary_data_layer() + Extract UI rendering to get_epic_effort_summary_ui_layer() + Extract logging to get_epic_effort_summary_audit_layer()"
    },
    {
      "function_name": "to_dict",
      "file_path": "streamlit_extension/middleware/context_manager.py",
      "line_number": 32,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"user_id\": self.user_id,\n            \"session_id\": self.session_id,\n            \"request_id\": self.request_id,\n            \"correlation_id\": self.correlation_id,\n            \"ip_address\": self.ip_address,\n            \"user_agent\":...",
      "suggested_refactor": "Extract UI rendering to to_dict_ui_layer()"
    },
    {
      "function_name": "build_context",
      "file_path": "streamlit_extension/middleware/context_manager.py",
      "line_number": 59,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def build_context(self, request_data: Dict[str, Any]) -> UserContext:\n        correlation_id = self.correlation_manager.get_or_create()\n        context = UserContext(\n            user_id=request_data.get(\"user_id\"),\n            session_id=request_data.get(\"session_id\", str(uuid.uuid4())),\n      ...",
      "suggested_refactor": "Extract UI rendering to build_context_ui_layer()"
    },
    {
      "function_name": "render_theme_selector",
      "file_path": "streamlit_extension/config/themes.py",
      "line_number": 572,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_theme_selector(key: str = \"theme_selector\") -> None:\n    \"\"\"Render a theme selection widget.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[THEME SELECTOR]\")\n        return\n    \n    theme_manager = get_theme_manager()\n    available_themes = theme_manager.get_available_themes()\n    cur...",
      "suggested_refactor": "Extract database operations to render_theme_selector_data_layer() + Extract UI rendering to render_theme_selector_ui_layer() + Extract logging to render_theme_selector_audit_layer()"
    },
    {
      "function_name": "apply_theme_css",
      "file_path": "streamlit_extension/config/themes.py",
      "line_number": 391,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def apply_theme_css(self, theme: Optional[Theme] = None) -> str:\n        \"\"\"Generate CSS for applying theme styles.\"\"\"\n        if not theme:\n            theme = self.get_current_theme()\n        \n        css = f\"\"\"\n        <style>\n        :root {{\n            --primary-color: {theme.colors.primar...",
      "suggested_refactor": "Extract UI rendering to apply_theme_css_ui_layer() + Extract logging to apply_theme_css_audit_layer()"
    },
    {
      "function_name": "_load_custom_themes",
      "file_path": "streamlit_extension/config/themes.py",
      "line_number": 492,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _load_custom_themes(self) -> Dict[str, Theme]:\n        \"\"\"Load custom themes from file.\"\"\"\n        if not self.themes_file.exists():\n            return {}\n        try:\n            with open(self.themes_file, 'r') as f:\n                data = json.load(f)\n            custom_themes: Dict[str, ...",
      "suggested_refactor": "Extract UI rendering to _load_custom_themes_ui_layer() + Extract logging to _load_custom_themes_audit_layer()"
    },
    {
      "function_name": "validate_config",
      "file_path": "streamlit_extension/config/env_manager.py",
      "line_number": 67,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_config(self) -> bool:\n        \"\"\"Validate configuration completeness and format.\"\"\"\n        required = {\n            \"database\": [\"framework_db_path\", \"timer_db_path\"],\n            \"redis\": [\"host\", \"port\"],\n            \"security\": [\"enable_csrf\", \"enable_rate_limiting\"],\n        }\n...",
      "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract validation to validate_config_validator()"
    },
    {
      "function_name": "load_config",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 278,
      "responsibilities": [
        "logging",
        "ui",
        "business_logic",
        "auth",
        "file_io",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def load_config(env_file: Optional[str] = None) -> StreamlitConfig:\n    \"\"\"\n    Load configuration from environment variables and .env file.\n    \n    Args:\n        env_file: Path to .env file (defaults to .env in current directory)\n    \n    Returns:\n        StreamlitConfig: Loaded and validated conf...",
      "suggested_refactor": "Extract UI rendering to load_config_ui_layer() + Extract logging to load_config_audit_layer() + Extract business logic to load_config_processor()"
    },
    {
      "function_name": "create_streamlit_config_file",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 402,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_streamlit_config_file(output_dir: Optional[Path] = None) -> Path:\n    \"\"\"\n    Gera `.streamlit/config.toml` a partir de `get_streamlit_config_dict()`.\n    Retorna o caminho do arquivo gerado.\n    \"\"\"\n    cfg = get_config()\n    data = cfg.get_streamlit_config_dict()\n\n    toml_parts: List[s...",
      "suggested_refactor": "Extract UI rendering to create_streamlit_config_file_ui_layer()"
    },
    {
      "function_name": "reload_config",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 432,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def reload_config(env_file: Optional[str] = None) -> StreamlitConfig:\n    \"\"\"Reload configuration from environment.\"\"\"\n    global _CONFIG_SINGLETON\n    _CONFIG_SINGLETON = load_config(env_file)\n    _CONFIG_SINGLETON.config_loaded_at = datetime.utcnow().isoformat()\n    return _CONFIG_SINGLETON\n\n",
      "suggested_refactor": "Extract UI rendering to reload_config_ui_layer()"
    },
    {
      "function_name": "validate_config",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 99,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_config(self):\n        \"\"\"Validate configuration values.\"\"\"\n        # Validate port range\n        if not (1024 <= self.streamlit_port <= 65535):\n            print(f\"\u26a0\ufe0f Warning: streamlit_port {self.streamlit_port} outside recommended range (1024-65535)\")\n        \n        # Validate s...",
      "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer()"
    },
    {
      "function_name": "format_time_ago",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 223,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def format_time_ago(self, dt: datetime) -> str:\n        \"\"\"Format time as 'time ago' string with timezone awareness.\"\"\"\n        if not isinstance(dt, datetime):\n            return \"Unknown time\"\n        \n        now = self.get_current_time()\n        \n        # Ensure both datetimes have timezone...",
      "suggested_refactor": "Extract UI rendering to format_time_ago_ui_layer() + Extract logging to format_time_ago_audit_layer()"
    },
    {
      "function_name": "get_env",
      "file_path": "streamlit_extension/config/streamlit_config.py",
      "line_number": 309,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_env(key: str, default: Any, convert_type: type = str) -> Any:\n        value = os.getenv(key)\n        if value is None:\n            return default\n        \n        try:\n            if convert_type == bool:\n                return value.lower() in ('true', '1', 'yes', 'on')\n            elif...",
      "suggested_refactor": "Extract UI rendering to get_env_ui_layer() + Extract logging to get_env_audit_layer() + Extract business logic to get_env_processor()"
    },
    {
      "function_name": "render_backup_restore_ui",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 487,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "file_io",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_backup_restore_ui() -> None:\n    \"\"\"Render backup and restore UI in Streamlit.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        print(\"[BACKUP & RESTORE UI]\")\n        return\n    \n    backup_manager = get_backup_manager()\n    \n    st.markdown(\"### \ud83d\udcbe Configuration Backup & Restore\")\n    \n    # Cr...",
      "suggested_refactor": "Extract database operations to render_backup_restore_ui_data_layer() + Extract UI rendering to render_backup_restore_ui_ui_layer() + Extract logging to render_backup_restore_ui_audit_layer()"
    },
    {
      "function_name": "_create_backup",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 117,
      "responsibilities": [
        "logging",
        "network",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_backup(self, backup_name: str, backup_type: BackupType, description: str) -> Optional[BackupInfo]:\n        \"\"\"Create a backup with specified parameters.\"\"\"\n        backup_file = self.backup_dir / f\"{backup_name}.zip\"\n        \n        try:\n            with zipfile.ZipFile(backup_file,...",
      "suggested_refactor": "Extract UI rendering to _create_backup_ui_layer() + Extract logging to _create_backup_audit_layer()"
    },
    {
      "function_name": "restore_backup",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 203,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def restore_backup(self, backup_name: str, components: List[str] = None) -> bool:\n        \"\"\"Restore configuration from backup.\"\"\"\n        if backup_name not in self._backup_index:\n            return False\n        \n        backup_info = self._backup_index[backup_name]\n        backup_file = backu...",
      "suggested_refactor": "Extract UI rendering to restore_backup_ui_layer() + Extract logging to restore_backup_audit_layer()"
    },
    {
      "function_name": "export_configuration",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 271,
      "responsibilities": [
        "network",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def export_configuration(self, export_path: Path, include_sensitive: bool = False) -> bool:\n        \"\"\"Export configuration to external file.\"\"\"\n        try:\n            config_data = {}\n            \n            # Export streamlit config\n            if CONFIG_AVAILABLE:\n                config = ...",
      "suggested_refactor": "Extract UI rendering to export_configuration_ui_layer()"
    },
    {
      "function_name": "import_configuration",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 315,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def import_configuration(self, import_path: Path, components: List[str] = None) -> bool:\n        \"\"\"Import configuration from external file.\"\"\"\n        if not import_path.exists():\n            return False\n        \n        components = components or [\"streamlit_config\", \"themes\"]\n        \n      ...",
      "suggested_refactor": "Extract UI rendering to import_configuration_ui_layer() + Extract logging to import_configuration_audit_layer()"
    },
    {
      "function_name": "delete_backup",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 348,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_backup(self, backup_name: str) -> bool:\n        \"\"\"Delete a backup.\"\"\"\n        if backup_name not in self._backup_index:\n            return False\n        \n        backup_info = self._backup_index[backup_name]\n        \n        # Delete file\n        try:\n            if backup_info.file_...",
      "suggested_refactor": "Extract database operations to delete_backup_data_layer() + Extract UI rendering to delete_backup_ui_layer() + Extract logging to delete_backup_audit_layer()"
    },
    {
      "function_name": "get_backup_info",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 368,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_backup_info(self, backup_name: str) -> Optional[BackupInfo]:\n        \"\"\"Get detailed information about a backup.\"\"\"\n        return self._backup_index.get(backup_name)\n    ",
      "suggested_refactor": "Extract UI rendering to get_backup_info_ui_layer() + Extract logging to get_backup_info_audit_layer()"
    },
    {
      "function_name": "_restore_streamlit_config",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 372,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _restore_streamlit_config(self, config_data: Dict[str, Any]) -> None:\n        \"\"\"Restore streamlit configuration.\"\"\"\n        # This would integrate with the actual config system\n        # For now, we'll just store it for the next app restart\n        config_restore_file = Path.cwd() / \".confi...",
      "suggested_refactor": "Extract UI rendering to _restore_streamlit_config_ui_layer()"
    },
    {
      "function_name": "_cleanup_old_backups",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 397,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _cleanup_old_backups(self) -> None:\n        \"\"\"Clean up old backups based on retention policies.\"\"\"\n        current_time = datetime.now()\n        \n        # Count backups by type\n        auto_backups = []\n        manual_backups = []\n        \n        for backup_info in self._backup_index.valu...",
      "suggested_refactor": "Extract database operations to _cleanup_old_backups_data_layer() + Extract UI rendering to _cleanup_old_backups_ui_layer() + Extract logging to _cleanup_old_backups_audit_layer()"
    },
    {
      "function_name": "_load_backup_index",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 431,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _load_backup_index(self) -> Dict[str, BackupInfo]:\n        \"\"\"Load backup index from file.\"\"\"\n        if not self.index_file.exists():\n            return {}\n        \n        try:\n            with open(self.index_file, 'r') as f:\n                index_data = json.load(f)\n            \n        ...",
      "suggested_refactor": "Extract UI rendering to _load_backup_index_ui_layer() + Extract logging to _load_backup_index_audit_layer()"
    },
    {
      "function_name": "_save_backup_index",
      "file_path": "streamlit_extension/config/backup_restore.py",
      "line_number": 454,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _save_backup_index(self) -> None:\n        \"\"\"Save backup index to file.\"\"\"\n        try:\n            index_data = {}\n            for name, backup_info in self._backup_index.items():\n                backup_dict = asdict(backup_info)\n                backup_dict[\"created_at\"] = backup_info.creat...",
      "suggested_refactor": "Extract UI rendering to _save_backup_index_ui_layer() + Extract logging to _save_backup_index_audit_layer()"
    },
    {
      "function_name": "validate_config",
      "file_path": "streamlit_extension/config/environment.py",
      "line_number": 88,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_config(self, config: Dict[str, Any]) -> bool:\n        \"\"\"Validate configuration structure.\"\"\"\n        try:\n            return self.loader.validate_schema(config)\n        except ValidationError as exc:\n            raise ValueError(str(exc)) from exc\n",
      "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer() + Extract validation to validate_config_validator()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 99,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def __init__(self, \n                 framework_db_path: str, \n                 timer_db_path: Optional[str] = None,\n                 enable_cache: bool = True,\n                 cache_debug: bool = False):\n        \"\"\"\n        Initialize cached database manager.\n        \n        Args:\n            ...",
      "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_setup_logging",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 148,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup secure logging.\"\"\"\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('cached_database')\n        else:\n            self.logger = logging.getLogger('cached_database')\n            self.logger.setLevel(logging.INFO)\n     ...",
      "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
    },
    {
      "function_name": "_record_operation",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 164,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _record_operation(self, operation_type: str, response_time: float):\n        \"\"\"Record operation statistics.\"\"\"\n        with self._stats_lock:\n            self.performance_stats[\"total_operations\"] += 1\n            self.performance_stats[operation_type] += 1\n            \n            # Update ...",
      "suggested_refactor": "Extract UI rendering to _record_operation_ui_layer()"
    },
    {
      "function_name": "_invalidate_related_cache",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 177,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _invalidate_related_cache(self, entity_type: str, entity_id: Optional[int] = None, **kwargs):\n        \"\"\"\n        Invalidate cache entries related to data modification.\n        \n        Args:\n            entity_type: Type of entity (client, project, epic, task)\n            entity_id: Specifi...",
      "suggested_refactor": "Extract UI rendering to _invalidate_related_cache_ui_layer() + Extract logging to _invalidate_related_cache_audit_layer() + Extract validation to _invalidate_related_cache_validator()"
    },
    {
      "function_name": "get_clients",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 232,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_clients(self, \n                   include_inactive: bool = False,\n                   search_name: Optional[str] = None,\n                   status_filter: Optional[str] = None,\n                   tier_filter: Optional[str] = None,\n                   limit: Optional[int] = None,\n          ...",
      "suggested_refactor": "Extract UI rendering to get_clients_ui_layer() + Extract logging to get_clients_audit_layer()"
    },
    {
      "function_name": "get_client",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 264,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_client(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single client with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_client(client_id)\n            \n            response_time = time.time() - start_time\n    ...",
      "suggested_refactor": "Extract UI rendering to get_client_ui_layer() + Extract logging to get_client_audit_layer()"
    },
    {
      "function_name": "create_client",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 282,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def create_client(self, **kwargs) -> Optional[int]:\n        \"\"\"Create client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.create_client(**kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"client\")\n                sel...",
      "suggested_refactor": "Extract UI rendering to create_client_ui_layer() + Extract logging to create_client_audit_layer()"
    },
    {
      "function_name": "update_client",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 297,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_client(self, client_id: int, **kwargs) -> bool:\n        \"\"\"Update client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.update_client(client_id, **kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"client\", c...",
      "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer()"
    },
    {
      "function_name": "delete_client",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 312,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_client(self, client_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete client and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.delete_client(client_id, soft_delete=soft_delete)\n            \n            if result:\n                self._inval...",
      "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer() + Extract validation to delete_client_validator()"
    },
    {
      "function_name": "get_projects",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 334,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_projects(self,\n                    client_id: Optional[int] = None,\n                    include_inactive: bool = False,\n                    search_name: Optional[str] = None,\n                    status_filter: Optional[str] = None,\n                    limit: Optional[int] = None,\n       ...",
      "suggested_refactor": "Extract UI rendering to get_projects_ui_layer() + Extract logging to get_projects_audit_layer()"
    },
    {
      "function_name": "get_project",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 366,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_project(self, project_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single project with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_project(project_id)\n            \n            response_time = time.time() - start_time...",
      "suggested_refactor": "Extract UI rendering to get_project_ui_layer() + Extract logging to get_project_audit_layer()"
    },
    {
      "function_name": "create_project",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 384,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def create_project(self, **kwargs) -> Optional[int]:\n        \"\"\"Create project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.create_project(**kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"project\")\n               ...",
      "suggested_refactor": "Extract UI rendering to create_project_ui_layer() + Extract logging to create_project_audit_layer() + Extract validation to create_project_validator()"
    },
    {
      "function_name": "update_project",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 402,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_project(self, project_id: int, **kwargs) -> bool:\n        \"\"\"Update project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.update_project(project_id, **kwargs)\n            \n            if result:\n                self._invalidate_related_cache(\"proje...",
      "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer()"
    },
    {
      "function_name": "delete_project",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 417,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_project(self, project_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete project and invalidate related cache.\"\"\"\n        try:\n            result = self.db_manager.delete_project(project_id, soft_delete=soft_delete)\n            \n            if result:\n                self._...",
      "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer() + Extract validation to delete_project_validator()"
    },
    {
      "function_name": "get_epics",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 439,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_epics(self,\n                 project_id: Optional[int] = None,\n                 include_inactive: bool = False,\n                 search_name: Optional[str] = None,\n                 status_filter: Optional[str] = None,\n                 limit: Optional[int] = None,\n                 offset:...",
      "suggested_refactor": "Extract UI rendering to get_epics_ui_layer() + Extract logging to get_epics_audit_layer()"
    },
    {
      "function_name": "get_epic",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 471,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_epic(self, epic_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single epic with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_epic(epic_id)\n            \n            response_time = time.time() - start_time\n            op...",
      "suggested_refactor": "Extract UI rendering to get_epic_ui_layer() + Extract logging to get_epic_audit_layer()"
    },
    {
      "function_name": "get_tasks",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 494,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_tasks(self,\n                 epic_id: Optional[int] = None,\n                 include_completed: bool = True,\n                 search_title: Optional[str] = None,\n                 status_filter: Optional[str] = None,\n                 tdd_phase_filter: Optional[str] = None,\n               ...",
      "suggested_refactor": "Extract UI rendering to get_tasks_ui_layer() + Extract logging to get_tasks_audit_layer()"
    },
    {
      "function_name": "get_task",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 528,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_task(self, task_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Get single task with caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            result = self.db_manager.get_task(task_id)\n            \n            response_time = time.time() - start_time\n            op...",
      "suggested_refactor": "Extract UI rendering to get_task_ui_layer() + Extract logging to get_task_audit_layer()"
    },
    {
      "function_name": "get_dashboard_analytics",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 551,
      "responsibilities": [
        "network",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_dashboard_analytics(self) -> Dict[str, Any]:\n        \"\"\"Get dashboard analytics with heavy caching.\"\"\"\n        start_time = time.time()\n        \n        try:\n            # This would be a heavy aggregation query\n            result = {\n                \"total_clients\": len(self.get_clients...",
      "suggested_refactor": "Extract UI rendering to get_dashboard_analytics_ui_layer() + Extract logging to get_dashboard_analytics_audit_layer()"
    },
    {
      "function_name": "get_performance_stats",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 582,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_performance_stats(self) -> Dict[str, Any]:\n        \"\"\"Get performance statistics.\"\"\"\n        with self._stats_lock:\n            stats = self.performance_stats.copy()\n            \n            # Calculate hit rate\n            total_cache_ops = stats[\"cache_hits\"] + stats[\"cache_misses\"]\n  ...",
      "suggested_refactor": "Extract UI rendering to get_performance_stats_ui_layer()"
    },
    {
      "function_name": "flush_cache",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 612,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def flush_cache(self) -> bool:\n        \"\"\"Flush all cache data.\"\"\"\n        if not self.enable_cache:\n            return False\n        \n        try:\n            from .redis_cache import flush_cache\n            result = flush_cache()\n            self.logger.info(\"Cache flushed successfully\")\n     ...",
      "suggested_refactor": "Extract UI rendering to flush_cache_ui_layer() + Extract logging to flush_cache_audit_layer()"
    },
    {
      "function_name": "get_cache_status",
      "file_path": "streamlit_extension/utils/cached_database.py",
      "line_number": 626,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_cache_status(self) -> Dict[str, Any]:\n        \"\"\"Get comprehensive cache status.\"\"\"\n        return {\n            \"enabled\": self.enable_cache,\n            \"available\": self.cache_manager.is_available if self.cache_manager else False,\n            \"performance\": self.get_performance_stats(...",
      "suggested_refactor": "Extract UI rendering to get_cache_status_ui_layer()"
    },
    {
      "function_name": "login_form",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 343,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def login_form() -> Optional[Session]:\n    \"\"\"Render login form and handle authentication.\"\"\"\n    st.subheader(\"\ud83d\udd10 Login\")\n    \n    with st.form(\"login_form\"):\n        username = st.text_input(\"Username\")\n        password = st.text_input(\"Password\", type=\"password\")\n        submitted = st.form_submit...",
      "suggested_refactor": "Extract UI rendering to login_form_ui_layer() + Extract logging to login_form_audit_layer()"
    },
    {
      "function_name": "init_default_admin",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 381,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def init_default_admin():\n    \"\"\"Initialize default admin user for first setup.\"\"\"\n    auth_manager = AuthenticationManager(\n        secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n    )\n    \n    # Check if admin exists\n    existing_admin = None\n    for user in st.session_state.auth_m...",
      "suggested_refactor": "Extract UI rendering to init_default_admin_ui_layer() + Extract logging to init_default_admin_audit_layer()"
    },
    {
      "function_name": "authenticated_page",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 419,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def authenticated_page(func):\n    \"\"\"Decorator to require authentication for Streamlit pages.\"\"\"\n    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        user = auth_manager.require_au...",
      "suggested_refactor": "Extract UI rendering to authenticated_page_ui_layer()"
    },
    {
      "function_name": "permission_required",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 430,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def permission_required(permission: str):\n    \"\"\"Decorator to require specific permission for Streamlit pages.\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            auth_manager = AuthenticationManager(\n                secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-...",
      "suggested_refactor": "Extract UI rendering to permission_required_ui_layer()"
    },
    {
      "function_name": "csrf_protected",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 443,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def csrf_protected(func):\n    \"\"\"Decorator to add CSRF protection to form submissions.\"\"\"\n    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        \n        session = auth_manager.get_c...",
      "suggested_refactor": "Extract UI rendering to csrf_protected_ui_layer()"
    },
    {
      "function_name": "validate_token",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 84,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_token(self, token: str, session_id: str, max_age: int = 3600) -> bool:\n        \"\"\"Validate CSRF token.\"\"\"\n        try:\n            parts = token.split(':')\n            if len(parts) != 3:\n                return False\n            \n            token_session, timestamp, signature = par...",
      "suggested_refactor": "Extract UI rendering to validate_token_ui_layer() + Extract logging to validate_token_audit_layer() + Extract validation to validate_token_validator()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 147,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __init__(self, secret_key: str, session_timeout_hours: int = 24):\n        self.secret_key = secret_key\n        self.session_timeout_hours = session_timeout_hours\n        self.csrf_protection = CSRFProtection(secret_key)\n        self.password_manager = PasswordManager()\n        \n        # Ini...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer()"
    },
    {
      "function_name": "authenticate_user",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 186,
      "responsibilities": [
        "auth",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def authenticate_user(self, username: str, password: str, \n                         ip_address: str = \"unknown\",\n                         user_agent: str = \"unknown\") -> Optional[Session]:\n        \"\"\"Authenticate user and create session.\"\"\"\n        # Find user by username\n        user = None\n   ...",
      "suggested_refactor": "Extract UI rendering to authenticate_user_ui_layer() + Extract validation to authenticate_user_validator()"
    },
    {
      "function_name": "_create_session",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 219,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _create_session(self, user: User, ip_address: str, user_agent: str) -> Session:\n        \"\"\"Create new session for authenticated user.\"\"\"\n        session_id = str(uuid.uuid4())\n        csrf_token = self.csrf_protection.generate_token(session_id)\n        \n        session = Session(\n           ...",
      "suggested_refactor": "Extract UI rendering to _create_session_ui_layer()"
    },
    {
      "function_name": "get_current_user",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 239,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_current_user(self) -> Optional[User]:\n        \"\"\"Get currently authenticated user.\"\"\"\n        session = self.get_current_session()\n        if not session:\n            return None\n        \n        return st.session_state.auth_manager['users'].get(session.user_id)\n    ",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_current_session",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 247,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_current_session(self) -> Optional[Session]:\n        \"\"\"Get current valid session.\"\"\"\n        current_session_id = st.session_state.auth_manager.get('current_session')\n        if not current_session_id:\n            return None\n        \n        session = st.session_state.auth_manager['sess...",
      "suggested_refactor": "Extract UI rendering to get_current_session_ui_layer()"
    },
    {
      "function_name": "validate_csrf_token",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 260,
      "responsibilities": [
        "auth",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_csrf_token(self, token: str) -> bool:\n        \"\"\"Validate CSRF token for current session.\"\"\"\n        session = self.get_current_session()\n        if not session:\n            return False\n\n        return self.csrf_protection.validate_token(token, session.session_id)\n",
      "suggested_refactor": "Extract validation to validate_csrf_token_validator()"
    },
    {
      "function_name": "logout",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 276,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def logout(self) -> None:\n        \"\"\"Logout current user and invalidate session.\"\"\"\n        current_session_id = st.session_state.auth_manager.get('current_session')\n        if current_session_id:\n            session = st.session_state.auth_manager['sessions'].get(current_session_id)\n           ...",
      "suggested_refactor": "Extract UI rendering to logout_ui_layer()"
    },
    {
      "function_name": "require_authentication",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 286,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def require_authentication(self) -> User:\n        \"\"\"Decorator/helper to require authentication for pages.\"\"\"\n        user = self.get_current_user()\n        if not user:\n            st.error(\"\ud83d\udd12 Authentication required. Please log in.\")\n            st.stop()\n        return user\n    ",
      "suggested_refactor": "Extract UI rendering to require_authentication_ui_layer()"
    },
    {
      "function_name": "require_permission",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 294,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def require_permission(self, permission: str) -> User:\n        \"\"\"Decorator/helper to require specific permission.\"\"\"\n        user = self.require_authentication()\n        if not user.has_permission(permission):\n            st.error(f\"\ud83d\udeab Access denied. Required permission: {permission}\")\n         ...",
      "suggested_refactor": "Extract UI rendering to require_permission_ui_layer()"
    },
    {
      "function_name": "require_role",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 302,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def require_role(self, role: str) -> User:\n        \"\"\"Decorator/helper to require specific role.\"\"\"\n        user = self.require_authentication()\n        if not user.has_role(role):\n            st.error(f\"\ud83d\udeab Access denied. Required role: {role}\")\n            st.stop()\n        return user\n    ",
      "suggested_refactor": "Extract UI rendering to require_role_ui_layer()"
    },
    {
      "function_name": "_get_permissions_for_roles",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 310,
      "responsibilities": [
        "auth",
        "network",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _get_permissions_for_roles(self, roles: List[str]) -> Set[str]:\n        \"\"\"Map roles to permissions.\"\"\"\n        permission_map = {\n            'admin': {\n                'create_client', 'read_client', 'update_client', 'delete_client',\n                'create_project', 'read_project', 'updat...",
      "suggested_refactor": "Extract database operations to _get_permissions_for_roles_data_layer()"
    },
    {
      "function_name": "wrapper",
      "file_path": "streamlit_extension/utils/auth_manager.py",
      "line_number": 445,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def wrapper(*args, **kwargs):\n        auth_manager = AuthenticationManager(\n            secret_key=st.secrets.get(\"auth_secret_key\", \"dev-secret-key\")\n        )\n        \n        session = auth_manager.get_current_session()\n        if not session:\n            st.error(\"\ud83d\udd12 Session expired. Please l...",
      "suggested_refactor": "Extract UI rendering to wrapper_ui_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/load_tester.py",
      "line_number": 26,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __init__(self, users: int, duration: float, actions: Iterable[Callable[[], None]], on_error: Optional[Callable[[BaseException], None]] = None):\n        self.users = users\n        self.duration = duration\n        self.actions: List[Callable[[], None]] = list(actions)\n        self.metrics = Me...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_user_loop",
      "file_path": "streamlit_extension/utils/load_tester.py",
      "line_number": 34,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _user_loop(self, stop_time: float) -> None:\n        while time.perf_counter() < stop_time:\n            for action in self.actions:\n                start = time.perf_counter()\n                success = True\n                try:\n                    action()\n                except Exception as ...",
      "suggested_refactor": "Extract UI rendering to _user_loop_ui_layer() + Extract logging to _user_loop_audit_layer()"
    },
    {
      "function_name": "get_connection",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 53,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_connection(self):\n        \"\"\"Get connection from pool with leak detection\"\"\"\n        with self._lock:\n            # Check for available connection\n            now = time.time()\n            for i, (conn, last_used) in enumerate(self._connections):\n                if now - last_used < self...",
      "suggested_refactor": "Extract database operations to get_connection_data_layer() + Extract UI rendering to get_connection_ui_layer() + Extract logging to get_connection_audit_layer()"
    },
    {
      "function_name": "call",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 133,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def call(self, func: Callable, *args, **kwargs):\n        \"\"\"Execute function with circuit breaker protection\"\"\"\n        with self._lock:\n            if self.state == CircuitState.OPEN:\n                if self._should_attempt_reset():\n                    self.state = CircuitState.HALF_OPEN\n      ...",
      "suggested_refactor": "Extract UI rendering to call_ui_layer() + Extract logging to call_audit_layer()"
    },
    {
      "function_name": "_on_success",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 166,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _on_success(self):\n        \"\"\"Handle successful operation\"\"\"\n        with self._lock:\n            if self.state == CircuitState.HALF_OPEN:\n                self.success_count += 1\n                if self.success_count >= self.config.success_threshold:\n                    self.state = CircuitS...",
      "suggested_refactor": "Extract UI rendering to _on_success_ui_layer() + Extract logging to _on_success_audit_layer()"
    },
    {
      "function_name": "_on_failure",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 179,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _on_failure(self):\n        \"\"\"Handle failed operation\"\"\"\n        with self._lock:\n            self.failure_count += 1\n            self.last_failure_time = time.time()\n            \n            if self.state == CircuitState.HALF_OPEN:\n                self.state = CircuitState.OPEN\n            ...",
      "suggested_refactor": "Extract UI rendering to _on_failure_ui_layer() + Extract logging to _on_failure_audit_layer()"
    },
    {
      "function_name": "execute_with_retry",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 210,
      "responsibilities": [
        "business_logic",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def execute_with_retry(self, func: Callable, *args, **kwargs):\n        \"\"\"Execute function with retry logic\"\"\"\n        last_exception = None\n        \n        for attempt in range(self.config.max_attempts):\n            try:\n                return func(*args, **kwargs)\n            except Exception...",
      "suggested_refactor": "Extract database operations to execute_with_retry_data_layer() + Extract UI rendering to execute_with_retry_ui_layer() + Extract logging to execute_with_retry_audit_layer() + Extract business logic to execute_with_retry_processor()"
    },
    {
      "function_name": "_start_cleanup_thread",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 256,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _start_cleanup_thread(self):\n        \"\"\"Start background cleanup thread\"\"\"\n        def cleanup_worker():\n            while True:\n                try:\n                    self.connection_pool.cleanup_idle_connections()\n                    time.sleep(60)  # Cleanup every minute\n               ...",
      "suggested_refactor": "Extract UI rendering to _start_cleanup_thread_ui_layer() + Extract logging to _start_cleanup_thread_audit_layer()"
    },
    {
      "function_name": "get_connection",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 271,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_connection(self):\n        \"\"\"Get database connection with resilience\"\"\"\n        conn = None\n        try:\n            # Get connection through circuit breaker and retry logic\n            conn = self.retry_manager.execute_with_retry(\n                lambda: self.circuit_breaker.call(self.c...",
      "suggested_refactor": "Extract database operations to get_connection_data_layer()"
    },
    {
      "function_name": "cleanup_worker",
      "file_path": "streamlit_extension/utils/connection_resilience.py",
      "line_number": 258,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def cleanup_worker():\n            while True:\n                try:\n                    self.connection_pool.cleanup_idle_connections()\n                    time.sleep(60)  # Cleanup every minute\n                except Exception as e:\n                    logger.error(\"Cleanup thread error: %s\"...",
      "suggested_refactor": "Extract UI rendering to cleanup_worker_ui_layer() + Extract logging to cleanup_worker_audit_layer()"
    },
    {
      "function_name": "create_analytics_engine",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 597,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def create_analytics_engine(db_manager: DatabaseManager = None) -> StreamlitAnalyticsEngine:\n    \"\"\"Create a StreamlitAnalyticsEngine instance.\"\"\"\n    return StreamlitAnalyticsEngine(db_manager)\n\n",
      "suggested_refactor": "Extract database operations to create_analytics_engine_data_layer() + Extract UI rendering to create_analytics_engine_ui_layer()"
    },
    {
      "function_name": "get_productivity_summary",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 604,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_productivity_summary(db_manager: DatabaseManager, days: int = 7) -> Dict[str, Any]:\n    \"\"\"Get a quick productivity summary.\"\"\"\n    engine = create_analytics_engine(db_manager)\n    report = engine.generate_productivity_report(days)\n    \n    return {\n        \"focus_time_hours\": report.total_f...",
      "suggested_refactor": "Extract database operations to get_productivity_summary_data_layer()"
    },
    {
      "function_name": "generate_productivity_report",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 86,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def generate_productivity_report(self, days: int = 30) -> AnalyticsReport:\n        \"\"\"Generate comprehensive productivity report with caching.\"\"\"\n        \n        if self.engine and ANALYTICS_ENGINE_AVAILABLE:\n            try:\n                # Use existing analytics engine\n                raw_r...",
      "suggested_refactor": "Extract UI rendering to generate_productivity_report_ui_layer() + Extract logging to generate_productivity_report_audit_layer()"
    },
    {
      "function_name": "get_focus_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 101,
      "responsibilities": [
        "business_logic",
        "auth",
        "database",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_focus_trends(self, days: int = 14) -> Dict[str, Any]:\n        \"\"\"Get focus rating trends with caching.\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        timer_sessions = self.db_manager.get_timer_sessions(days)\n   ...",
      "suggested_refactor": "Extract database operations to get_focus_trends_data_layer() + Extract business logic to get_focus_trends_processor()"
    },
    {
      "function_name": "get_productivity_metrics",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 123,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_productivity_metrics(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Get detailed productivity metrics with extended caching.\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        # Get data\n        timer_sessions ...",
      "suggested_refactor": "Extract database operations to get_productivity_metrics_data_layer() + Extract UI rendering to get_productivity_metrics_ui_layer() + Extract business logic to get_productivity_metrics_processor()"
    },
    {
      "function_name": "get_real_time_stats",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 146,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_real_time_stats(self) -> Dict[str, Any]:\n        \"\"\"Get real-time statistics (no caching).\"\"\"\n        \n        if not self.db_manager:\n            return {\"error\": \"Database manager not available\"}\n        \n        # Today's stats\n        today_sessions = self._get_today_sessions()\n     ...",
      "suggested_refactor": "Extract database operations to get_real_time_stats_data_layer() + Extract UI rendering to get_real_time_stats_ui_layer() + Extract logging to get_real_time_stats_audit_layer()"
    },
    {
      "function_name": "get_performance_insights",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 175,
      "responsibilities": [
        "auth",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_performance_insights(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Generate actionable performance insights.\"\"\"\n        \n        if not self.db_manager:\n            return []\n        \n        insights = []\n        timer_sessions = self.db_manager.get_timer_sessions(days)\n    ...",
      "suggested_refactor": "Extract database operations to get_performance_insights_data_layer() + Extract UI rendering to get_performance_insights_ui_layer()"
    },
    {
      "function_name": "get_streamlit_charts",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 206,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_streamlit_charts(self, days: int = 30) -> Dict[str, Any]:\n        \"\"\"Generate Plotly charts optimized for Streamlit display.\"\"\"\n        \n        if not PLOTLY_AVAILABLE:\n            return {\"error\": \"Plotly not available for charts\"}\n        \n        charts = {}\n        \n        # Get da...",
      "suggested_refactor": "Extract UI rendering to get_streamlit_charts_ui_layer()"
    },
    {
      "function_name": "_convert_to_streamlit_report",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 234,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _convert_to_streamlit_report(self, raw_report: Dict[str, Any], days: int) -> AnalyticsReport:\n        \"\"\"Convert raw analytics report to Streamlit-optimized format.\"\"\"\n        \n        return AnalyticsReport(\n            period_days=days,\n            total_sessions=raw_report.get(\"total_sess...",
      "suggested_refactor": "Extract UI rendering to _convert_to_streamlit_report_ui_layer()"
    },
    {
      "function_name": "_generate_fallback_report",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 252,
      "responsibilities": [
        "database",
        "ui",
        "business_logic",
        "auth",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _generate_fallback_report(self, days: int) -> AnalyticsReport:\n        \"\"\"Generate analytics report using database queries when engine unavailable.\"\"\"\n        \n        if not self.db_manager:\n            # Return empty report\n            return AnalyticsReport(\n                period_days=da...",
      "suggested_refactor": "Extract database operations to _generate_fallback_report_data_layer() + Extract UI rendering to _generate_fallback_report_ui_layer() + Extract business logic to _generate_fallback_report_processor()"
    },
    {
      "function_name": "_calculate_daily_focus_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 320,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_daily_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[str, float]:\n        \"\"\"Calculate daily focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        daily_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n     ...",
      "suggested_refactor": "Extract UI rendering to _calculate_daily_focus_trends_ui_layer() + Extract logging to _calculate_daily_focus_trends_audit_layer() + Extract business logic to _calculate_daily_focus_trends_processor()"
    },
    {
      "function_name": "_calculate_hourly_focus_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 340,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_hourly_focus_trends(self, timer_sessions: List[Dict[str, Any]]) -> Dict[int, float]:\n        \"\"\"Calculate hourly focus rating trends.\"\"\"\n        \n        from collections import defaultdict\n        hourly_focus = defaultdict(list)\n        \n        for session in timer_sessions:\n  ...",
      "suggested_refactor": "Extract UI rendering to _calculate_hourly_focus_trends_ui_layer() + Extract logging to _calculate_hourly_focus_trends_audit_layer() + Extract business logic to _calculate_hourly_focus_trends_processor()"
    },
    {
      "function_name": "_calculate_productivity_score",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 364,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_productivity_score(self, avg_focus: float, sessions: int, tasks: int, days: int) -> float:\n        \"\"\"Calculate overall productivity score (0-100).\"\"\"\n        \n        # Weight factors\n        focus_weight = 0.4\n        consistency_weight = 0.3\n        completion_weight = 0.3\n    ...",
      "suggested_refactor": "Extract business logic to _calculate_productivity_score_processor()"
    },
    {
      "function_name": "_calculate_trends",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 392,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_trends(self, timer_sessions: List[Dict], tasks: List[Dict]) -> Dict[str, Any]:\n        \"\"\"Calculate various trends from data.\"\"\"\n        \n        trends = {}\n        \n        # Focus trend (last 7 days vs previous 7 days)\n        if len(timer_sessions) >= 14:\n            recent_fo...",
      "suggested_refactor": "Extract business logic to _calculate_trends_processor()"
    },
    {
      "function_name": "_calculate_daily_metrics",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 436,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _calculate_daily_metrics(self, timer_sessions: List[Dict], tasks: List[Dict]) -> List[Dict[str, Any]]:\n        \"\"\"Calculate daily metrics for the report.\"\"\"\n        \n        from collections import defaultdict\n        daily_data = defaultdict(lambda: {\n            \"date\": \"\",\n            \"se...",
      "suggested_refactor": "Extract UI rendering to _calculate_daily_metrics_ui_layer() + Extract logging to _calculate_daily_metrics_audit_layer() + Extract business logic to _calculate_daily_metrics_processor()"
    },
    {
      "function_name": "_get_today_sessions",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 483,
      "responsibilities": [
        "auth",
        "network",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _get_today_sessions(self) -> List[Dict[str, Any]]:\n        \"\"\"Get today's timer sessions.\"\"\"\n        if not self.db_manager:\n            return []\n        \n        all_sessions = self.db_manager.get_timer_sessions(1)\n        today_str = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        re...",
      "suggested_refactor": "Extract database operations to _get_today_sessions_data_layer()"
    },
    {
      "function_name": "_has_recent_activity",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 501,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _has_recent_activity(self) -> bool:\n        \"\"\"Check if there's been recent activity (last 2 hours).\"\"\"\n        if not self.db_manager:\n            return False\n        \n        recent_sessions = self.db_manager.get_timer_sessions(1)  # Last day\n        if not recent_sessions:\n            re...",
      "suggested_refactor": "Extract database operations to _has_recent_activity_data_layer() + Extract UI rendering to _has_recent_activity_ui_layer() + Extract logging to _has_recent_activity_audit_layer()"
    },
    {
      "function_name": "_get_last_session_info",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 518,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_last_session_info(self) -> Dict[str, Any]:\n        \"\"\"Get information about the last session.\"\"\"\n        if not self.db_manager:\n            return {}\n        \n        recent_sessions = self.db_manager.get_timer_sessions(1)\n        if not recent_sessions:\n            return {}\n        \n...",
      "suggested_refactor": "Extract database operations to _get_last_session_info_data_layer() + Extract UI rendering to _get_last_session_info_ui_layer() + Extract logging to _get_last_session_info_audit_layer()"
    },
    {
      "function_name": "_analyze_focus_patterns",
      "file_path": "streamlit_extension/utils/analytics_integration.py",
      "line_number": 537,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _analyze_focus_patterns(self, sessions: List[Dict]) -> Optional[Dict[str, Any]]:\n        \"\"\"Analyze focus patterns for insights.\"\"\"\n        focus_ratings = [s.get(\"focus_rating\") for s in sessions if s.get(\"focus_rating\")]\n        \n        if len(focus_ratings) < 5:\n            return None\n ...",
      "suggested_refactor": "Extract UI rendering to _analyze_focus_patterns_ui_layer()"
    },
    {
      "function_name": "invalidate_cache",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 647,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def invalidate_cache(prefix: str, *args, **kwargs):\n    \"\"\"\n    Invalidate cache for specific key or pattern.\n    \n    Args:\n        prefix: Cache key prefix\n        *args: Arguments for key generation\n        **kwargs: Keyword arguments for key generation\n    \"\"\"\n    cache = get_cache_manager()\n   ...",
      "suggested_refactor": "Extract database operations to invalidate_cache_data_layer()"
    },
    {
      "function_name": "get_cache_stats",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 668,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_cache_stats() -> Dict[str, Any]:\n    \"\"\"Get cache statistics and information.\"\"\"\n    cache = get_cache_manager()\n    return cache.get_cache_info()\n\n",
      "suggested_refactor": "Extract UI rendering to get_cache_stats_ui_layer() + Extract logging to get_cache_stats_audit_layer()"
    },
    {
      "function_name": "record_error",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 126,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def record_error(self):\n        \"\"\"Record cache error.\"\"\"\n        with self._lock:\n            self.stats[\"errors\"] += 1\n            self.stats[\"total_requests\"] += 1\n    ",
      "suggested_refactor": "Extract UI rendering to record_error_ui_layer() + Extract logging to record_error_audit_layer()"
    },
    {
      "function_name": "_update_avg_response_time",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 132,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _update_avg_response_time(self, response_time: float):\n        \"\"\"Update average response time.\"\"\"\n        current_avg = self.stats[\"avg_response_time\"]\n        total_requests = self.stats[\"total_requests\"]\n        \n        # Calculate new average using incremental formula\n        self.stats...",
      "suggested_refactor": "Extract database operations to _update_avg_response_time_data_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 172,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, host: str = \"localhost\", port: int = 6379, db: int = 0,\n                 prefix: str = \"tdd\", ttl: int = 300) -> None:\n        self.host = host\n        self.port = port\n        self.db = db\n        self.prefix = prefix\n        self.ttl = ttl\n        self.logger = create_secure...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer() + Extract validation to __init___validator()"
    },
    {
      "function_name": "get",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 196,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get(self, key: str) -> Optional[str]:\n        if not self.is_available:\n            return None\n        try:\n            val = self._client.get(self._hkey(key))\n            return val.decode() if isinstance(val, (bytes, bytearray)) else val\n        except Exception as e:\n            self.log...",
      "suggested_refactor": "Extract UI rendering to get_ui_layer() + Extract logging to get_audit_layer() + Extract validation to get_validator()"
    },
    {
      "function_name": "set",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 206,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def set(self, key: str, value: str, ttl: Optional[int] = None) -> bool:\n        if not self.is_available:\n            return False\n        try:\n            self._client.set(self._hkey(key), value, ex=ttl or self.ttl)\n            return True\n        except Exception as e:\n            self.logger....",
      "suggested_refactor": "Extract UI rendering to set_ui_layer() + Extract logging to set_audit_layer() + Extract validation to set_validator()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 220,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, \n                 host: str = \"localhost\",\n                 port: int = 6379,\n                 db: int = 0,\n                 password: Optional[str] = None,\n                 max_connections: int = 10,\n                 socket_timeout: float = 5.0,\n                 socket_connec...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer() + Extract validation to __init___validator()"
    },
    {
      "function_name": "_setup_logging",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 270,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup secure logging.\"\"\"\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('redis_cache')\n        else:\n            self.logger = logging.getLogger('redis_cache')\n            self.logger.setLevel(logging.INFO)\n            \n...",
      "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
    },
    {
      "function_name": "_initialize_connection",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 286,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _initialize_connection(self):\n        \"\"\"Initialize Redis connection with error handling.\"\"\"\n        if not REDIS_AVAILABLE:\n            self.logger.warning(\"Redis library not available. Cache will use fallback mode.\")\n            return\n        \n        try:\n            # Create connection ...",
      "suggested_refactor": "Extract UI rendering to _initialize_connection_ui_layer() + Extract logging to _initialize_connection_audit_layer()"
    },
    {
      "function_name": "_check_health",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 320,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _check_health(self) -> bool:\n        \"\"\"Check Redis health with throttling.\"\"\"\n        current_time = time.time()\n        \n        # Throttle health checks\n        if current_time - self._last_health_check < self.health_check_interval:\n            return self.is_available\n        \n        se...",
      "suggested_refactor": "Extract UI rendering to _check_health_ui_layer() + Extract logging to _check_health_audit_layer() + Extract validation to _check_health_validator()"
    },
    {
      "function_name": "_serialize_data",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 391,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _serialize_data(self, data: Any) -> str:\n        \"\"\"Serialize data for Redis storage.\"\"\"\n        try:\n            return json.dumps(data, default=str, ensure_ascii=False)\n        except Exception as e:\n            self.logger.error(f\"Serialization error: {e}\")\n            raise ValueError(f\"...",
      "suggested_refactor": "Extract UI rendering to _serialize_data_ui_layer() + Extract logging to _serialize_data_audit_layer()"
    },
    {
      "function_name": "_deserialize_data",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 399,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _deserialize_data(self, data: str) -> Any:\n        \"\"\"Deserialize data from Redis.\"\"\"\n        try:\n            return json.loads(data)\n        except Exception as e:\n            self.logger.error(f\"Deserialization error: {e}\")\n            raise ValueError(f\"Cannot deserialize data: {e}\")\n   ...",
      "suggested_refactor": "Extract UI rendering to _deserialize_data_ui_layer() + Extract logging to _deserialize_data_audit_layer()"
    },
    {
      "function_name": "get",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 417,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get(self, key: str) -> Optional[Any]:\n        \"\"\"\n        Get value from cache.\n        \n        Args:\n            key: Cache key\n            \n        Returns:\n            Cached value or None if not found/error\n        \"\"\"\n        if not self._check_health():\n            return None\n       ...",
      "suggested_refactor": "Extract UI rendering to get_ui_layer() + Extract logging to get_audit_layer()"
    },
    {
      "function_name": "set",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 449,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def set(self, key: str, value: Any, ttl: int = 900) -> bool:\n        \"\"\"\n        Set value in cache.\n        \n        Args:\n            key: Cache key\n            value: Value to cache\n            ttl: Time to live in seconds\n            \n        Returns:\n            True if successful, False ot...",
      "suggested_refactor": "Extract UI rendering to set_ui_layer() + Extract logging to set_audit_layer()"
    },
    {
      "function_name": "delete",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 478,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def delete(self, key: str) -> bool:\n        \"\"\"\n        Delete key from cache.\n        \n        Args:\n            key: Cache key to delete\n            \n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self._check_health():\n            return False\n     ...",
      "suggested_refactor": "Extract database operations to delete_data_layer() + Extract UI rendering to delete_ui_layer() + Extract logging to delete_audit_layer()"
    },
    {
      "function_name": "delete_pattern",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 503,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def delete_pattern(self, pattern: str) -> int:\n        \"\"\"\n        Delete keys matching pattern.\n        \n        Args:\n            pattern: Key pattern (e.g., 'client:*')\n            \n        Returns:\n            Number of keys deleted\n        \"\"\"\n        if not self._check_health():\n          ...",
      "suggested_refactor": "Extract database operations to delete_pattern_data_layer() + Extract UI rendering to delete_pattern_ui_layer() + Extract logging to delete_pattern_audit_layer()"
    },
    {
      "function_name": "flush_all",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 532,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def flush_all(self) -> bool:\n        \"\"\"\n        Flush all cache data.\n        \n        Returns:\n            True if successful, False otherwise\n        \"\"\"\n        if not self._check_health():\n            return False\n        \n        try:\n            with self._measure_time():\n                ...",
      "suggested_refactor": "Extract UI rendering to flush_all_ui_layer() + Extract logging to flush_all_audit_layer()"
    },
    {
      "function_name": "get_cache_info",
      "file_path": "streamlit_extension/utils/redis_cache.py",
      "line_number": 554,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_cache_info(self) -> Dict[str, Any]:\n        \"\"\"Get cache information and statistics.\"\"\"\n        info = {\n            \"available\": self.is_available,\n            \"host\": self.host,\n            \"port\": self.port,\n            \"db\": self.db,\n            \"max_connections\": self.max_connection...",
      "suggested_refactor": "Extract UI rendering to get_cache_info_ui_layer() + Extract logging to get_cache_info_audit_layer()"
    },
    {
      "function_name": "format",
      "file_path": "streamlit_extension/utils/log_formatter.py",
      "line_number": 14,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def format(self, record: logging.LogRecord) -> str:\n        \"\"\"Format log record as JSON\"\"\"\n\n        # Start with basic log record\n        log_entry = {\n            \"event\": \"log\",\n            \"timestamp\": datetime.fromtimestamp(record.created).isoformat() + \"Z\",\n            \"level\": record.leve...",
      "suggested_refactor": "Extract UI rendering to format_ui_layer() + Extract logging to format_audit_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 427,
      "responsibilities": [
        "database",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, framework_db_path: str = \"framework.db\", timer_db_path: str = \"task_timer.db\") -> None:\n        \"\"\"Initialize database manager with connection paths.\n\n        Creates SQLAlchemy engines for both databases when available and sets up\n        internal structures required for cach...",
      "suggested_refactor": "Extract database operations to __init___data_layer() + Extract UI rendering to __init___ui_layer()"
    },
    {
      "function_name": "release_connection",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 527,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def release_connection(self, connection: Union[Connection, SQLiteConnection]) -> None:\n        \"\"\"Return connection to pool with cleanup.\n\n        This method is provided for cases where a connection obtained via\n        :meth:`get_connection` needs to be closed manually instead of using the\n   ...",
      "suggested_refactor": "Extract database operations to release_connection_data_layer() + Extract UI rendering to release_connection_ui_layer() + Extract logging to release_connection_audit_layer()"
    },
    {
      "function_name": "delete_with_transaction",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 627,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def delete_with_transaction(\n        self, \n        delete_operations: List[Tuple[str, Dict[str, Any]]], \n        isolation_level: str = \"READ_COMMITTED\"",
      "suggested_refactor": "Extract database operations to delete_with_transaction_data_layer()"
    },
    {
      "function_name": "get_timer_sessions",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 981,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_timer_sessions(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Get recent timer sessions with short-term caching.\"\"\"\n        if not self.timer_db_path.exists():\n            return []\n        \n        try:\n            with self.get_connection(\"timer\") as conn:\n                qu...",
      "suggested_refactor": "Extract database operations to get_timer_sessions_data_layer() + Extract logging to get_timer_sessions_audit_layer()"
    },
    {
      "function_name": "get_user_stats",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1011,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_user_stats(self, user_id: int = 1) -> Dict[str, Any]:\n        \"\"\"Get user statistics and gamification data.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                stats = {}\n                \n                # Basic stats\n                if SQLALCHEMY_A...",
      "suggested_refactor": "Extract database operations to get_user_stats_data_layer() + Extract logging to get_user_stats_audit_layer()"
    },
    {
      "function_name": "get_achievements",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1079,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_achievements(self, user_id: int = 1) -> List[Dict[str, Any]]:\n        \"\"\"Get user achievements.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                query = \"\"\"\n                    SELECT at.code, at.name, at.description, at.category,\n               ...",
      "suggested_refactor": "Extract database operations to get_achievements_data_layer() + Extract logging to get_achievements_audit_layer()"
    },
    {
      "function_name": "update_task_status",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1105,
      "responsibilities": [
        "logging",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def update_task_status(self, task_id: int, status: str, tdd_phase: Optional[str] = None) -> bool:\n        \"\"\"Update task status and TDD phase with cache invalidation.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n             ...",
      "suggested_refactor": "Extract database operations to update_task_status_data_layer() + Extract logging to update_task_status_audit_layer()"
    },
    {
      "function_name": "create_timer_session",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1150,
      "responsibilities": [
        "logging",
        "auth",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def create_timer_session(self, task_id: Optional[int], duration_minutes: int, \n                           focus_rating: Optional[int] = None, interruptions: int = 0,\n                           actual_duration_minutes: Optional[int] = None,\n                           ended_at: Optional[str] = Non...",
      "suggested_refactor": "Extract database operations to create_timer_session_data_layer() + Extract logging to create_timer_session_audit_layer()"
    },
    {
      "function_name": "get_epic_progress",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1202,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_progress(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get detailed progress for an epic with extensive debugging.\"\"\"\n\n        # Early validation\n        if epic_id is None:\n            print(\"DEBUG: get_epic_progress called with epic_id=None\")\n            return self._get_defau...",
      "suggested_refactor": "Extract database operations to get_epic_progress_data_layer() + Extract UI rendering to get_epic_progress_ui_layer() + Extract logging to get_epic_progress_audit_layer()"
    },
    {
      "function_name": "check_database_health",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1312,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def check_database_health(self) -> Dict[str, Any]:\n        \"\"\"Comprehensive database health check with diagnostics.\n\n        Performs connection tests against both framework and timer databases and\n        reports the availability of optional dependencies used by the\n        application.\n\n      ...",
      "suggested_refactor": "Extract database operations to check_database_health_data_layer() + Extract logging to check_database_health_audit_layer() + Extract validation to check_database_health_validator()"
    },
    {
      "function_name": "format_database_datetime",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1367,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def format_database_datetime(self, dt_string: str, format_type: str = \"full\") -> str:\n        \"\"\"Format database datetime string with user timezone.\"\"\"\n        if not dt_string or not TIMEZONE_UTILS_AVAILABLE:\n            return dt_string or \"Unknown\"\n        \n        try:\n            # Parse da...",
      "suggested_refactor": "Extract UI rendering to format_database_datetime_ui_layer() + Extract logging to format_database_datetime_audit_layer()"
    },
    {
      "function_name": "get_formatted_epic_data",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1393,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_formatted_epic_data(self) -> List[Dict[str, Any]]:\n        \"\"\"Get epics with formatted datetime fields.\"\"\"\n        epics = self.get_epics()\n        \n        for epic in epics:\n            if 'created_at' in epic:\n                epic['created_at_formatted'] = self.format_database_datetim...",
      "suggested_refactor": "Extract database operations to get_formatted_epic_data_data_layer() + Extract UI rendering to get_formatted_epic_data_ui_layer()"
    },
    {
      "function_name": "get_formatted_timer_sessions",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1412,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_formatted_timer_sessions(self, days: int = 30) -> List[Dict[str, Any]]:\n        \"\"\"Get timer sessions with formatted datetime fields.\"\"\"\n        sessions = self.get_timer_sessions(days)\n        \n        for session in sessions:\n            if 'started_at' in session:\n                sess...",
      "suggested_refactor": "Extract UI rendering to get_formatted_timer_sessions_ui_layer()"
    },
    {
      "function_name": "clear_cache",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1431,
      "responsibilities": [
        "network",
        "logging",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def clear_cache(self, cache_pattern: Optional[str] = None) -> bool:\n        \"\"\"Clear query result caches with optional pattern matching.\n\n        Args:\n            cache_pattern: Optional pattern to selectively invalidate caches.\n                When ``None`` all database query caches are remove...",
      "suggested_refactor": "Extract database operations to clear_cache_data_layer() + Extract logging to clear_cache_audit_layer()"
    },
    {
      "function_name": "get_query_statistics",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1463,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_query_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get detailed query performance statistics.\n\n        Returns:\n            Dict[str, Any]: Mapping of engine names to connection pool metrics.\n\n        Example:\n            >>> stats = db_manager.get_query_statistics()\n        \"\"\"\n      ...",
      "suggested_refactor": "Extract database operations to get_query_statistics_data_layer() + Extract UI rendering to get_query_statistics_ui_layer()"
    },
    {
      "function_name": "get_productivity_stats",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1552,
      "responsibilities": [
        "logging",
        "database",
        "business_logic",
        "auth",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_productivity_stats(self, days: int = 7) -> Dict[str, Any]:\n        \"\"\"Get productivity statistics for the last N days.\"\"\"\n        stats = {\n            \"activity_by_date\": {},\n            \"tasks_completed_total\": 0,\n            \"focus_time_total\": 0,\n            \"average_daily_tasks\": 0,...",
      "suggested_refactor": "Extract database operations to get_productivity_stats_data_layer() + Extract logging to get_productivity_stats_audit_layer() + Extract business logic to get_productivity_stats_processor()"
    },
    {
      "function_name": "get_daily_summary",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1646,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_daily_summary(self) -> Dict[str, Any]:\n        \"\"\"Get today's activity summary.\"\"\"\n        summary = {\n            \"tasks_completed\": 0,\n            \"tasks_in_progress\": 0,\n            \"tasks_created\": 0,\n            \"focus_time_minutes\": 0,\n            \"timer_sessions\": 0,\n            \"...",
      "suggested_refactor": "Extract database operations to get_daily_summary_data_layer() + Extract UI rendering to get_daily_summary_ui_layer() + Extract logging to get_daily_summary_audit_layer()"
    },
    {
      "function_name": "get_pending_notifications",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1768,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_pending_notifications(self) -> List[Dict[str, Any]]:\n        \"\"\"Get pending notifications for the user.\"\"\"\n        notifications = []\n        \n        try:\n            with self.get_connection(\"framework\") as conn:\n                # Check for overdue tasks\n                if SQLALCHEMY_A...",
      "suggested_refactor": "Extract database operations to get_pending_notifications_data_layer() + Extract UI rendering to get_pending_notifications_ui_layer() + Extract logging to get_pending_notifications_audit_layer()"
    },
    {
      "function_name": "get_user_achievements",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1815,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_user_achievements(self, limit: int = 10) -> List[Dict[str, Any]]:\n        \"\"\"Get user achievements.\"\"\"\n        achievements = []\n        \n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.exe...",
      "suggested_refactor": "Extract database operations to get_user_achievements_data_layer() + Extract logging to get_user_achievements_audit_layer()"
    },
    {
      "function_name": "_calculate_current_streak",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1870,
      "responsibilities": [
        "business_logic",
        "auth",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _calculate_current_streak(self) -> int:\n        \"\"\"Calculate current task completion streak.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n                        SELECT c...",
      "suggested_refactor": "Extract database operations to _calculate_current_streak_data_layer() + Extract business logic to _calculate_current_streak_processor()"
    },
    {
      "function_name": "_get_best_streak",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1894,
      "responsibilities": [
        "auth",
        "network",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _get_best_streak(self) -> int:\n        \"\"\"Get best streak record.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n                        SELECT best_streak FROM user_streak...",
      "suggested_refactor": "Extract database operations to _get_best_streak_data_layer()"
    },
    {
      "function_name": "create_task",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 1920,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def create_task(self, title: str, epic_id: int, description: str = \"\", \n                   tdd_phase: str = \"\", priority: int = 2, \n                   estimate_minutes: int = 0) -> Optional[int]:\n        \"\"\"Create a new task in the database.\n        \n        Args:\n            title: Task title\n ...",
      "suggested_refactor": "Extract database operations to create_task_data_layer() + Extract UI rendering to create_task_ui_layer() + Extract logging to create_task_audit_layer()"
    },
    {
      "function_name": "delete_task",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2049,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_task(self, task_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete a task (soft delete by default).\n        \n        Args:\n            task_id: ID of the task to delete\n            soft_delete: If True, mark as deleted; if False, actually delete\n            \n        Returns...",
      "suggested_refactor": "Extract database operations to delete_task_data_layer() + Extract UI rendering to delete_task_ui_layer() + Extract logging to delete_task_audit_layer()"
    },
    {
      "function_name": "get_kanban_tasks",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2094,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_kanban_tasks(self) -> Dict[str, List[Dict[str, Any]]]:\n        \"\"\"Get tasks optimized for Kanban board display (grouped by status).\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                query = \"\"\"\n                    SELECT t.id, t.epic_id, t.title, ...",
      "suggested_refactor": "Extract database operations to get_kanban_tasks_data_layer() + Extract UI rendering to get_kanban_tasks_ui_layer() + Extract logging to get_kanban_tasks_audit_layer()"
    },
    {
      "function_name": "get_task_statistics",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2133,
      "responsibilities": [
        "network",
        "logging",
        "database"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_task_statistics(self) -> Dict[str, int]:\n        \"\"\"Get quick statistics for tasks (used by dashboard widgets).\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"\"\"\n         ...",
      "suggested_refactor": "Extract database operations to get_task_statistics_data_layer() + Extract logging to get_task_statistics_audit_layer()"
    },
    {
      "function_name": "calculate_epic_duration",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2186,
      "responsibilities": [
        "business_logic",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def calculate_epic_duration(self, epic_id: int) -> float:\n        \"\"\"Calculate total duration for an epic based on task dates.\n        \n        Args:\n            epic_id: ID of the epic to calculate duration for\n            \n        Returns:\n            Duration in days (float), or 0.0 if calcul...",
      "suggested_refactor": "Extract database operations to calculate_epic_duration_data_layer() + Extract UI rendering to calculate_epic_duration_ui_layer() + Extract logging to calculate_epic_duration_audit_layer() + Extract business logic to calculate_epic_duration_processor()"
    },
    {
      "function_name": "update_duration_description",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2247,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_duration_description(self, epic_id: int, description: str) -> bool:\n        \"\"\"Update the duration description for an epic.\n        \n        Args:\n            epic_id: ID of the epic to update\n            description: New duration description (e.g., \"1.5 dias\", \"1 semana\")\n           ...",
      "suggested_refactor": "Extract database operations to update_duration_description_data_layer() + Extract UI rendering to update_duration_description_ui_layer() + Extract logging to update_duration_description_audit_layer()"
    },
    {
      "function_name": "get_epic_timeline",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2301,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epic_timeline(self, epic_id: int) -> Dict[str, Any]:\n        \"\"\"Get comprehensive timeline information for an epic.\n        \n        Args:\n            epic_id: ID of the epic to get timeline for\n            \n        Returns:\n            Dictionary with timeline data including dates, dura...",
      "suggested_refactor": "Extract database operations to get_epic_timeline_data_layer() + Extract UI rendering to get_epic_timeline_ui_layer() + Extract logging to get_epic_timeline_audit_layer()"
    },
    {
      "function_name": "validate_date_consistency",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2391,
      "responsibilities": [
        "logging",
        "database",
        "validation"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_date_consistency(self, epic_id: int) -> bool:\n        \"\"\"Validate date consistency for an epic.\n        \n        Args:\n            epic_id: ID of the epic to validate\n            \n        Returns:\n            True if dates are consistent, False otherwise\n        \"\"\"\n        if not D...",
      "suggested_refactor": "Extract database operations to validate_date_consistency_data_layer() + Extract logging to validate_date_consistency_audit_layer() + Extract validation to validate_date_consistency_validator()"
    },
    {
      "function_name": "_calculate_epic_duration_from_tasks",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2445,
      "responsibilities": [
        "business_logic",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _calculate_epic_duration_from_tasks(self, epic_id: int) -> float:\n        \"\"\"Calculate epic duration by summing task durations.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(text(\"...",
      "suggested_refactor": "Extract database operations to _calculate_epic_duration_from_tasks_data_layer() + Extract business logic to _calculate_epic_duration_from_tasks_processor()"
    },
    {
      "function_name": "_get_epic_task_timeline",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2472,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _get_epic_task_timeline(self, epic_id: int) -> List[Dict[str, Any]]:\n        \"\"\"Get timeline information for tasks within an epic.\"\"\"\n        try:\n            with self.get_connection(\"framework\") as conn:\n                if SQLALCHEMY_AVAILABLE:\n                    result = conn.execute(tex...",
      "suggested_refactor": "Extract database operations to _get_epic_task_timeline_data_layer() + Extract UI rendering to _get_epic_task_timeline_ui_layer()"
    },
    {
      "function_name": "get_client",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2623,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_client(self, client_id: int) -> Optional[Dict[str, Any]]:\n        \"\"\"Retrieve single client by ID.\n\n        Args:\n            client_id: Unique client identifier. Must be a positive integer.\n\n        Returns:\n            Optional[Dict[str, Any]]: Client record dictionary or ``None`` if\n ...",
      "suggested_refactor": "Extract database operations to get_client_data_layer() + Extract UI rendering to get_client_ui_layer() + Extract logging to get_client_audit_layer() + Extract validation to get_client_validator()"
    },
    {
      "function_name": "get_epics_with_hierarchy",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2802,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_epics_with_hierarchy(self, project_id: Optional[int] = None, client_id: Optional[int] = None,\n                               page: int = 1, page_size: int = 25, status_filter: str = \"\") -> Dict[str, Any]:\n        \"\"\"Get epics with complete hierarchy information (client \u2192 project \u2192 epic) ...",
      "suggested_refactor": "Extract database operations to get_epics_with_hierarchy_data_layer() + Extract UI rendering to get_epics_with_hierarchy_ui_layer() + Extract logging to get_epics_with_hierarchy_audit_layer()"
    },
    {
      "function_name": "get_hierarchy_overview",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2913,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_hierarchy_overview(self, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get complete hierarchy overview using the database view.\n        \n        Args:\n            client_id: Filter by specific client ID (optional)\n            \n        Returns:\n            List of h...",
      "suggested_refactor": "Extract database operations to get_hierarchy_overview_data_layer() + Extract UI rendering to get_hierarchy_overview_ui_layer() + Extract logging to get_hierarchy_overview_audit_layer()"
    },
    {
      "function_name": "get_client_dashboard",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2954,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_client_dashboard(self, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get client dashboard data using the database view.\n        \n        Args:\n            client_id: Get data for specific client (optional)\n            \n        Returns:\n            List of client da...",
      "suggested_refactor": "Extract database operations to get_client_dashboard_data_layer() + Extract UI rendering to get_client_dashboard_ui_layer() + Extract logging to get_client_dashboard_audit_layer()"
    },
    {
      "function_name": "get_project_dashboard",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 2996,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_project_dashboard(self, project_id: Optional[int] = None, client_id: Optional[int] = None) -> List[Dict[str, Any]]:\n        \"\"\"Get project dashboard data using the database view.\n        \n        Args:\n            project_id: Get data for specific project (optional)\n            client_id...",
      "suggested_refactor": "Extract database operations to get_project_dashboard_data_layer() + Extract UI rendering to get_project_dashboard_ui_layer() + Extract logging to get_project_dashboard_audit_layer()"
    },
    {
      "function_name": "update_epic_project",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3233,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_epic_project(self, epic_id: int, project_id: int) -> bool:\n        \"\"\"Update the project assignment for an epic.\n        \n        Args:\n            epic_id: ID of the epic to update\n            project_id: ID of the new project\n            \n        Returns:\n            True if success...",
      "suggested_refactor": "Extract database operations to update_epic_project_data_layer() + Extract UI rendering to update_epic_project_ui_layer() + Extract logging to update_epic_project_audit_layer()"
    },
    {
      "function_name": "get_client_by_key",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3267,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_client_by_key(self, client_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get client by client_key.\n        \n        Args:\n            client_key: Client key to search for\n            \n        Returns:\n            Client dictionary if found, None otherwise\n        \"\"\"\n        try:\n   ...",
      "suggested_refactor": "Extract database operations to get_client_by_key_data_layer() + Extract UI rendering to get_client_by_key_ui_layer() + Extract logging to get_client_by_key_audit_layer()"
    },
    {
      "function_name": "get_project_by_key",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3298,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def get_project_by_key(self, client_id: int, project_key: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Get project by client_id and project_key.\n        \n        Args:\n            client_id: Client ID\n            project_key: Project key to search for\n            \n        Returns:\n            Pr...",
      "suggested_refactor": "Extract database operations to get_project_by_key_data_layer() + Extract UI rendering to get_project_by_key_ui_layer() + Extract logging to get_project_by_key_audit_layer()"
    },
    {
      "function_name": "update_client",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3332,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_client(self, client_id: int, **fields: Any) -> bool:\n        \"\"\"Update existing client record.\n\n        Updates specified fields while preserving others. Validates all input\n        and maintains data integrity. Supports partial updates.\n\n        Args:\n            client_id: Client ID...",
      "suggested_refactor": "Extract database operations to update_client_data_layer() + Extract UI rendering to update_client_ui_layer() + Extract logging to update_client_audit_layer()"
    },
    {
      "function_name": "delete_client",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3413,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_client(self, client_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete client record (soft or hard delete).\n\n        Removes client from active use. Soft delete preserves data for audit\n        purposes. Hard delete permanently removes all data.\n\n        Args:\n            c...",
      "suggested_refactor": "Extract database operations to delete_client_data_layer() + Extract UI rendering to delete_client_ui_layer() + Extract logging to delete_client_audit_layer()"
    },
    {
      "function_name": "update_project",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3481,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def update_project(self, project_id: int, **fields: Any) -> bool:\n        \"\"\"Update an existing project.\n        \n        Args:\n            project_id: ID of the project to update\n            **fields: Fields to update\n            \n        Returns:\n            True if successful, False otherwise...",
      "suggested_refactor": "Extract database operations to update_project_data_layer() + Extract UI rendering to update_project_ui_layer() + Extract logging to update_project_audit_layer()"
    },
    {
      "function_name": "delete_project",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3549,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def delete_project(self, project_id: int, soft_delete: bool = True) -> bool:\n        \"\"\"Delete a project (soft delete by default).\n        \n        Args:\n            project_id: ID of the project to delete\n            soft_delete: If True, mark as deleted instead of removing\n            \n       ...",
      "suggested_refactor": "Extract database operations to delete_project_data_layer() + Extract UI rendering to delete_project_ui_layer() + Extract logging to delete_project_audit_layer()"
    },
    {
      "function_name": "close",
      "file_path": "streamlit_extension/utils/database.py",
      "line_number": 3594,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def close(self) -> None:\n        \"\"\"\n        Fecha conex\u00f5es e libera recursos do banco de dados.\n        Importante para cleanup adequado em testes e shutdown.\n        \"\"\"\n        try:\n            if hasattr(self, 'engine'):\n                self.engine.dispose()\n                logger.info(\"Data...",
      "suggested_refactor": "Extract UI rendering to close_ui_layer() + Extract logging to close_audit_layer()"
    },
    {
      "function_name": "sanitize_input",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 791,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def sanitize_input(value: str, field_name: str = \"input\") -> str:\n    \"\"\"Sanitize user input from forms.\"\"\"\n    return security_manager.sanitize_form_input(value, field_name)\n\n",
      "suggested_refactor": "Extract UI rendering to sanitize_input_ui_layer() + Extract validation to sanitize_input_validator()"
    },
    {
      "function_name": "sanitize_display",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 796,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def sanitize_display(text: str, max_length: int = 1000) -> str:\n    \"\"\"Sanitize text for display.\"\"\"\n    return security_manager.sanitize_display_text(text, max_length)\n\n",
      "suggested_refactor": "Extract UI rendering to sanitize_display_ui_layer() + Extract validation to sanitize_display_validator()"
    },
    {
      "function_name": "validate_form",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 801,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def validate_form(data: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"Validate form data for security threats.\"\"\"\n    return security_manager.validate_form_data(data)\n\n",
      "suggested_refactor": "Extract UI rendering to validate_form_ui_layer() + Extract validation to validate_form_validator()"
    },
    {
      "function_name": "check_rate_limit",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 816,
      "responsibilities": [
        "auth",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def check_rate_limit(operation_type: str, \n                    user_id: Optional[str] = None,\n                    ip_address: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n    \"\"\"Check if operation is within rate limits.\"\"\"\n    return security_manager.check_rate_limit(operation_type, user_id,...",
      "suggested_refactor": "Extract validation to check_rate_limit_validator()"
    },
    {
      "function_name": "check_dos_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 840,
      "responsibilities": [
        "auth",
        "validation",
        "file_io"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_dos_protection(operation_type: str,\n                        endpoint: str = \"unknown\", \n                        request_size: int = 0,\n                        user_id: Optional[str] = None,\n                        profile_name: str = \"default\") -> Tuple[bool, Optional[str], Dict[str, Any]]...",
      "suggested_refactor": "Extract validation to check_dos_protection_validator()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 90,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self):\n        \"\"\"Initialize security manager with safe defaults.\"\"\"\n        # Initialize secure logging\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('streamlit_security')\n        else:\n            import logging\n            self.logger = log...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_configure_streamlit_rate_limits",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 125,
      "responsibilities": [
        "business_logic",
        "auth",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _configure_streamlit_rate_limits(self):\n        \"\"\"Configure rate limits for Streamlit operations.\"\"\"\n        if not self.rate_limiter:\n            return\n        \n        # Database operations - conservative limits\n        self.rate_limiter.configure_limit(\n            \"db_read\", \n         ...",
      "suggested_refactor": "Extract UI rendering to _configure_streamlit_rate_limits_ui_layer() + Extract business logic to _configure_streamlit_rate_limits_processor()"
    },
    {
      "function_name": "_configure_streamlit_dos_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 164,
      "responsibilities": [
        "auth",
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _configure_streamlit_dos_protection(self):\n        \"\"\"Configure DoS protection for Streamlit operations.\"\"\"\n        if not self.dos_protector:\n            return\n        \n        # Add circuit breakers for critical operations\n        try:\n            from circuit_breaker import CircuitBreake...",
      "suggested_refactor": "Extract UI rendering to _configure_streamlit_dos_protection_ui_layer() + Extract logging to _configure_streamlit_dos_protection_audit_layer()"
    },
    {
      "function_name": "sanitize_form_input",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 203,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def sanitize_form_input(self, value: str, field_name: str = \"input\") -> str:\n        \"\"\"\n        Sanitize user input from Streamlit forms.\n        \n        Args:\n            value: Raw input value from form\n            field_name: Name of the field for error reporting\n            \n        Return...",
      "suggested_refactor": "Extract UI rendering to sanitize_form_input_ui_layer() + Extract logging to sanitize_form_input_audit_layer() + Extract validation to sanitize_form_input_validator()"
    },
    {
      "function_name": "validate_form_data",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 237,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def validate_form_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:\n        \"\"\"\n        Validate form data for security threats.\n        \n        Args:\n            data: Dictionary of form data\n            \n        Returns:\n            Tuple of (is_valid, list_of_error_messages)\n      ...",
      "suggested_refactor": "Extract UI rendering to validate_form_data_ui_layer() + Extract logging to validate_form_data_audit_layer() + Extract validation to validate_form_data_validator()"
    },
    {
      "function_name": "sanitize_display_text",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 264,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def sanitize_display_text(self, text: str, max_length: int = 1000) -> str:\n        \"\"\"\n        Sanitize text for safe display in Streamlit UI.\n        \n        Args:\n            text: Text to display\n            max_length: Maximum length for display\n            \n        Returns:\n            Saf...",
      "suggested_refactor": "Extract UI rendering to sanitize_display_text_ui_layer() + Extract validation to sanitize_display_text_validator()"
    },
    {
      "function_name": "create_safe_client_data",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 317,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def create_safe_client_data(self, form_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Create safely sanitized client data from form input.\n        \n        Args:\n            form_data: Raw form data from Streamlit\n            \n        Returns:\n            Sanitized client data safe...",
      "suggested_refactor": "Extract UI rendering to create_safe_client_data_ui_layer() + Extract validation to create_safe_client_data_validator()"
    },
    {
      "function_name": "create_safe_project_data",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 343,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def create_safe_project_data(self, form_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Create safely sanitized project data from form input.\n        \n        Args:\n            form_data: Raw form data from Streamlit\n            \n        Returns:\n            Sanitized project data s...",
      "suggested_refactor": "Extract UI rendering to create_safe_project_data_ui_layer() + Extract validation to create_safe_project_data_validator()"
    },
    {
      "function_name": "check_rate_limit",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 368,
      "responsibilities": [
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def check_rate_limit(self, \n                        operation_type: str, \n                        user_id: Optional[str] = None,\n                        ip_address: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n        \"\"\"\n        Check if operation is within rate limits.\n        \n       ...",
      "suggested_refactor": "Extract UI rendering to check_rate_limit_ui_layer() + Extract logging to check_rate_limit_audit_layer() + Extract validation to check_rate_limit_validator()"
    },
    {
      "function_name": "reset_rate_limits",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 435,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def reset_rate_limits(self, \n                         operation_type: str,\n                         user_id: Optional[str] = None,\n                         ip_address: Optional[str] = None):\n        \"\"\"Reset rate limits for specific user/operation.\"\"\"\n        if not RATE_LIMITING_AVAILABLE or no...",
      "suggested_refactor": "Extract UI rendering to reset_rate_limits_ui_layer() + Extract logging to reset_rate_limits_audit_layer() + Extract validation to reset_rate_limits_validator()"
    },
    {
      "function_name": "_get_streamlit_session_id",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 455,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _get_streamlit_session_id(self) -> str:\n        \"\"\"Obt\u00e9m ID \u00fanico da sess\u00e3o Streamlit de forma segura.\"\"\"\n        try:\n            import streamlit as st\n            if hasattr(st, 'session_state') and hasattr(st.session_state, 'session_id'):\n                return str(st.session_state.sessi...",
      "suggested_refactor": "Extract UI rendering to _get_streamlit_session_id_ui_layer()"
    },
    {
      "function_name": "create_request_context",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 478,
      "responsibilities": [
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def create_request_context(self, \n                              endpoint: str = \"unknown\",\n                              request_size: int = 0,\n                              user_id: Optional[str] = None) -> Optional[Any]:\n        \"\"\"Create RequestContext for DoS protection from Streamlit sessio...",
      "suggested_refactor": "Extract UI rendering to create_request_context_ui_layer() + Extract logging to create_request_context_audit_layer() + Extract validation to create_request_context_validator()"
    },
    {
      "function_name": "check_comprehensive_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 517,
      "responsibilities": [
        "ui",
        "auth",
        "file_io",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def check_comprehensive_protection(self, \n                                     operation_type: str,\n                                     endpoint: str = \"unknown\",\n                                     request_size: int = 0,\n                                     user_id: Optional[str] = None,\n    ...",
      "suggested_refactor": "Extract UI rendering to check_comprehensive_protection_ui_layer() + Extract logging to check_comprehensive_protection_audit_layer() + Extract validation to check_comprehensive_protection_validator()"
    },
    {
      "function_name": "_get_client_ip",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 576,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_client_ip(self) -> Optional[str]:\n        \"\"\"Extract client IP address from Streamlit context.\"\"\"\n        try:\n            import streamlit as st\n            from streamlit.runtime.scriptrunner import get_script_run_ctx\n            \n            ctx = get_script_run_ctx()\n            if ...",
      "suggested_refactor": "Extract UI rendering to _get_client_ip_ui_layer() + Extract logging to _get_client_ip_audit_layer()"
    },
    {
      "function_name": "_get_user_agent",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 606,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_user_agent(self) -> Optional[str]:\n        \"\"\"Extract user agent from Streamlit context.\"\"\"\n        try:\n            from streamlit.runtime.scriptrunner import get_script_run_ctx\n            \n            ctx = get_script_run_ctx()\n            if ctx and hasattr(ctx, 'session_info'):\n   ...",
      "suggested_refactor": "Extract UI rendering to _get_user_agent_ui_layer() + Extract logging to _get_user_agent_audit_layer()"
    },
    {
      "function_name": "reset_dos_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 631,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def reset_dos_protection(self, operation_type: str, user_id: Optional[str] = None):\n        \"\"\"Reset DoS protection for specific user/operation.\"\"\"\n        if not DOS_PROTECTION_AVAILABLE or not self.dos_protector:\n            return\n        \n        try:\n            # Reset rate limits\n        ...",
      "suggested_refactor": "Extract UI rendering to reset_dos_protection_ui_layer() + Extract logging to reset_dos_protection_audit_layer() + Extract validation to reset_dos_protection_validator()"
    },
    {
      "function_name": "generate_csrf_token",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 657,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def generate_csrf_token(self, form_id: str) -> str:\n        \"\"\"\n        Generate a secure CSRF token for a form.\n        \n        Args:\n            form_id: Unique identifier for the form\n            \n        Returns:\n            Secure CSRF token string\n        \"\"\"\n        try:\n            impo...",
      "suggested_refactor": "Extract UI rendering to generate_csrf_token_ui_layer() + Extract logging to generate_csrf_token_audit_layer() + Extract validation to generate_csrf_token_validator()"
    },
    {
      "function_name": "validate_csrf_token",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 702,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_csrf_token(self, form_id: str, provided_token: str, max_age_seconds: int = 3600) -> bool:\n        \"\"\"\n        Validate a CSRF token for a form.\n        \n        Args:\n            form_id: Unique identifier for the form\n            provided_token: Token provided with form submission\n...",
      "suggested_refactor": "Extract UI rendering to validate_csrf_token_ui_layer() + Extract logging to validate_csrf_token_audit_layer() + Extract validation to validate_csrf_token_validator()"
    },
    {
      "function_name": "require_csrf_protection",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 750,
      "responsibilities": [
        "auth",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def require_csrf_protection(self, form_id: str, provided_token: Optional[str]) -> Tuple[bool, str]:\n        \"\"\"\n        Check CSRF protection for a form submission.\n        \n        Args:\n            form_id: Unique identifier for the form\n            provided_token: Token provided with form sub...",
      "suggested_refactor": "Extract UI rendering to require_csrf_protection_ui_layer() + Extract validation to require_csrf_protection_validator()"
    },
    {
      "function_name": "get_csrf_form_field",
      "file_path": "streamlit_extension/utils/security.py",
      "line_number": 769,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_csrf_form_field(self, form_id: str) -> Dict[str, str]:\n        \"\"\"\n        Get CSRF token and field name for embedding in forms.\n        \n        Args:\n            form_id: Unique identifier for the form\n            \n        Returns:\n            Dictionary with field name and token value...",
      "suggested_refactor": "Extract UI rendering to get_csrf_form_field_ui_layer()"
    },
    {
      "function_name": "get_relative_path",
      "file_path": "streamlit_extension/utils/path_utils.py",
      "line_number": 44,
      "responsibilities": [
        "network",
        "file_io"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_relative_path(file_path: Union[str, Path]) -> Path:\n    \"\"\"\n    Get path relative to project root.\n    \n    Args:\n        file_path: File path to make relative\n        \n    Returns:\n        Path relative to project root\n    \"\"\"\n    project_root = get_project_root()\n    file_path = Path(file_...",
      "suggested_refactor": ""
    },
    {
      "function_name": "require_authentication",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 273,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def require_authentication(func):\n    \"\"\"Decorator to require authentication for Streamlit pages.\"\"\"\n    def wrapper(*args, **kwargs):\n        if not DEPENDENCIES_AVAILABLE:\n            if st is not None:\n                st.error(\"\u274c Authentication system not available - dependencies missing\")\n      ...",
      "suggested_refactor": "Extract UI rendering to require_authentication_ui_layer() + Extract logging to require_authentication_audit_layer()"
    },
    {
      "function_name": "render_login_page",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 310,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_login_page(auth_manager: GoogleOAuthManager):\n    \"\"\"Render the Google OAuth login page.\"\"\"\n    st.title(\"\ud83d\udd10 TDD Framework - Authentication Required\")\n    st.markdown(\"Please sign in with your Google account to access the application.\")\n    \n    # Handle OAuth callback\n    query_params = s...",
      "suggested_refactor": "Extract database operations to render_login_page_data_layer() + Extract UI rendering to render_login_page_ui_layer() + Extract logging to render_login_page_audit_layer()"
    },
    {
      "function_name": "render_user_menu",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 388,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_user_menu(auth_manager: GoogleOAuthManager):\n    \"\"\"Render user menu with profile and logout options.\"\"\"\n    if not auth_manager.is_authenticated():\n        return\n    \n    user = auth_manager.get_current_user()\n    if not user:\n        return\n    \n    with st.sidebar:\n        st.markdown...",
      "suggested_refactor": "Extract UI rendering to render_user_menu_ui_layer()"
    },
    {
      "function_name": "get_authenticated_user",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 423,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_authenticated_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Get the currently authenticated user (utility function).\"\"\"\n    if not DEPENDENCIES_AVAILABLE:\n        return None\n    \n    try:\n        auth_manager = GoogleOAuthManager()\n        return auth_manager.get_current_user()\n    except:\n   ...",
      "suggested_refactor": ""
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 36,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self):\n        \"\"\"Initialize OAuth manager with configuration from Streamlit secrets.\"\"\"\n        if not DEPENDENCIES_AVAILABLE:\n            raise ImportError(\"Required authentication dependencies not installed\")\n        \n        self.client_id = st.secrets[\"google\"][\"client_id\"]\n   ...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "create_flow",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 55,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def create_flow(self) -> Flow:\n        \"\"\"Create and configure Google OAuth flow.\"\"\"\n        client_config = {\n            \"web\": {\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"auth_uri\": \"https://accounts.google.com/o/oauth2/...",
      "suggested_refactor": ""
    },
    {
      "function_name": "handle_callback",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 94,
      "responsibilities": [
        "auth",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def handle_callback(self, authorization_code: str, state: str) -> Dict[str, Any]:\n        \"\"\"Handle OAuth callback and exchange code for tokens.\"\"\"\n        # Verify CSRF state\n        if state != st.session_state.get('oauth_state'):\n            raise ValueError(\"Invalid OAuth state - possible CS...",
      "suggested_refactor": "Extract UI rendering to handle_callback_ui_layer() + Extract logging to handle_callback_audit_layer()"
    },
    {
      "function_name": "get_user_info",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 139,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_user_info(self, credentials: Credentials) -> Dict[str, Any]:\n        \"\"\"Retrieve user information using Google People API.\"\"\"\n        try:\n            # Build People API service\n            service = build('people', 'v1', credentials=credentials)\n            \n            # Get user profi...",
      "suggested_refactor": "Extract UI rendering to get_user_info_ui_layer() + Extract logging to get_user_info_audit_layer()"
    },
    {
      "function_name": "is_authenticated",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 194,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def is_authenticated(self) -> bool:\n        \"\"\"Check if user is currently authenticated with valid session.\"\"\"\n        if not st.session_state.get('authenticated', False):\n            return False\n        \n        session = st.session_state.get('user_session')\n        if not session:\n           ...",
      "suggested_refactor": "Extract UI rendering to is_authenticated_ui_layer() + Extract logging to is_authenticated_audit_layer()"
    },
    {
      "function_name": "get_current_user",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 215,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_current_user(self) -> Optional[Dict[str, Any]]:\n        \"\"\"Get current authenticated user information.\"\"\"\n        if not self.is_authenticated():\n            return None\n        \n        session = st.session_state.get('user_session')\n        return session.get('user_info') if session els...",
      "suggested_refactor": "Extract UI rendering to get_current_user_ui_layer() + Extract logging to get_current_user_audit_layer()"
    },
    {
      "function_name": "logout",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 223,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def logout(self):\n        \"\"\"Clear authentication session and logout user.\"\"\"\n        # Clear session state\n        keys_to_remove = ['authenticated', 'user_session', 'oauth_state']\n        for key in keys_to_remove:\n            if key in st.session_state:\n                del st.session_state[ke...",
      "suggested_refactor": "Extract UI rendering to logout_ui_layer()"
    },
    {
      "function_name": "refresh_credentials",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 233,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def refresh_credentials(self) -> bool:\n        \"\"\"Refresh expired credentials using refresh token.\"\"\"\n        session = st.session_state.get('user_session')\n        if not session or 'credentials' not in session:\n            return False\n        \n        try:\n            cred_data = session['cre...",
      "suggested_refactor": "Extract UI rendering to refresh_credentials_ui_layer() + Extract logging to refresh_credentials_audit_layer()"
    },
    {
      "function_name": "wrapper",
      "file_path": "streamlit_extension/utils/auth.py",
      "line_number": 275,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def wrapper(*args, **kwargs):\n        if not DEPENDENCIES_AVAILABLE:\n            if st is not None:\n                st.error(\"\u274c Authentication system not available - dependencies missing\")\n                st.stop()\n            else:\n                print(\"\u274c Authentication system not available - ...",
      "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
    },
    {
      "function_name": "summary",
      "file_path": "streamlit_extension/utils/metrics_collector.py",
      "line_number": 79,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def summary(self) -> Dict[str, Dict[str, float]]:\n        \"\"\"Return a summary of all collected metrics.\"\"\"\n\n        rt_stats: Dict[str, float] = {}\n        if self.response_times:\n            rts = self.response_times\n            rt_stats = {\n                \"min\": min(rts),\n                \"max...",
      "suggested_refactor": "Extract UI rendering to summary_ui_layer() + Extract logging to summary_audit_layer()"
    },
    {
      "function_name": "validate_required_fields",
      "file_path": "streamlit_extension/utils/form_validation.py",
      "line_number": 31,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def validate_required_fields(data: Dict[str, Any], required_fields: Iterable[str]) -> List[str]:\n    \"\"\"Valida se campos obrigat\u00f3rios existem e n\u00e3o s\u00e3o vazios/whitespace.\"\"\"\n    errors: List[str] = []\n    for field in required_fields:\n        value = data.get(field)\n        if value is None:\n       ...",
      "suggested_refactor": "Extract UI rendering to validate_required_fields_ui_layer() + Extract logging to validate_required_fields_audit_layer()"
    },
    {
      "function_name": "validate_text_length",
      "file_path": "streamlit_extension/utils/form_validation.py",
      "line_number": 57,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def validate_text_length(text: str, min_len: int, max_len: int, field_name: str) -> List[str]:\n    \"\"\"Validate text length constraints.\"\"\"\n    errors: List[str] = []\n    text = text or \"\"\n    if len(text) < min_len:\n        errors.append(f\"{field_name} must be at least {min_len} characters\")\n    if ...",
      "suggested_refactor": "Extract UI rendering to validate_text_length_ui_layer() + Extract logging to validate_text_length_audit_layer()"
    },
    {
      "function_name": "validate_business_rules_client",
      "file_path": "streamlit_extension/utils/form_validation.py",
      "line_number": 68,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_business_rules_client(data: Dict[str, Any]) -> List[str]:\n    \"\"\"Validate business rules specific to client entities.\"\"\"\n    errors: List[str] = []\n    errors.extend(validate_text_length(data.get(\"client_key\", \"\"), 2, 50, \"client_key\"))\n    errors.extend(validate_text_length(data.get(\"n...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_client_ui_layer() + Extract logging to validate_business_rules_client_audit_layer() + Extract validation to validate_business_rules_client_validator()"
    },
    {
      "function_name": "validate_business_rules_project",
      "file_path": "streamlit_extension/utils/form_validation.py",
      "line_number": 76,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_business_rules_project(data: Dict[str, Any]) -> List[str]:\n    \"\"\"Validate business rules specific to project entities.\"\"\"\n    errors: List[str] = []\n    errors.extend(validate_text_length(data.get(\"project_key\", \"\"), 2, 50, \"project_key\"))\n    errors.extend(validate_text_length(data.ge...",
      "suggested_refactor": "Extract UI rendering to validate_business_rules_project_ui_layer() + Extract logging to validate_business_rules_project_audit_layer() + Extract validation to validate_business_rules_project_validator()"
    },
    {
      "function_name": "sanitize_form_inputs",
      "file_path": "streamlit_extension/utils/form_validation.py",
      "line_number": 84,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def sanitize_form_inputs(data: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Sanitiza todas as entradas string; preserva None e tipos primitivos.\n\n    Observa\u00e7\u00e3o: `validate_form` (se existir) roda ap\u00f3s sanitiza\u00e7\u00e3o.\n    \"\"\"\n    sanitized: Dict[str, Any] = {}\n    for key, value in data.items():\n        if...",
      "suggested_refactor": "Extract UI rendering to sanitize_form_inputs_ui_layer() + Extract validation to sanitize_form_inputs_validator()"
    },
    {
      "function_name": "handle_exceptions",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 187,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def handle_exceptions(func: Callable = None, *, context: Dict[str, Any] = None, show_in_ui: bool = True):\n    \"\"\"\n    Decorator to handle exceptions globally\n    \n    Args:\n        func: Function to wrap\n        context: Additional context for logging\n        show_in_ui: Whether to show error in Str...",
      "suggested_refactor": "Extract UI rendering to handle_exceptions_ui_layer() + Extract logging to handle_exceptions_audit_layer()"
    },
    {
      "function_name": "categorize_exception",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 101,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def categorize_exception(self, exception: Exception) -> str:\n        \"\"\"Categorize exception type\"\"\"\n        \n        exception_name = type(exception).__name__.lower()\n        exception_message = str(exception).lower()\n        \n        # Database related\n        if any(keyword in exception_name ...",
      "suggested_refactor": "Extract UI rendering to categorize_exception_ui_layer() + Extract logging to categorize_exception_audit_layer()"
    },
    {
      "function_name": "generate_error_id",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 132,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def generate_error_id(self, exception: Exception) -> str:\n        \"\"\"Generate unique error ID for tracking\"\"\"\n        error_content = f\"{type(exception).__name__}:{str(exception)[:100]}\"\n        return hashlib.md5(error_content.encode()).hexdigest()[:8]\n    ",
      "suggested_refactor": "Extract UI rendering to generate_error_id_ui_layer() + Extract logging to generate_error_id_audit_layer()"
    },
    {
      "function_name": "log_exception",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 137,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def log_exception(self, exception: Exception, context: Dict[str, Any] = None):\n        \"\"\"Log exception with context\"\"\"\n        error_id = self.generate_error_id(exception)\n        category = self.categorize_exception(exception)\n        \n        log_data = {\n            \"error_id\": error_id,\n   ...",
      "suggested_refactor": "Extract UI rendering to log_exception_ui_layer() + Extract logging to log_exception_audit_layer()"
    },
    {
      "function_name": "show_user_error",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 160,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def show_user_error(self, category: str, error_id: str, context: Dict[str, Any] = None):\n        \"\"\"Show user-friendly error message\"\"\"\n        \n        if not STREAMLIT_AVAILABLE or not st:\n            return\n            \n        message_config = UserFriendlyMessages.MESSAGES.get(\n            c...",
      "suggested_refactor": "Extract UI rendering to show_user_error_ui_layer() + Extract logging to show_user_error_audit_layer()"
    },
    {
      "function_name": "decorator",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 197,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def decorator(f: Callable) -> Callable:\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            try:\n                return f(*args, **kwargs)\n            except Exception as e:\n                handler = GlobalExceptionHandler()\n                \n                # Prepare context\n    ...",
      "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
    },
    {
      "function_name": "wrapper",
      "file_path": "streamlit_extension/utils/global_exception_handler.py",
      "line_number": 199,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def wrapper(*args, **kwargs):\n            try:\n                return f(*args, **kwargs)\n            except Exception as e:\n                handler = GlobalExceptionHandler()\n                \n                # Prepare context\n                error_context = {\n                    \"function_na...",
      "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
    },
    {
      "function_name": "cache_database_query",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 745,
      "responsibilities": [
        "network",
        "database",
        "validation"
      ],
      "severity": "HIGH",
      "code_snippet": "def cache_database_query(query_name: str, ttl: int = 600):\n    \"\"\"\n    Special decorator for database queries with intelligent invalidation.\n    \"\"\"\n    def decorator(func: Callable) -> Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache = get_cache()\n            \n...",
      "suggested_refactor": "Extract database operations to cache_database_query_data_layer() + Extract validation to cache_database_query_validator()"
    },
    {
      "function_name": "get_session_cache",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 800,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_session_cache() -> Dict[str, Any]:\n    \"\"\"Get session-specific cache storage.\"\"\"\n    if STREAMLIT_AVAILABLE and hasattr(st, 'session_state'):\n        if '_streamlit_cache' not in st.session_state:\n            st.session_state._streamlit_cache = {}\n        return st.session_state._streamlit_c...",
      "suggested_refactor": "Extract UI rendering to get_session_cache_ui_layer()"
    },
    {
      "function_name": "get_cache_statistics",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 852,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_cache_statistics() -> Dict[str, Any]:\n    \"\"\"Get comprehensive cache statistics.\"\"\"\n    cache = get_cache()\n    stats = cache.get_stats()\n    \n    # Add session cache stats if available\n    session_cache = get_session_cache()\n    stats['session_cache_entries'] = len(session_cache)\n    \n    r...",
      "suggested_refactor": ""
    },
    {
      "function_name": "clear_all_caches",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 865,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def clear_all_caches():\n    \"\"\"Clear all caches (memory, disk, session).\"\"\"\n    # Clear global cache\n    cache = get_cache()\n    cache.clear()\n    \n    # Clear session cache\n    session_cache = get_session_cache()\n    session_cache.clear()\n    \n    # Clear Streamlit cache if available\n    if STREAML...",
      "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer()"
    },
    {
      "function_name": "cleanup_expired_cache",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 886,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def cleanup_expired_cache():\n    \"\"\"Remove expired entries from all caches.\"\"\"\n    cache = get_cache()\n\n    with cache._lock:\n        expired_keys = [\n            key\n            for key, entry in cache._memory_cache.items()\n            if entry.is_expired() or entry.expires_at <= entry.created_at\n ...",
      "suggested_refactor": ""
    },
    {
      "function_name": "_generate_key",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 133,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_key(self, key: Union[str, tuple, dict]) -> str:\n        \"\"\"Generate a consistent cache key from various input types.\"\"\"\n        # SECURITY FIX: Always hash keys to prevent path traversal attacks\n        # Never return raw strings that could contain ../../../ or other path traversal...",
      "suggested_refactor": "Extract UI rendering to _generate_key_ui_layer() + Extract logging to _generate_key_audit_layer()"
    },
    {
      "function_name": "_get_from_disk",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 410,
      "responsibilities": [
        "logging",
        "validation",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_from_disk(self, cache_key: str) -> Optional[Any]:\n        \"\"\"Get value from disk cache.\"\"\"\n        if not self.cache_dir:\n            return None\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(cache_...",
      "suggested_refactor": "Extract UI rendering to _get_from_disk_ui_layer() + Extract logging to _get_from_disk_audit_layer() + Extract validation to _get_from_disk_validator()"
    },
    {
      "function_name": "_set_to_disk",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 463,
      "responsibilities": [
        "logging",
        "validation",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _set_to_disk(self, cache_key: str, value: Any, ttl: int) -> None:\n        \"\"\"Set value to disk cache.\"\"\"\n        if not self.cache_dir:\n            return\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(ca...",
      "suggested_refactor": "Extract UI rendering to _set_to_disk_ui_layer() + Extract logging to _set_to_disk_audit_layer() + Extract validation to _set_to_disk_validator()"
    },
    {
      "function_name": "_delete_from_disk",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 513,
      "responsibilities": [
        "logging",
        "database",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _delete_from_disk(self, cache_key: str) -> bool:\n        \"\"\"Delete value from disk cache.\"\"\"\n        if not self.cache_dir:\n            return False\n        \n        # SECURITY VALIDATION: Ensure cache_key is safe for filesystem\n        if not self._validate_cache_key_for_filesystem(cache_ke...",
      "suggested_refactor": "Extract database operations to _delete_from_disk_data_layer() + Extract UI rendering to _delete_from_disk_ui_layer() + Extract logging to _delete_from_disk_audit_layer() + Extract validation to _delete_from_disk_validator()"
    },
    {
      "function_name": "_get_disk_cache_size",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 549,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _get_disk_cache_size(self) -> int:\n        \"\"\"Get total size of disk cache in bytes.\"\"\"\n        if not self.cache_dir or not self.cache_dir.exists():\n            return 0\n        \n        total_size = 0\n        try:\n            for cache_file in self.cache_dir.glob(\"*.cache\"):\n              ...",
      "suggested_refactor": "Extract UI rendering to _get_disk_cache_size_ui_layer() + Extract logging to _get_disk_cache_size_audit_layer()"
    },
    {
      "function_name": "_get_disk_cache_files_by_age",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 568,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _get_disk_cache_files_by_age(self) -> list:\n        \"\"\"Get disk cache files sorted by last access time (oldest first).\"\"\"\n        if not self.cache_dir or not self.cache_dir.exists():\n            return []\n        \n        files = []\n        try:\n            for cache_file in self.cache_dir....",
      "suggested_refactor": "Extract UI rendering to _get_disk_cache_files_by_age_ui_layer() + Extract logging to _get_disk_cache_files_by_age_audit_layer()"
    },
    {
      "function_name": "_cleanup_disk_cache",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 588,
      "responsibilities": [
        "network",
        "file_io"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _cleanup_disk_cache(self) -> None:\n        \"\"\"Clean up disk cache if it exceeds size limit.\"\"\"\n        if not self.enable_disk_cache or not self.cache_dir:\n            return\n        \n        current_size = self._get_disk_cache_size()\n        \n        if current_size <= self.max_disk_cache_b...",
      "suggested_refactor": ""
    },
    {
      "function_name": "cleanup_orphaned_cache_files",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 614,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def cleanup_orphaned_cache_files(self) -> int:\n        \"\"\"\n        Remove orphaned cache files that don't have corresponding memory entries.\n        \n        Returns:\n            int: Number of orphaned files removed\n        \"\"\"\n        if not self.enable_disk_cache or not self.cache_dir:\n      ...",
      "suggested_refactor": "Extract UI rendering to cleanup_orphaned_cache_files_ui_layer() + Extract logging to cleanup_orphaned_cache_files_audit_layer()"
    },
    {
      "function_name": "decorator",
      "file_path": "streamlit_extension/utils/cache.py",
      "line_number": 749,
      "responsibilities": [
        "network",
        "database",
        "validation"
      ],
      "severity": "HIGH",
      "code_snippet": "    def decorator(func: Callable) -> Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            cache = get_cache()\n            \n            # Create cache key with query name and parameters\n            cache_key = f\"db_query:{query_name}:{cache._generate_key((args, kwargs))}\"\n...",
      "suggested_refactor": "Extract database operations to decorator_data_layer() + Extract validation to decorator_validator()"
    },
    {
      "function_name": "validate_config",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 35,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def validate_config(config: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate configuration dictionary.\n    \n    Args:\n        config: Configuration dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Validate required...",
      "suggested_refactor": "Extract UI rendering to validate_config_ui_layer() + Extract logging to validate_config_audit_layer() + Extract validation to validate_config_validator()"
    },
    {
      "function_name": "validate_streamlit_config",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 134,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def validate_streamlit_config(config: 'StreamlitConfig') -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate StreamlitConfig object.\n    \n    Args:\n        config: StreamlitConfig instance\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    if not StreamlitConfig:\n        return Fa...",
      "suggested_refactor": "Extract UI rendering to validate_streamlit_config_ui_layer() + Extract validation to validate_streamlit_config_validator()"
    },
    {
      "function_name": "validate_database_paths",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 150,
      "responsibilities": [
        "logging",
        "validation",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def validate_database_paths(config: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate database file paths exist and are accessible.\n    \n    Args:\n        config: Configuration dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    warnings...",
      "suggested_refactor": "Extract UI rendering to validate_database_paths_ui_layer() + Extract logging to validate_database_paths_audit_layer() + Extract validation to validate_database_paths_validator()"
    },
    {
      "function_name": "validate_github_token",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 192,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def validate_github_token(token: str) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate GitHub token format.\n    \n    Args:\n        token: GitHub personal access token\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    if not token:\n        errors.append(\"Gi...",
      "suggested_refactor": "Extract UI rendering to validate_github_token_ui_layer() + Extract logging to validate_github_token_audit_layer() + Extract validation to validate_github_token_validator()"
    },
    {
      "function_name": "validate_task_data",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 223,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_task_data(task: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate task data structure.\n    \n    Args:\n        task: Task dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Required fields\n    required_fields = [\"titl...",
      "suggested_refactor": "Extract UI rendering to validate_task_data_ui_layer() + Extract logging to validate_task_data_audit_layer() + Extract validation to validate_task_data_validator()"
    },
    {
      "function_name": "validate_epic_data",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 283,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_epic_data(epic: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate epic data structure.\n    \n    Args:\n        epic: Epic dictionary\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # Required fields\n    required_fields = [\"name...",
      "suggested_refactor": "Extract UI rendering to validate_epic_data_ui_layer() + Extract logging to validate_epic_data_audit_layer() + Extract validation to validate_epic_data_validator()"
    },
    {
      "function_name": "validate_json_structure",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 356,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_json_structure(data: Dict[str, Any], schema: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    Validate JSON data against a simple schema.\n    \n    Args:\n        data: Data to validate\n        schema: Schema definition\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n ...",
      "suggested_refactor": "Extract UI rendering to validate_json_structure_ui_layer() + Extract logging to validate_json_structure_audit_layer() + Extract validation to validate_json_structure_validator()"
    },
    {
      "function_name": "generate_validation_report",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 413,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def generate_validation_report(validations: List[Tuple[str, bool, List[str]]]) -> Dict[str, Any]:\n    \"\"\"\n    Generate a comprehensive validation report.\n    \n    Args:\n        validations: List of (name, is_valid, errors) tuples\n    \n    Returns:\n        Validation report dictionary\n    \"\"\"\n    tot...",
      "suggested_refactor": "Extract UI rendering to generate_validation_report_ui_layer() + Extract logging to generate_validation_report_audit_layer() + Extract validation to generate_validation_report_validator()"
    },
    {
      "function_name": "validate_client_data",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 445,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def validate_client_data(client: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    \ud83c\udfe2 Validate client data structure and business rules.\n    \n    Args:\n        client: Client dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n    # R...",
      "suggested_refactor": "Extract UI rendering to validate_client_data_ui_layer() + Extract logging to validate_client_data_audit_layer() + Extract validation to validate_client_data_validator()"
    },
    {
      "function_name": "validate_project_data",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 532,
      "responsibilities": [
        "logging",
        "network",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def validate_project_data(project: Dict[str, Any]) -> Tuple[bool, List[str]]:\n    \"\"\"\n    \ud83d\udcc1 Validate project data structure and business rules.\n    \n    Args:\n        project: Project dictionary to validate\n    \n    Returns:\n        Tuple of (is_valid, error_messages)\n    \"\"\"\n    errors = []\n    \n  ...",
      "suggested_refactor": "Extract UI rendering to validate_project_data_ui_layer() + Extract logging to validate_project_data_audit_layer() + Extract validation to validate_project_data_validator()"
    },
    {
      "function_name": "validate_field",
      "file_path": "streamlit_extension/utils/validators.py",
      "line_number": 369,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def validate_field(field_name: str, field_value: Any, field_schema: Any, path: str = \"\"):\n        current_path = f\"{path}.{field_name}\" if path else field_name\n        \n        if isinstance(field_schema, dict):\n            if \"type\" in field_schema:\n                expected_type = field_schema[...",
      "suggested_refactor": "Extract UI rendering to validate_field_ui_layer() + Extract logging to validate_field_audit_layer()"
    },
    {
      "function_name": "create_performance_test_suite",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 517,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def create_performance_test_suite(db_manager) -> Dict[str, Any]:\n    \"\"\"Create comprehensive performance test suite.\"\"\"\n    \n    # Initialize components\n    db_tester = DatabasePerformanceTester(db_manager)\n    load_tester = LoadTester(db_manager)\n    monitor = PerformanceMonitor()\n    reporter = Pe...",
      "suggested_refactor": "Extract database operations to create_performance_test_suite_data_layer() + Extract UI rendering to create_performance_test_suite_ui_layer() + Extract logging to create_performance_test_suite_audit_layer()"
    },
    {
      "function_name": "run_quick_performance_check",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 558,
      "responsibilities": [
        "network",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def run_quick_performance_check(db_manager) -> Dict[str, Any]:\n    \"\"\"Run quick performance check for monitoring.\"\"\"\n    profiler = PerformanceProfiler()\n    \n    # Test basic operations\n    with profiler.profile_operation(\"get_clients\"):\n        db_manager.get_clients(limit=10)\n    \n    with profil...",
      "suggested_refactor": "Extract database operations to run_quick_performance_check_data_layer() + Extract UI rendering to run_quick_performance_check_ui_layer()"
    },
    {
      "function_name": "profile_operation",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 73,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def profile_operation(self, operation_name: str):\n        \"\"\"Context manager for profiling individual operations.\"\"\"\n        # Start memory tracking\n        if not self.memory_tracker_active:\n            tracemalloc.start()\n            self.memory_tracker_active = True\n            \n        start...",
      "suggested_refactor": "Extract UI rendering to profile_operation_ui_layer() + Extract logging to profile_operation_audit_layer()"
    },
    {
      "function_name": "get_statistics",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 121,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_statistics(self, operation_name: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive statistics for operations.\"\"\"\n        filtered_metrics = self.metrics\n        if operation_name:\n            filtered_metrics = [m for m in self.metrics if m.operation_name == oper...",
      "suggested_refactor": "Extract UI rendering to get_statistics_ui_layer()"
    },
    {
      "function_name": "benchmark_crud_operations",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 182,
      "responsibilities": [
        "network",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def benchmark_crud_operations(self, iterations: int = 1000) -> Dict[str, Any]:\n        \"\"\"Benchmark CRUD operations performance.\"\"\"\n        results = {}\n        \n        # Test client operations\n        with self.profiler.profile_operation(\"client_create\"):\n            for i in range(iterations)...",
      "suggested_refactor": "Extract database operations to benchmark_crud_operations_data_layer() + Extract UI rendering to benchmark_crud_operations_ui_layer()"
    },
    {
      "function_name": "test_query_performance",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 205,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def test_query_performance(self) -> Dict[str, Any]:\n        \"\"\"Test complex query performance.\"\"\"\n        test_queries = {\n            \"simple_select\": \"SELECT * FROM framework_clients LIMIT 100\",\n            \"complex_join\": \"\"\"\n                SELECT c.name, COUNT(p.id) as project_count \n      ...",
      "suggested_refactor": "Extract database operations to test_query_performance_data_layer() + Extract UI rendering to test_query_performance_ui_layer()"
    },
    {
      "function_name": "run_load_test",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 244,
      "responsibilities": [
        "network",
        "logging",
        "file_io"
      ],
      "severity": "HIGH",
      "code_snippet": "    def run_load_test(self, config: LoadTestConfig, target_function: Callable) -> Dict[str, Any]:\n        \"\"\"Execute load test with specified configuration.\"\"\"\n        self.stop_event.clear()\n        \n        # Prepare test data\n        test_data = self._generate_test_data(config.test_data_size)\n   ...",
      "suggested_refactor": "Extract logging to run_load_test_audit_layer()"
    },
    {
      "function_name": "_worker_thread",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 279,
      "responsibilities": [
        "network",
        "logging",
        "file_io"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _worker_thread(self, target_function: Callable, test_data: List[Dict], \n                      duration: int, worker_id: str):\n        \"\"\"Individual worker thread for load testing.\"\"\"\n        start_time = time.time()\n        operation_count = 0\n        \n        while time.time() - start_time ...",
      "suggested_refactor": "Extract logging to _worker_thread_audit_layer()"
    },
    {
      "function_name": "_generate_load_test_report",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 316,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_load_test_report(self, config: LoadTestConfig, \n                                 start_time: float, end_time: float) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive load test report.\"\"\"\n        duration = end_time - start_time\n        stats = self.profiler.get_statistics()\n   ...",
      "suggested_refactor": "Extract UI rendering to _generate_load_test_report_ui_layer()"
    },
    {
      "function_name": "_identify_bottlenecks",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 338,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _identify_bottlenecks(self, stats: Dict[str, Any]) -> List[str]:\n        \"\"\"Identify performance bottlenecks from statistics.\"\"\"\n        bottlenecks = []\n        \n        response_time = stats.get(\"response_time\", {})\n        if response_time.get(\"p95\", 0) > 1000:  # > 1 second\n            b...",
      "suggested_refactor": "Extract UI rendering to _identify_bottlenecks_ui_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 430,
      "responsibilities": [
        "network",
        "file_io"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __init__(self, output_dir: str = \"performance_reports\"):\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(exist_ok=True)\n        ",
      "suggested_refactor": ""
    },
    {
      "function_name": "generate_performance_report",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 434,
      "responsibilities": [
        "network",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def generate_performance_report(self, test_results: Dict[str, Any], \n                                  test_name: str) -> str:\n        \"\"\"Generate comprehensive performance report.\"\"\"\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        report_file = self.output_dir / f\"...",
      "suggested_refactor": "Extract UI rendering to generate_performance_report_ui_layer()"
    },
    {
      "function_name": "_generate_summary",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 457,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Generate test summary.\"\"\"\n        summary = {\n            \"total_tests\": len(results),\n            \"overall_performance\": \"good\",  # Will be calculated\n            \"key_metrics\": {}\n        }\n        \n        # Ex...",
      "suggested_refactor": "Extract UI rendering to _generate_summary_ui_layer()"
    },
    {
      "function_name": "_generate_recommendations",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 476,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_recommendations(self, results: Dict[str, Any]) -> List[str]:\n        \"\"\"Generate performance improvement recommendations.\"\"\"\n        recommendations = []\n        \n        for test_name, test_data in results.items():\n            if isinstance(test_data, dict):\n                # Chec...",
      "suggested_refactor": "Extract UI rendering to _generate_recommendations_ui_layer()"
    },
    {
      "function_name": "_generate_markdown_report",
      "file_path": "streamlit_extension/utils/performance_tester.py",
      "line_number": 494,
      "responsibilities": [
        "network",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _generate_markdown_report(self, report_data: Dict[str, Any], output_file: Path):\n        \"\"\"Generate markdown version of the report.\"\"\"\n        with open(output_file, 'w') as f:\n            f.write(f\"# Performance Test Report: {report_data['test_name']}\\n\\n\")\n            f.write(f\"**Generate...",
      "suggested_refactor": "Extract UI rendering to _generate_markdown_report_ui_layer()"
    },
    {
      "function_name": "perform_graceful_shutdown",
      "file_path": "streamlit_extension/utils/shutdown_handler.py",
      "line_number": 66,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def perform_graceful_shutdown(self) -> None:\n        \"\"\"Execute complete graceful shutdown sequence.\"\"\"\n\n        if self.shutdown_performed:\n            return\n        self.shutdown_performed = True\n\n        # Run all registered cleanup functions\n        for key, func in list(self.cleanup_functi...",
      "suggested_refactor": "Extract UI rendering to perform_graceful_shutdown_ui_layer() + Extract logging to perform_graceful_shutdown_audit_layer()"
    },
    {
      "function_name": "_signal_handler",
      "file_path": "streamlit_extension/utils/shutdown_handler.py",
      "line_number": 85,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _signal_handler(self, signum, frame) -> None:  # pragma: no cover - called by signal\n        if self.logger:\n            self.logger.info(\"Received signal %s. Initiating graceful shutdown.\", signum)\n        self.perform_graceful_shutdown()\n",
      "suggested_refactor": "Extract UI rendering to _signal_handler_ui_layer() + Extract logging to _signal_handler_audit_layer()"
    },
    {
      "function_name": "install_signal_handlers",
      "file_path": "streamlit_extension/utils/shutdown_handler.py",
      "line_number": 90,
      "responsibilities": [
        "logging",
        "file_io"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def install_signal_handlers(self) -> None:\n        \"\"\"Install signal handlers for clean shutdown.\"\"\"\n\n        if self._installed:\n            return\n        if threading.current_thread() is not threading.main_thread():\n            if self.logger:\n                self.logger.warning(\"Signal handl...",
      "suggested_refactor": "Extract logging to install_signal_handlers_audit_layer()"
    },
    {
      "function_name": "can_recover",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 62,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, OperationalError)\n",
      "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer()"
    },
    {
      "function_name": "attempt_recovery",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 65,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        time.sleep(0.01)  # Simulate retry delay\n        return RecoveryResult(True, result=\"db_recovered\")\n",
      "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
    },
    {
      "function_name": "can_recover",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 76,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, AuthenticationError)\n",
      "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer()"
    },
    {
      "function_name": "attempt_recovery",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 79,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        if context.user_id:\n            return RecoveryResult(True, result=\"auth_recovered\")\n        return RecoveryResu...",
      "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
    },
    {
      "function_name": "can_recover",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 91,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def can_recover(self, error: Exception, context: UserContext) -> bool:\n        return isinstance(error, ValidationError)\n",
      "suggested_refactor": "Extract UI rendering to can_recover_ui_layer() + Extract logging to can_recover_audit_layer() + Extract validation to can_recover_validator()"
    },
    {
      "function_name": "attempt_recovery",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 94,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        if not self.can_recover(error, context):\n            return RecoveryResult(False)\n        return RecoveryResult(True, result=\"validated\")\n",
      "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
    },
    {
      "function_name": "attempt_recovery",
      "file_path": "streamlit_extension/utils/enhanced_recovery.py",
      "line_number": 112,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def attempt_recovery(self, error: Exception, context: UserContext) -> RecoveryResult:\n        for strategy in self.strategies:\n            if strategy.can_recover(error, context):\n                result = strategy.attempt_recovery(error, context)\n                if result.success:\n              ...",
      "suggested_refactor": "Extract UI rendering to attempt_recovery_ui_layer() + Extract logging to attempt_recovery_audit_layer()"
    },
    {
      "function_name": "safe_ui",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 45,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def safe_ui(fn: Callable[..., Any], *args, **kwargs) -> Any:\n    \"\"\"\n    Execute a UI operation safely, with error handling.\n    \n    Args:\n        fn: Function to execute\n        *args: Function arguments\n        **kwargs: Function keyword arguments\n        \n    Returns:\n        Function result or ...",
      "suggested_refactor": "Extract database operations to safe_ui_data_layer() + Extract UI rendering to safe_ui_ui_layer() + Extract logging to safe_ui_audit_layer()"
    },
    {
      "function_name": "safe_streamlit_write",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 67,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_streamlit_write(content: Any, container: Any = None) -> None:\n    \"\"\"\n    Safely write content to Streamlit.\n    \n    Args:\n        content: Content to write\n        container: Optional container to write to\n    \"\"\"\n    def _write():\n        if container:\n            container.write(content...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_write_ui_layer()"
    },
    {
      "function_name": "safe_streamlit_error",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 83,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_streamlit_error(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display error message in Streamlit.\n    \n    Args:\n        message: Error message to display\n        container: Optional container to write to\n    \"\"\"\n    def _error():\n        if container:\n            contain...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_error_ui_layer() + Extract logging to safe_streamlit_error_audit_layer()"
    },
    {
      "function_name": "safe_streamlit_info",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 99,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_streamlit_info(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display info message in Streamlit.\n    \n    Args:\n        message: Info message to display\n        container: Optional container to write to\n    \"\"\"\n    def _info():\n        if container:\n            container.i...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_info_ui_layer() + Extract logging to safe_streamlit_info_audit_layer()"
    },
    {
      "function_name": "safe_streamlit_warning",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 131,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_streamlit_warning(message: str, container: Any = None) -> None:\n    \"\"\"\n    Safely display warning message in Streamlit.\n    \n    Args:\n        message: Warning message to display\n        container: Optional container to write to\n    \"\"\"\n    def _warning():\n        if container:\n           ...",
      "suggested_refactor": "Extract UI rendering to safe_streamlit_warning_ui_layer() + Extract logging to safe_streamlit_warning_audit_layer()"
    },
    {
      "function_name": "create_columns",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 191,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_columns(ratios: List[float]) -> List[Any]:\n    \"\"\"\n    Create Streamlit columns with specified ratios.\n    \n    Args:\n        ratios: List of column width ratios\n        \n    Returns:\n        List of column objects or empty list if unavailable\n    \"\"\"\n    if not is_ui():\n        return []...",
      "suggested_refactor": "Extract UI rendering to create_columns_ui_layer() + Extract logging to create_columns_audit_layer()"
    },
    {
      "function_name": "create_tabs",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 210,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_tabs(tab_names: List[str]) -> List[Any]:\n    \"\"\"\n    Create Streamlit tabs with specified names.\n    \n    Args:\n        tab_names: List of tab names\n        \n    Returns:\n        List of tab objects or empty list if unavailable\n    \"\"\"\n    if not is_ui():\n        return []\n    \n    try:\n ...",
      "suggested_refactor": "Extract UI rendering to create_tabs_ui_layer() + Extract logging to create_tabs_audit_layer()"
    },
    {
      "function_name": "create_expander",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 229,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_expander(title: str, expanded: bool = False) -> Any:\n    \"\"\"\n    Create Streamlit expander safely.\n    \n    Args:\n        title: Expander title\n        expanded: Whether to start expanded\n        \n    Returns:\n        Expander object or None if unavailable\n    \"\"\"\n    if not is_ui():\n    ...",
      "suggested_refactor": "Extract UI rendering to create_expander_ui_layer() + Extract logging to create_expander_audit_layer()"
    },
    {
      "function_name": "_write",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 75,
      "responsibilities": [
        "file_io",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _write():\n        if container:\n            container.write(content)\n        else:\n            st.write(content)\n    ",
      "suggested_refactor": "Extract UI rendering to _write_ui_layer()"
    },
    {
      "function_name": "_error",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 91,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _error():\n        if container:\n            container.error(message)\n        else:\n            st.error(message)\n    ",
      "suggested_refactor": "Extract UI rendering to _error_ui_layer() + Extract logging to _error_audit_layer()"
    },
    {
      "function_name": "_info",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 107,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _info():\n        if container:\n            container.info(message)\n        else:\n            st.info(message)\n    ",
      "suggested_refactor": "Extract UI rendering to _info_ui_layer() + Extract logging to _info_audit_layer()"
    },
    {
      "function_name": "_warning",
      "file_path": "streamlit_extension/utils/ui_operations.py",
      "line_number": 139,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _warning():\n        if container:\n            container.warning(message)\n        else:\n            st.warning(message)\n    ",
      "suggested_refactor": "Extract UI rendering to _warning_ui_layer() + Extract logging to _warning_audit_layer()"
    },
    {
      "function_name": "initialize_session_state",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 99,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def initialize_session_state() -> None:\n    \"\"\"\n    Initialize all session state variables and application setup.\n    This function replaces the initialize_session_state from streamlit_app.py\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n\n    try:\n        # Exception handler setup\n        _...",
      "suggested_refactor": "Extract database operations to initialize_session_state_data_layer() + Extract UI rendering to initialize_session_state_ui_layer() + Extract logging to initialize_session_state_audit_layer()"
    },
    {
      "function_name": "_initialize_exception_handler",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 139,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _initialize_exception_handler() -> None:\n    \"\"\"Initialize global exception handler.\"\"\"\n    if EXCEPTION_HANDLER_AVAILABLE and not st.session_state.get(\"exception_handler_installed\"):\n        install_global_exception_handler()\n        st.session_state.exception_handler_installed = True\n",
      "suggested_refactor": "Extract UI rendering to _initialize_exception_handler_ui_layer()"
    },
    {
      "function_name": "_initialize_configuration",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 145,
      "responsibilities": [
        "auth",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _initialize_configuration() -> None:\n    \"\"\"Initialize application configuration.\"\"\"\n    if CONFIG_AVAILABLE and \"config\" not in st.session_state:\n        with streamlit_error_boundary(\"load_config\"):\n            st.session_state.config = load_config()\n",
      "suggested_refactor": "Extract UI rendering to _initialize_configuration_ui_layer()"
    },
    {
      "function_name": "_initialize_services",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 151,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _initialize_services() -> None:\n    \"\"\"Initialize services and database.\"\"\"\n    if SETUP_AVAILABLE and not st.session_state.get(\"services_ready\"):\n        with streamlit_error_boundary(\"setup_application\"):\n            setup_application()\n            st.session_state.services_ready = True\n",
      "suggested_refactor": "Extract UI rendering to _initialize_services_ui_layer()"
    },
    {
      "function_name": "_initialize_timer",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 158,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _initialize_timer() -> None:\n    \"\"\"Initialize timer component.\"\"\"\n    if \"timer\" not in st.session_state:\n        st.session_state.timer = TimerComponent()\n",
      "suggested_refactor": "Extract UI rendering to _initialize_timer_ui_layer()"
    },
    {
      "function_name": "_initialize_user_preferences",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 163,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _initialize_user_preferences() -> None:\n    \"\"\"Initialize user preferences and debug settings.\"\"\"\n    if \"show_debug_info\" not in st.session_state:\n        cfg = st.session_state.get(\"config\", None)\n        st.session_state.show_debug_info = bool(getattr(cfg, \"debug_mode\", False))\n",
      "suggested_refactor": "Extract UI rendering to _initialize_user_preferences_ui_layer() + Extract logging to _initialize_user_preferences_audit_layer()"
    },
    {
      "function_name": "_initialize_epic_selection",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 173,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _initialize_epic_selection() -> None:\n    \"\"\"Initialize epic selection with default values.\"\"\"\n    epics = fetch_epics() if DATA_PROVIDERS_AVAILABLE else []\n    default_epic_id = None\n    \n    if epics and len(epics) > 0 and isinstance(epics[0], dict):\n        default_epic_id = epics[0].get(\"id\"...",
      "suggested_refactor": "Extract database operations to _initialize_epic_selection_data_layer()"
    },
    {
      "function_name": "_initialize_health_status",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 183,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _initialize_health_status() -> None:\n    \"\"\"Initialize health status monitoring.\"\"\"\n    if DATA_PROVIDERS_AVAILABLE:\n        st.session_state[\"health\"] = fetch_health()\n    else:\n        st.session_state[\"health\"] = {\"status\": \"unknown\", \"healthy\": False}\n",
      "suggested_refactor": "Extract UI rendering to _initialize_health_status_ui_layer()"
    },
    {
      "function_name": "get_session_value",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 192,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_session_value(key: str, default: Any = None) -> Any:\n    \"\"\"\n    Get a value from session state safely.\n    \n    Args:\n        key: Session state key\n        default: Default value if key doesn't exist\n        \n    Returns:\n        Value from session state or default\n    \"\"\"\n    if not STREA...",
      "suggested_refactor": "Extract UI rendering to get_session_value_ui_layer()"
    },
    {
      "function_name": "set_session_value",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 208,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def set_session_value(key: str, value: Any) -> None:\n    \"\"\"\n    Set a value in session state safely.\n    \n    Args:\n        key: Session state key\n        value: Value to set\n    \"\"\"\n    if STREAMLIT_AVAILABLE:\n        st.session_state[key] = value\n",
      "suggested_refactor": "Extract UI rendering to set_session_value_ui_layer()"
    },
    {
      "function_name": "clear_session_value",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 219,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def clear_session_value(key: str) -> None:\n    \"\"\"\n    Clear a specific session state value.\n    \n    Args:\n        key: Session state key to clear\n    \"\"\"\n    if STREAMLIT_AVAILABLE and key in st.session_state:\n        del st.session_state[key]\n",
      "suggested_refactor": "Extract UI rendering to clear_session_value_ui_layer()"
    },
    {
      "function_name": "clear_all_session_state",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 229,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def clear_all_session_state() -> None:\n    \"\"\"Clear all session state (use with caution).\"\"\"\n    if STREAMLIT_AVAILABLE:\n        st.session_state.clear()\n",
      "suggested_refactor": "Extract UI rendering to clear_all_session_state_ui_layer()"
    },
    {
      "function_name": "session_has_key",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 234,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def session_has_key(key: str) -> bool:\n    \"\"\"\n    Check if session state has a specific key.\n    \n    Args:\n        key: Key to check\n        \n    Returns:\n        True if key exists, False otherwise\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return False\n    \n    return key in st.session_stat...",
      "suggested_refactor": "Extract UI rendering to session_has_key_ui_layer()"
    },
    {
      "function_name": "is_debug_mode",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 255,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def is_debug_mode() -> bool:\n    \"\"\"Check if debug mode is enabled.\"\"\"\n    config = get_config()\n    if config:\n        return bool(getattr(config, \"debug_mode\", False))\n    return get_session_value(\"show_debug_info\", False)\n",
      "suggested_refactor": "Extract UI rendering to is_debug_mode_ui_layer() + Extract logging to is_debug_mode_audit_layer()"
    },
    {
      "function_name": "toggle_debug_mode",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 269,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def toggle_debug_mode() -> None:\n    \"\"\"Toggle debug mode on/off.\"\"\"\n    current = is_debug_mode()\n    set_session_value(\"show_debug_info\", not current)\n",
      "suggested_refactor": "Extract UI rendering to toggle_debug_mode_ui_layer() + Extract logging to toggle_debug_mode_audit_layer()"
    },
    {
      "function_name": "get_current_user",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 276,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_current_user() -> Optional[Dict[str, Any]]:\n    \"\"\"Get current user from session state.\"\"\"\n    return get_session_value(\"current_user\")\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_selected_epic_id",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 303,
      "responsibilities": [
        "network",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_selected_epic_id() -> Any:\n    \"\"\"Get currently selected epic ID.\"\"\"\n    return get_session_value(\"selected_epic_id\")\n",
      "suggested_refactor": "Extract database operations to get_selected_epic_id_data_layer()"
    },
    {
      "function_name": "get_timer_component",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 311,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_timer_component() -> Any:\n    \"\"\"Get timer component from session state.\"\"\"\n    return get_session_value(\"timer\")\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "update_health_status",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 319,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def update_health_status(health: Dict[str, Any]) -> None:\n    \"\"\"Update health status in session state.\"\"\"\n    set_session_value(\"health\", health)\n",
      "suggested_refactor": "Extract database operations to update_health_status_data_layer()"
    },
    {
      "function_name": "initialize_page_state",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 323,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def initialize_page_state() -> None:\n    \"\"\"Initialize page-related session state - CANONICAL IMPLEMENTATION.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    # Set default page if not exists\n    if not get_session_value(\"current_page\"):\n        set_session_value(\"current_page\", \"Dashboard...",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_session_state_summary",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 338,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_session_state_summary() -> Dict[str, Any]:\n    \"\"\"Get a summary of current session state.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"status\": \"streamlit_unavailable\"}\n    \n    return {\n        \"keys\": list(st.session_state.keys()),\n        \"key_count\": len(st.session_state.keys()),\n...",
      "suggested_refactor": "Extract UI rendering to get_session_state_summary_ui_layer() + Extract logging to get_session_state_summary_audit_layer()"
    },
    {
      "function_name": "validate_session_state",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 354,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def validate_session_state() -> Dict[str, Any]:\n    \"\"\"Validate session state integrity.\"\"\"\n    issues = []\n    \n    # Check required keys\n    required_keys = [\"config\", \"timer\", \"current_page\"]\n    for key in required_keys:\n        if not session_has_key(key):\n            issues.append(f\"Missing re...",
      "suggested_refactor": ""
    },
    {
      "function_name": "check_session_manager_health",
      "file_path": "streamlit_extension/utils/session_manager.py",
      "line_number": 382,
      "responsibilities": [
        "auth",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_session_manager_health() -> Dict[str, Any]:\n    \"\"\"Check health of session manager dependencies.\"\"\"\n    return {\n        \"streamlit_available\": STREAMLIT_AVAILABLE,\n        \"config_available\": CONFIG_AVAILABLE,\n        \"setup_available\": SETUP_AVAILABLE,\n        \"exception_handler_availabl...",
      "suggested_refactor": "Extract UI rendering to check_session_manager_health_ui_layer() + Extract validation to check_session_manager_health_validator()"
    },
    {
      "function_name": "topological_sort_simple",
      "file_path": "streamlit_extension/utils/graph_algorithms.py",
      "line_number": 48,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def topological_sort_simple(adjacency: Dict[str, Set[str]]) -> List[str]:\n        \"\"\"\n        Ordena\u00e7\u00e3o topol\u00f3gica simples usando Kahn's algorithm\n        Sem prioriza\u00e7\u00e3o - usado para pr\u00e9-computa\u00e7\u00f5es\n        \n        Args:\n            adjacency: {node: {neighbors}} - grafo dirigido\n            \n...",
      "suggested_refactor": "Extract UI rendering to topological_sort_simple_ui_layer() + Extract logging to topological_sort_simple_audit_layer() + Extract validation to topological_sort_simple_validator() + Extract business logic to topological_sort_simple_processor()"
    },
    {
      "function_name": "detect_cycles_dfs",
      "file_path": "streamlit_extension/utils/graph_algorithms.py",
      "line_number": 169,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def detect_cycles_dfs(adjacency: Dict[str, Set[str]]) -> Tuple[bool, Optional[List[str]]]:\n        \"\"\"\n        Detecta ciclos usando DFS colorido\n        OTIMIZA\u00c7\u00c3O: Vers\u00e3o iterativa para evitar stack overflow em grafos grandes\n        \n        Args:\n            adjacency: Grafo dirigido\n       ...",
      "suggested_refactor": "Extract UI rendering to detect_cycles_dfs_ui_layer() + Extract logging to detect_cycles_dfs_audit_layer()"
    },
    {
      "function_name": "validate_dag",
      "file_path": "streamlit_extension/utils/graph_algorithms.py",
      "line_number": 302,
      "responsibilities": [
        "business_logic",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def validate_dag(adjacency: Dict[str, Set[str]]) -> Tuple[bool, Optional[str]]:\n        \"\"\"\n        Valida se o grafo \u00e9 um DAG (Directed Acyclic Graph)\n        \n        Args:\n            adjacency: Grafo dirigido\n            \n        Returns:\n            (is_dag, error_message)\n        \"\"\"\n     ...",
      "suggested_refactor": "Extract UI rendering to validate_dag_ui_layer() + Extract logging to validate_dag_audit_layer() + Extract validation to validate_dag_validator() + Extract business logic to validate_dag_processor()"
    },
    {
      "function_name": "calculate_graph_metrics",
      "file_path": "streamlit_extension/utils/graph_algorithms.py",
      "line_number": 438,
      "responsibilities": [
        "business_logic",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def calculate_graph_metrics(adjacency: Dict[str, Set[str]]) -> Dict[str, Any]:\n        \"\"\"\n        Calcula m\u00e9tricas b\u00e1sicas do grafo\n        MELHORIA: Adicionada valida\u00e7\u00e3o de arestas \u00f3rf\u00e3s\n        \n        Args:\n            adjacency: Grafo dirigido\n            \n        Returns:\n            Dici...",
      "suggested_refactor": "Extract UI rendering to calculate_graph_metrics_ui_layer() + Extract logging to calculate_graph_metrics_audit_layer() + Extract business logic to calculate_graph_metrics_processor()"
    },
    {
      "function_name": "clear_all_caches",
      "file_path": "streamlit_extension/utils/cache_utils.py",
      "line_number": 68,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def clear_all_caches() -> None:\n    \"\"\"Clear all Streamlit caches.\"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        if hasattr(st, \"cache_data\"):\n            st.cache_data.clear()\n        if hasattr(st, \"cache_resource\"):\n            st.cache_resource.clear()\n        \n        logger.info(...",
      "suggested_refactor": "Extract UI rendering to clear_all_caches_ui_layer() + Extract logging to clear_all_caches_audit_layer()"
    },
    {
      "function_name": "clear_cache_by_function",
      "file_path": "streamlit_extension/utils/cache_utils.py",
      "line_number": 88,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def clear_cache_by_function(func: Callable) -> None:\n    \"\"\"\n    Clear cache for a specific function.\n    \n    Args:\n        func: Function whose cache to clear\n    \"\"\"\n    if not is_ui():\n        return\n    \n    try:\n        if hasattr(func, \"clear\"):\n            func.clear()\n            logger.inf...",
      "suggested_refactor": "Extract UI rendering to clear_cache_by_function_ui_layer() + Extract logging to clear_cache_by_function_audit_layer()"
    },
    {
      "function_name": "is_debug_mode",
      "file_path": "streamlit_extension/utils/cache_utils.py",
      "line_number": 108,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def is_debug_mode() -> bool:\n    \"\"\"\n    Check if debug mode is enabled.\n    \n    Returns:\n        True if debug mode enabled, False otherwise\n    \"\"\"\n    # Import session_manager to avoid circular imports\n    try:\n        from .session_manager import get_session_value\n        config = get_session_v...",
      "suggested_refactor": "Extract UI rendering to is_debug_mode_ui_layer() + Extract logging to is_debug_mode_audit_layer()"
    },
    {
      "function_name": "get_session_state",
      "file_path": "streamlit_extension/utils/streamlit_helpers.py",
      "line_number": 61,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_session_state() -> Any:\n    \"\"\"\n    Get Streamlit session state safely.\n    \n    Returns:\n        Session state object or None if unavailable\n    \"\"\"\n    if is_ui():\n        try:\n            import streamlit as st\n            return st.session_state\n        except ImportError:\n            re...",
      "suggested_refactor": "Extract UI rendering to get_session_state_ui_layer()"
    },
    {
      "function_name": "check_streamlit_helpers_health",
      "file_path": "streamlit_extension/utils/streamlit_helpers.py",
      "line_number": 106,
      "responsibilities": [
        "auth",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def check_streamlit_helpers_health() -> Dict[str, Any]:\n    \"\"\"Check health of Streamlit helpers.\"\"\"\n    return {\n        \"streamlit_available\": is_ui(),\n        \"ui_available\": is_ui(),\n        \"headless_mode\": is_headless(),\n        \"project_root\": str(get_project_root()),\n        \"debug_mode\": is...",
      "suggested_refactor": "Extract UI rendering to check_streamlit_helpers_health_ui_layer() + Extract logging to check_streamlit_helpers_health_audit_layer()"
    },
    {
      "function_name": "setup_logging",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 616,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def setup_logging(log_dir: str = \"logs\", metrics_port: Optional[int] = None):\n    \"\"\"Setup global structured logging.\"\"\"\n    global _logger_instance\n    _logger_instance = StructuredLogger(\"tdd_framework\", log_dir)\n    \n    if metrics_port and PROMETHEUS_AVAILABLE:\n        _logger_instance.start_met...",
      "suggested_refactor": "Extract UI rendering to setup_logging_ui_layer() + Extract logging to setup_logging_audit_layer()"
    },
    {
      "function_name": "log_user_session",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 629,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def log_user_session(user_id: str, session_id: str, ip_address: str = None):\n    \"\"\"Context manager for user session logging.\"\"\"\n    logger = get_logger()\n    correlation_id = str(uuid.uuid4())\n    \n    with logger.log_context(\n        correlation_id=correlation_id,\n        user_id=user_id,\n        ...",
      "suggested_refactor": "Extract UI rendering to log_user_session_ui_layer() + Extract logging to log_user_session_audit_layer()"
    },
    {
      "function_name": "log_database_transaction",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 659,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def log_database_transaction(operation: str, tables: List[str]):\n    \"\"\"Context manager for database transaction logging.\"\"\"\n    logger = get_logger()\n    start_time = time.perf_counter()\n    \n    logger.info(\n        component=\"database\",\n        operation=\"transaction_start\",\n        message=f\"Dat...",
      "suggested_refactor": "Extract database operations to log_database_transaction_data_layer() + Extract UI rendering to log_database_transaction_ui_layer() + Extract logging to log_database_transaction_audit_layer()"
    },
    {
      "function_name": "log_performance_metrics",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 694,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def log_performance_metrics(memory_mb: float, cpu_percent: float, \n                           active_connections: int, cache_hit_ratio: float):\n    \"\"\"Log current performance metrics.\"\"\"\n    logger = get_logger()\n    \n    # Update Prometheus gauges\n    if PROMETHEUS_AVAILABLE:\n        logger.memory_...",
      "suggested_refactor": "Extract UI rendering to log_performance_metrics_ui_layer() + Extract logging to log_performance_metrics_audit_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 142,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, name: str = \"tdd_framework\", log_dir: str = \"logs\"):\n        self.name = name\n        self.log_dir = Path(log_dir)\n        self.log_dir.mkdir(exist_ok=True)\n        \n        # System information\n        self.hostname = socket.gethostname()\n        self.process_id = os.getpid()...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_setup_logging",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 160,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _setup_logging(self):\n        \"\"\"Setup structured logging configuration.\"\"\"\n        # Create custom formatter\n        self.logger = logging.getLogger(self.name)\n        self.logger.setLevel(logging.DEBUG)\n        \n        # Clear existing handlers\n        self.logger.handlers.clear()\n       ...",
      "suggested_refactor": "Extract UI rendering to _setup_logging_ui_layer() + Extract logging to _setup_logging_audit_layer()"
    },
    {
      "function_name": "_setup_prometheus_metrics",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 197,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _setup_prometheus_metrics(self):\n        \"\"\"Setup Prometheus metrics for monitoring.\"\"\"\n        if not PROMETHEUS_AVAILABLE:\n            return\n        \n        # Application metrics\n        self.request_count = Counter(\n            'tdd_framework_requests_total',\n            'Total number o...",
      "suggested_refactor": "Extract UI rendering to _setup_prometheus_metrics_ui_layer() + Extract logging to _setup_prometheus_metrics_audit_layer() + Extract business logic to _setup_prometheus_metrics_processor()"
    },
    {
      "function_name": "_create_log_entry",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 299,
      "responsibilities": [
        "ui",
        "business_logic",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _create_log_entry(self, level: LogLevel, event_type: EventType, \n                         component: str, operation: str, message: str,\n                         extra_data: Optional[Dict[str, Any]] = None,\n                         performance_data: Optional[PerformanceData] = None,\n         ...",
      "suggested_refactor": "Extract UI rendering to _create_log_entry_ui_layer() + Extract logging to _create_log_entry_audit_layer() + Extract business logic to _create_log_entry_processor()"
    },
    {
      "function_name": "log",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 357,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def log(self, level: LogLevel, event_type: EventType, component: str, \n            operation: str, message: str, **kwargs):\n        \"\"\"Generic structured logging method.\"\"\"\n        \n        log_entry = self._create_log_entry(\n            level, event_type, component, operation, message, **kwargs...",
      "suggested_refactor": "Extract database operations to log_data_layer() + Extract UI rendering to log_ui_layer() + Extract logging to log_audit_layer()"
    },
    {
      "function_name": "_update_prometheus_metrics",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 382,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _update_prometheus_metrics(self, level: LogLevel, event_type: EventType, log_entry: Dict[str, Any]):\n        \"\"\"Update Prometheus metrics based on log entry.\"\"\"\n        if not PROMETHEUS_AVAILABLE:\n            return\n        \n        # Error counting\n        if level in [LogLevel.ERROR, LogL...",
      "suggested_refactor": "Extract database operations to _update_prometheus_metrics_data_layer() + Extract UI rendering to _update_prometheus_metrics_ui_layer() + Extract logging to _update_prometheus_metrics_audit_layer()"
    },
    {
      "function_name": "info",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 411,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def info(self, component: str, operation: str, message: str, **kwargs):\n        \"\"\"Log info message.\"\"\"\n        return self.log(LogLevel.INFO, EventType.APPLICATION, component, operation, message, **kwargs)\n    ",
      "suggested_refactor": "Extract UI rendering to info_ui_layer() + Extract logging to info_audit_layer()"
    },
    {
      "function_name": "warning",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 415,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def warning(self, component: str, operation: str, message: str, **kwargs):\n        \"\"\"Log warning message.\"\"\"\n        return self.log(LogLevel.WARNING, EventType.APPLICATION, component, operation, message, **kwargs)\n    ",
      "suggested_refactor": "Extract UI rendering to warning_ui_layer() + Extract logging to warning_audit_layer()"
    },
    {
      "function_name": "error",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 419,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def error(self, component: str, operation: str, message: str, exception: Optional[Exception] = None, **kwargs):\n        \"\"\"Log error message.\"\"\"\n        return self.log(LogLevel.ERROR, EventType.ERROR, component, operation, message, exception=exception, **kwargs)\n    ",
      "suggested_refactor": "Extract UI rendering to error_ui_layer() + Extract logging to error_audit_layer()"
    },
    {
      "function_name": "security_event",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 427,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def security_event(self, component: str, operation: str, message: str, \n                      event_category: str, severity: str, **kwargs):\n        \"\"\"Log security event.\"\"\"\n        security_data = SecurityData(\n            event_category=event_category,\n            severity=severity,\n         ...",
      "suggested_refactor": "Extract UI rendering to security_event_ui_layer() + Extract logging to security_event_audit_layer()"
    },
    {
      "function_name": "api_request",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 509,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def api_request(self, method: str, endpoint: str, status_code: int, \n                   duration_ms: float, user_id: Optional[str] = None):\n        \"\"\"Log API request.\"\"\"\n        \n        # Update Prometheus metrics\n        if PROMETHEUS_AVAILABLE:\n            self.request_count.labels(method=me...",
      "suggested_refactor": "Extract UI rendering to api_request_ui_layer() + Extract logging to api_request_audit_layer()"
    },
    {
      "function_name": "user_action",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 534,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def user_action(self, user_id: str, action: str, resource: str, \n                   success: bool = True, **kwargs):\n        \"\"\"Log user action.\"\"\"\n        level = LogLevel.INFO if success else LogLevel.WARNING\n        \n        extra_data = {\n            \"user_id\": user_id,\n            \"action\":...",
      "suggested_refactor": "Extract UI rendering to user_action_ui_layer() + Extract logging to user_action_audit_layer()"
    },
    {
      "function_name": "start_metrics_server",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 556,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def start_metrics_server(self, port: int = 8000):\n        \"\"\"Start Prometheus metrics HTTP server.\"\"\"\n        if PROMETHEUS_AVAILABLE:\n            start_http_server(port)\n            self.info(\n                component=\"monitoring\",\n                operation=\"start_metrics_server\",\n            ...",
      "suggested_refactor": "Extract UI rendering to start_metrics_server_ui_layer() + Extract logging to start_metrics_server_audit_layer()"
    },
    {
      "function_name": "format",
      "file_path": "streamlit_extension/utils/structured_logger.py",
      "line_number": 577,
      "responsibilities": [
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def format(self, record):\n        # If the message is already JSON (from structured logger), return as-is\n        if hasattr(record, 'msg') and isinstance(record.msg, str):\n            try:\n                json.loads(record.msg)\n                return record.msg\n            except (json.JSONDeco...",
      "suggested_refactor": "Extract UI rendering to format_ui_layer() + Extract logging to format_audit_layer()"
    },
    {
      "function_name": "safe_int",
      "file_path": "streamlit_extension/utils/data_utils.py",
      "line_number": 85,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_int(value: Any, default: int = 0) -> int:\n    \"\"\"\n    Safely convert value to integer.\n    \n    Args:\n        value: Value to convert\n        default: Default value if conversion fails\n        \n    Returns:\n        Integer value or default\n    \"\"\"\n    try:\n        return int(value)\n    exce...",
      "suggested_refactor": "Extract UI rendering to safe_int_ui_layer() + Extract logging to safe_int_audit_layer()"
    },
    {
      "function_name": "safe_float",
      "file_path": "streamlit_extension/utils/data_utils.py",
      "line_number": 101,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def safe_float(value: Any, default: float = 0.0) -> float:\n    \"\"\"\n    Safely convert value to float.\n    \n    Args:\n        value: Value to convert\n        default: Default value if conversion fails\n        \n    Returns:\n        Float value or default\n    \"\"\"\n    try:\n        return float(value)\n  ...",
      "suggested_refactor": "Extract UI rendering to safe_float_ui_layer() + Extract logging to safe_float_audit_layer()"
    },
    {
      "function_name": "select",
      "file_path": "streamlit_extension/utils/query_builder.py",
      "line_number": 56,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def select(self, *columns: str) -> \"QueryBuilder\":\n        \"\"\"Add SELECT columns.\"\"\"\n        self.query_type = \"SELECT\"\n        if columns:\n            self.columns.extend(self._safe_ident(c) for c in columns)\n        else:\n            self.columns.clear()\n        return self\n",
      "suggested_refactor": "Extract database operations to select_data_layer() + Extract UI rendering to select_ui_layer()"
    },
    {
      "function_name": "_build_select",
      "file_path": "streamlit_extension/utils/query_builder.py",
      "line_number": 159,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _build_select(self) -> Tuple[str, Tuple[Any, ...]]:\n        \"\"\"Build SELECT query.\"\"\"\n        columns = \", \".join(self.columns) if self.columns else \"*\"\n        query = f\"SELECT {columns} FROM {self.table}\"\n\n        if self.joins:\n            query += \" \" + \" \".join(self.joins)\n\n        if s...",
      "suggested_refactor": "Extract database operations to _build_select_data_layer() + Extract UI rendering to _build_select_ui_layer()"
    },
    {
      "function_name": "_build_insert",
      "file_path": "streamlit_extension/utils/query_builder.py",
      "line_number": 187,
      "responsibilities": [
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _build_insert(self) -> Tuple[str, Tuple[Any, ...]]:\n        \"\"\"Build INSERT query.\"\"\"\n        if not self.values:\n            raise ValueError(\"No values provided for INSERT\")\n        columns = \", \".join(self.values.keys())\n        placeholders = \", \".join([\"?\"] * len(self.values))\n        q...",
      "suggested_refactor": "Extract database operations to _build_insert_data_layer() + Extract UI rendering to _build_insert_ui_layer()"
    },
    {
      "function_name": "with_client_info",
      "file_path": "streamlit_extension/utils/query_builder.py",
      "line_number": 265,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def with_client_info(self) -> \"ProjectQueryBuilder\":\n        \"\"\"Include client information.\"\"\"\n        return (\n            self.left_join(\n                \"framework_clients c\",\n                \"framework_projects.client_id = c.id\",\n            )\n            .select(\n                \"framework_...",
      "suggested_refactor": "Extract database operations to with_client_info_data_layer() + Extract UI rendering to with_client_info_ui_layer() + Extract logging to with_client_info_audit_layer()"
    },
    {
      "function_name": "with_epic_info",
      "file_path": "streamlit_extension/utils/query_builder.py",
      "line_number": 341,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def with_epic_info(self) -> \"TaskQueryBuilder\":\n        \"\"\"Include epic information.\"\"\"\n        return (\n            self.left_join(\n                \"framework_epics e\", \"framework_tasks.epic_id = e.id\"\n            )\n            .select(\n                \"framework_tasks.*\",\n                \"e.na...",
      "suggested_refactor": "Extract database operations to with_epic_info_data_layer() + Extract UI rendering to with_epic_info_ui_layer() + Extract logging to with_epic_info_audit_layer()"
    },
    {
      "function_name": "_execute_with_retry",
      "file_path": "streamlit_extension/utils/circuit_breaker.py",
      "line_number": 156,
      "responsibilities": [
        "business_logic",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _execute_with_retry(self, func: Callable, *args, **kwargs) -> Any:\n        \"\"\"Execute function with exponential backoff retry logic.\"\"\"\n        last_exception: Optional[Exception] = None\n        for attempt in range(self.config.max_retry_attempts):\n            try:\n                result = f...",
      "suggested_refactor": "Extract database operations to _execute_with_retry_data_layer() + Extract UI rendering to _execute_with_retry_ui_layer() + Extract logging to _execute_with_retry_audit_layer() + Extract business logic to _execute_with_retry_processor()"
    },
    {
      "function_name": "_record_success",
      "file_path": "streamlit_extension/utils/circuit_breaker.py",
      "line_number": 215,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _record_success(self) -> None:\n        \"\"\"Record successful operation.\"\"\"\n        with self._lock:\n            self.stats.successful_requests += 1\n            self.stats.last_success_time = datetime.now()\n            self.stats.current_consecutive_failures = 0\n            self.stats.current_...",
      "suggested_refactor": "Extract UI rendering to _record_success_ui_layer() + Extract logging to _record_success_audit_layer()"
    },
    {
      "function_name": "_record_failure",
      "file_path": "streamlit_extension/utils/circuit_breaker.py",
      "line_number": 226,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _record_failure(self) -> None:\n        \"\"\"Record failed operation.\"\"\"\n        with self._lock:\n            self.stats.failed_requests += 1\n            self.stats.last_failure_time = datetime.now()\n            self.stats.current_consecutive_successes = 0\n            self.stats.current_consecu...",
      "suggested_refactor": "Extract UI rendering to _record_failure_ui_layer() + Extract logging to _record_failure_audit_layer()"
    },
    {
      "function_name": "call",
      "file_path": "streamlit_extension/utils/circuit_breaker.py",
      "line_number": 288,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def call(self, func: Callable, *args, **kwargs) -> Any:\n        try:\n            return super().call(func, *args, **kwargs)\n        except sqlite3.OperationalError as exc:\n            msg = str(exc).lower()\n            if \"database is locked\" in msg:\n                logger.warning(\"Database lock...",
      "suggested_refactor": "Extract database operations to call_data_layer() + Extract UI rendering to call_ui_layer() + Extract logging to call_audit_layer()"
    },
    {
      "function_name": "get_current_correlation_id",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 35,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_current_correlation_id(self) -> Optional[str]:\n        \"\"\"Get current correlation ID from context\"\"\"\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            return st.session_state.get(\"correlation_id\")\n        return self._correlation_storage.get(threading.ge...",
      "suggested_refactor": "Extract UI rendering to get_current_correlation_id_ui_layer()"
    },
    {
      "function_name": "set_correlation_id",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 41,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def set_correlation_id(self, correlation_id: str) -> None:\n        \"\"\"Set correlation ID in current context\"\"\"\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            st.session_state[\"correlation_id\"] = correlation_id\n        else:\n            self._correlation_stora...",
      "suggested_refactor": "Extract UI rendering to set_correlation_id_ui_layer()"
    },
    {
      "function_name": "_setup_json_logging",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 68,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _setup_json_logging(self) -> None:\n        \"\"\"Setup JSON-based logging format\"\"\"\n        from .log_formatter import JSONFormatter\n\n        handler = logging.StreamHandler()\n        handler.setFormatter(JSONFormatter())\n        # Evita handlers duplicados em hot-reload\n        if not any(isin...",
      "suggested_refactor": "Extract UI rendering to _setup_json_logging_ui_layer() + Extract logging to _setup_json_logging_audit_layer()"
    },
    {
      "function_name": "_get_session_info",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 79,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _get_session_info(self) -> Dict[str, Any]:\n        \"\"\"Extract session information\"\"\"\n        session_info: Dict[str, Any] = {}\n\n        if STREAMLIT_AVAILABLE and st and hasattr(st, \"session_state\"):\n            session_info[\"session_id\"] = st.session_state.get(\"session_id\", \"unknown\")\n     ...",
      "suggested_refactor": "Extract database operations to _get_session_info_data_layer() + Extract UI rendering to _get_session_info_ui_layer() + Extract logging to _get_session_info_audit_layer()"
    },
    {
      "function_name": "log_operation",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 96,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def log_operation(\n        self,\n        operation: str,\n        level: str = \"INFO\",\n        message: str = \"\",\n        duration_ms: Optional[float] = None,\n        success: bool = True,\n        error: Optional[Exception] = None,\n        metadata: Optional[Dict[str, Any]] = None,",
      "suggested_refactor": "Extract UI rendering to log_operation_ui_layer() + Extract logging to log_operation_audit_layer()"
    },
    {
      "function_name": "info",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 130,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def info(self, operation: str, message: str, **kwargs: Any) -> None:\n        \"\"\"Log info level operation\"\"\"\n        self.log_operation(operation, \"INFO\", message, **kwargs)\n",
      "suggested_refactor": "Extract UI rendering to info_ui_layer() + Extract logging to info_audit_layer()"
    },
    {
      "function_name": "error",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 134,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def error(\n        self, operation: str, message: str, error: Exception | None = None, **kwargs: Any",
      "suggested_refactor": "Extract UI rendering to error_ui_layer() + Extract logging to error_audit_layer()"
    },
    {
      "function_name": "warning",
      "file_path": "streamlit_extension/utils/correlation_logging.py",
      "line_number": 140,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def warning(self, operation: str, message: str, **kwargs: Any) -> None:\n        \"\"\"Log warning level operation\"\"\"\n        self.log_operation(operation, \"WARNING\", message, **kwargs)\n",
      "suggested_refactor": "Extract UI rendering to warning_ui_layer() + Extract logging to warning_audit_layer()"
    },
    {
      "function_name": "get_database_manager",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 146,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_database_manager(force_new: bool = False) -> Optional[\"DatabaseManager\"]:\n    \"\"\"\n    Returns (or creates) DatabaseManager legacy instance.\n    Used only to initialize ServiceContainer while services depend on it.\n    \"\"\"\n    global _db_manager_singleton\n\n    if DatabaseManager is None:\n    ...",
      "suggested_refactor": "Extract database operations to get_database_manager_data_layer() + Extract UI rendering to get_database_manager_ui_layer() + Extract logging to get_database_manager_audit_layer()"
    },
    {
      "function_name": "_create_service_container",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 167,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _create_service_container(dbm: Optional[\"DatabaseManager\"]) -> Optional[\"ServiceContainer\"]:\n    if DISABLE_SERVICES:\n        _logger.warning(\"Services disabled by TDD_DISABLE_SERVICES.\")\n        return None\n    if not dbm:\n        return None\n    try:\n        container = initialize_service_cont...",
      "suggested_refactor": "Extract database operations to _create_service_container_data_layer() + Extract UI rendering to _create_service_container_ui_layer() + Extract logging to _create_service_container_audit_layer()"
    },
    {
      "function_name": "get_app_service_container",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 191,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_app_service_container(force_new: bool = False) -> Optional[\"ServiceContainer\"]:\n    \"\"\"\n    Returns (or creates) the service container.\n    Uses thread-safe global cache and, if available, Streamlit cache for stability across reruns.\n    \"\"\"\n    global _service_container_singleton\n\n    # If ...",
      "suggested_refactor": "Extract UI rendering to get_app_service_container_ui_layer()"
    },
    {
      "function_name": "_normalize_status",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 223,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _normalize_status(value: str) -> str:\n    v = value.lower().strip()\n    if v in {\"ok\", \"healthy\", \"pass\"}:\n        return \"healthy\"\n    if v in {\"error\", \"fail\", \"failed\"}:\n        return \"error\"\n    if v in {\"degraded\", \"warn\", \"warning\"}:\n        return \"degraded\"\n    return \"unknown\"\n",
      "suggested_refactor": "Extract UI rendering to _normalize_status_ui_layer() + Extract logging to _normalize_status_audit_layer()"
    },
    {
      "function_name": "check_database_connection",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 233,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def check_database_connection() -> bool:\n    \"\"\"\n    Verify connection via modular API (preferred).\n    \"\"\"\n    if not MODULAR_DB_AVAILABLE or get_connection is None:\n        _logger.warning(\"Modular DB API unavailable; skipping ping.\")\n        return False\n    try:\n        conn = get_connection()\n ...",
      "suggested_refactor": "Extract database operations to check_database_connection_data_layer() + Extract UI rendering to check_database_connection_ui_layer() + Extract logging to check_database_connection_audit_layer()"
    },
    {
      "function_name": "check_services_health",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 258,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_services_health() -> Dict[str, Any]:\n    \"\"\"\n    Combined system health (DB + Services). Stable structure for UI/JSON.\n    \"\"\"\n    db_section = HealthSection(status=\"unknown\")\n    svc_section = HealthSection(status=\"unknown\")\n\n    # DB health (modular health API)\n    try:\n        db_health...",
      "suggested_refactor": "Extract UI rendering to check_services_health_ui_layer() + Extract logging to check_services_health_audit_layer() + Extract validation to check_services_health_validator()"
    },
    {
      "function_name": "initialize_streamlit_session",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 332,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def initialize_streamlit_session() -> None:\n    \"\"\"\n    Prepare st.session_state and initialize services when necessary.\n    Call early in the app cycle.\n    \"\"\"\n    if not _is_streamlit():\n        return\n\n    ss = st.session_state\n    ss.setdefault(\"services_initialized\", False)\n    ss.setdefault(\"...",
      "suggested_refactor": "Extract database operations to initialize_streamlit_session_data_layer() + Extract UI rendering to initialize_streamlit_session_ui_layer() + Extract logging to initialize_streamlit_session_audit_layer()"
    },
    {
      "function_name": "get_session_services",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 363,
      "responsibilities": [
        "auth",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_session_services() -> Tuple[Optional[\"DatabaseManager\"], Optional[\"ServiceContainer\"]]:\n    \"\"\"\n    Returns (DatabaseManager legacy, ServiceContainer) from Streamlit session.\n    In environments without Streamlit, returns global values.\n    \"\"\"\n    if _is_streamlit():\n        if not st.sessi...",
      "suggested_refactor": "Extract database operations to get_session_services_data_layer() + Extract UI rendering to get_session_services_ui_layer()"
    },
    {
      "function_name": "cleanup_application",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 379,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def cleanup_application() -> None:\n    \"\"\"\n    Release app resources. Call on shutdown.\n    - Shut down ServiceContainer\n    - Drop singleton references\n    - Clear session_state (if exists)\n    \"\"\"\n    global _service_container_singleton, _db_manager_singleton\n\n    try:\n        try:\n            shu...",
      "suggested_refactor": "Extract database operations to cleanup_application_data_layer() + Extract UI rendering to cleanup_application_ui_layer() + Extract logging to cleanup_application_audit_layer()"
    },
    {
      "function_name": "_cleanup_private_db_singletons",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 405,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _cleanup_private_db_singletons() -> None:\n    \"\"\"\n    Fallback to close remaining private instances in internal modules.\n    Maintained for compatibility during transition. Does not fail shutdown.\n    \"\"\"\n    closed_any = False\n    try:\n        from streamlit_extension.database.queries import _D...",
      "suggested_refactor": "Extract UI rendering to _cleanup_private_db_singletons_ui_layer() + Extract logging to _cleanup_private_db_singletons_audit_layer()"
    },
    {
      "function_name": "setup_application",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 446,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def setup_application() -> None:\n    \"\"\"\n    Single setup entry point for Streamlit application.\n    - Initialize session/services\n    - Display health status\n    \"\"\"\n    if not _is_streamlit():\n        _logger.warning(\"Streamlit unavailable - UI setup ignored.\")\n        return\n\n    try:\n        ini...",
      "suggested_refactor": "Extract UI rendering to setup_application_ui_layer() + Extract logging to setup_application_audit_layer()"
    },
    {
      "function_name": "_get_container",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 473,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _get_container() -> Optional[\"ServiceContainer\"]:\n    _, container = get_session_services()\n    return container\n",
      "suggested_refactor": "Extract UI rendering to _get_container_ui_layer()"
    },
    {
      "function_name": "reset_services",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 504,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def reset_services(force: bool = False) -> None:\n    \"\"\"\n    Restart all services (useful for development).\n    In Streamlit, invalidates resource cache by switching key.\n    \"\"\"\n    if not force:\n        _logger.warning(\"reset_services requested; use force=True to confirm.\")\n        return\n\n    _lo...",
      "suggested_refactor": "Extract UI rendering to reset_services_ui_layer() + Extract logging to reset_services_audit_layer()"
    },
    {
      "function_name": "_svc_call",
      "file_path": "streamlit_extension/utils/app_setup.py",
      "line_number": 306,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "                def _svc_call() -> Dict[str, Any]:\n                    try:\n                        return check_service_health(container)  # type: ignore\n                    except TypeError:\n                        return check_service_health()  # type: ignore",
      "suggested_refactor": "Extract UI rendering to _svc_call_ui_layer() + Extract validation to _svc_call_validator()"
    },
    {
      "function_name": "handle_streamlit_exceptions",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 520,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def handle_streamlit_exceptions(show_error: bool = True, attempt_recovery: bool = True):\n    \"\"\"\n    Decorator for automatic exception handling in Streamlit functions.\n    \n    Args:\n        show_error: Whether to show error message in UI\n        attempt_recovery: Whether to attempt automatic recove...",
      "suggested_refactor": "Extract UI rendering to handle_streamlit_exceptions_ui_layer() + Extract logging to handle_streamlit_exceptions_audit_layer()"
    },
    {
      "function_name": "streamlit_error_boundary",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 555,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def streamlit_error_boundary(operation_name: str = \"operation\"):\n    \"\"\"\n    Context manager for error boundary around Streamlit operations.\n    \n    Args:\n        operation_name: Name of the operation for logging\n    \"\"\"\n    try:\n        yield\n    except Exception as e:\n        context = {\n        ...",
      "suggested_refactor": "Extract UI rendering to streamlit_error_boundary_ui_layer() + Extract logging to streamlit_error_boundary_audit_layer()"
    },
    {
      "function_name": "safe_streamlit_operation",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 577,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def safe_streamlit_operation(func: Callable, \n                           *args, \n                           default_return: Any = None,\n                           operation_name: Optional[str] = None,\n                           **kwargs) -> Any:\n    \"\"\"\n    Safely execute a Streamlit operation with ...",
      "suggested_refactor": "Extract database operations to safe_streamlit_operation_data_layer() + Extract UI rendering to safe_streamlit_operation_ui_layer() + Extract logging to safe_streamlit_operation_audit_layer()"
    },
    {
      "function_name": "handle_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 619,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def handle_error(exception: Exception, \n                context: Optional[Dict[str, Any]] = None,\n                show_user_message: bool = True) -> StreamlitError:\n    \"\"\"Handle an exception with the global handler.\"\"\"\n    return global_exception_handler.handle_exception(\n        exception, context...",
      "suggested_refactor": "Extract UI rendering to handle_error_ui_layer() + Extract logging to handle_error_audit_layer()"
    },
    {
      "function_name": "get_error_statistics",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 633,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def get_error_statistics() -> Dict[str, Any]:\n    \"\"\"Get error statistics.\"\"\"\n    return global_exception_handler.get_error_stats()\n\n",
      "suggested_refactor": "Extract UI rendering to get_error_statistics_ui_layer() + Extract logging to get_error_statistics_audit_layer()"
    },
    {
      "function_name": "reset_error_statistics",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 638,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def reset_error_statistics():\n    \"\"\"Reset error statistics.\"\"\"\n    global_exception_handler.reset_error_stats()\n\n",
      "suggested_refactor": "Extract UI rendering to reset_error_statistics_ui_layer() + Extract logging to reset_error_statistics_audit_layer()"
    },
    {
      "function_name": "show_error_dashboard",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 643,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def show_error_dashboard():\n    \"\"\"Show error dashboard in Streamlit.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    stats = get_error_statistics()\n    \n    st.subheader(\"\ud83d\udee1\ufe0f Error Monitoring Dashboard\")\n    \n    col1, col2, col3 = st.columns(3)\n    \n    with col1:\n        st.metric(\n    ...",
      "suggested_refactor": "Extract UI rendering to show_error_dashboard_ui_layer() + Extract logging to show_error_dashboard_audit_layer()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 85,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def __init__(self, \n                 exception: Exception,\n                 severity: str = ErrorSeverity.MEDIUM,\n                 category: str = ErrorCategory.UNKNOWN,\n                 user_message: Optional[str] = None,\n                 context: Optional[Dict[str, Any]] = None,\n              ...",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_generate_error_id",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 101,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _generate_error_id(self) -> str:\n        \"\"\"Generate unique error ID for tracking.\"\"\"\n        import hashlib\n        error_data = f\"{self.timestamp.isoformat()}_{type(self.exception).__name__}_{str(self.exception)[:100]}\"\n        return hashlib.sha256(error_data.encode()).hexdigest()[:12]\n  ...",
      "suggested_refactor": "Extract UI rendering to _generate_error_id_ui_layer() + Extract logging to _generate_error_id_audit_layer()"
    },
    {
      "function_name": "_generate_user_message",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 107,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def _generate_user_message(self) -> str:\n        \"\"\"Generate user-friendly error message.\"\"\"\n        exception_type = type(self.exception).__name__\n        \n        # Map common exceptions to user-friendly messages\n        user_messages = {\n            \"sqlite3.OperationalError\": \"Database tempo...",
      "suggested_refactor": "Extract database operations to _generate_user_message_data_layer() + Extract UI rendering to _generate_user_message_ui_layer() + Extract logging to _generate_user_message_audit_layer()"
    },
    {
      "function_name": "get_safe_context",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 134,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_safe_context(self) -> Dict[str, Any]:\n        \"\"\"Get sanitized context safe for logging.\"\"\"\n        safe_context = {}\n        \n        for key, value in self.context.items():\n            if isinstance(value, str):\n                # Sanitize string values with length limit\n               ...",
      "suggested_refactor": "Extract UI rendering to get_safe_context_ui_layer() + Extract logging to get_safe_context_audit_layer() + Extract validation to get_safe_context_validator()"
    },
    {
      "function_name": "__init__",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 159,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def __init__(self):\n        \"\"\"Initialize the global exception handler.\"\"\"\n        # Initialize secure logging\n        if LOG_SANITIZATION_AVAILABLE:\n            self.logger = create_secure_logger('streamlit_exceptions')\n        else:\n            import logging\n            self.logger = logging....",
      "suggested_refactor": "Extract UI rendering to __init___ui_layer() + Extract logging to __init___audit_layer()"
    },
    {
      "function_name": "_setup_default_recovery_strategies",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 194,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _setup_default_recovery_strategies(self):\n        \"\"\"Setup default error recovery strategies.\"\"\"\n        self.recovery_strategies = {\n            ErrorCategory.DATABASE: self._recover_database_error,\n            ErrorCategory.AUTHENTICATION: self._recover_auth_error,\n            ErrorCategor...",
      "suggested_refactor": "Extract UI rendering to _setup_default_recovery_strategies_ui_layer() + Extract logging to _setup_default_recovery_strategies_audit_layer()"
    },
    {
      "function_name": "classify_exception",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 208,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def classify_exception(self, exception: Exception, context: Optional[Dict[str, Any]] = None) -> Tuple[str, str]:\n        \"\"\"\n        Classify exception by category and severity.\n        \n        Args:\n            exception: The exception to classify\n            context: Optional context informat...",
      "suggested_refactor": "Extract UI rendering to classify_exception_ui_layer() + Extract logging to classify_exception_audit_layer() + Extract validation to classify_exception_validator()"
    },
    {
      "function_name": "handle_exception",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 271,
      "responsibilities": [
        "auth",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def handle_exception(self,\n                        exception: Exception,\n                        context: Optional[Dict[str, Any]] = None,\n                        show_user_message: bool = True,\n                        attempt_recovery: bool = True) -> StreamlitError:\n        \"\"\"\n        Handle ...",
      "suggested_refactor": "Extract database operations to handle_exception_data_layer() + Extract UI rendering to handle_exception_ui_layer() + Extract logging to handle_exception_audit_layer()"
    },
    {
      "function_name": "_update_error_stats",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 325,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _update_error_stats(self, error: StreamlitError):\n        \"\"\"Update error statistics.\"\"\"\n        with self._stats_lock:\n            self.error_stats[\"total_errors\"] += 1\n            \n            # Update category stats\n            category_stats = self.error_stats[\"errors_by_category\"]\n     ...",
      "suggested_refactor": "Extract database operations to _update_error_stats_data_layer() + Extract UI rendering to _update_error_stats_ui_layer() + Extract logging to _update_error_stats_audit_layer()"
    },
    {
      "function_name": "_log_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 348,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _log_error(self, error: StreamlitError):\n        \"\"\"Log error with appropriate level.\"\"\"\n        safe_context = error.get_safe_context()\n        \n        # Create log message\n        log_data = {\n            \"error_id\": error.error_id,\n            \"category\": error.category,\n            \"sev...",
      "suggested_refactor": "Extract UI rendering to _log_error_ui_layer() + Extract logging to _log_error_audit_layer() + Extract validation to _log_error_validator()"
    },
    {
      "function_name": "_show_user_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 396,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _show_user_error(self, error: StreamlitError):\n        \"\"\"Show user-friendly error message in Streamlit UI.\"\"\"\n        if not STREAMLIT_AVAILABLE:\n            return\n        \n        # Choose appropriate Streamlit method based on severity\n        if error.severity == ErrorSeverity.CRITICAL:\n...",
      "suggested_refactor": "Extract UI rendering to _show_user_error_ui_layer() + Extract logging to _show_user_error_audit_layer()"
    },
    {
      "function_name": "_attempt_recovery",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 422,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _attempt_recovery(self, error: StreamlitError):\n        \"\"\"Attempt automatic error recovery.\"\"\"\n        recovery_func = self.recovery_strategies.get(error.category)\n        if recovery_func:\n            try:\n                recovery_func(error)\n            except Exception as e:\n            ...",
      "suggested_refactor": "Extract UI rendering to _attempt_recovery_ui_layer() + Extract logging to _attempt_recovery_audit_layer()"
    },
    {
      "function_name": "_recover_database_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 432,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_database_error(self, error: StreamlitError):\n        \"\"\"Attempt database error recovery.\"\"\"\n        if \"locked\" in str(error.exception).lower():\n            # Database lock - suggest retry\n            error.suggestions.append(\"The database is busy. Please wait a moment and try again...",
      "suggested_refactor": "Extract UI rendering to _recover_database_error_ui_layer() + Extract logging to _recover_database_error_audit_layer()"
    },
    {
      "function_name": "_recover_auth_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 443,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _recover_auth_error(self, error: StreamlitError):\n        \"\"\"Attempt authentication error recovery.\"\"\"\n        error.suggestions.append(\"Please log out and log back in.\")\n        error.suggestions.append(\"Clear your browser cookies if the problem persists.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_auth_error_ui_layer() + Extract logging to _recover_auth_error_audit_layer()"
    },
    {
      "function_name": "_recover_validation_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 448,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_validation_error(self, error: StreamlitError):\n        \"\"\"Attempt validation error recovery.\"\"\"\n        error.suggestions.append(\"Please check your input and try again.\")\n        error.suggestions.append(\"Ensure all required fields are filled correctly.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_validation_error_ui_layer() + Extract logging to _recover_validation_error_audit_layer()"
    },
    {
      "function_name": "_recover_network_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 453,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_network_error(self, error: StreamlitError):\n        \"\"\"Attempt network error recovery.\"\"\"\n        error.suggestions.append(\"Check your internet connection.\")\n        error.suggestions.append(\"Try refreshing the page.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_network_error_ui_layer() + Extract logging to _recover_network_error_audit_layer()"
    },
    {
      "function_name": "_recover_filesystem_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 458,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_filesystem_error(self, error: StreamlitError):\n        \"\"\"Attempt file system error recovery.\"\"\"\n        error.suggestions.append(\"File system error occurred.\")\n        error.suggestions.append(\"Please contact support if this persists.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_filesystem_error_ui_layer() + Extract logging to _recover_filesystem_error_audit_layer()"
    },
    {
      "function_name": "_recover_security_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 463,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_security_error(self, error: StreamlitError):\n        \"\"\"Attempt security error recovery.\"\"\"\n        error.suggestions.append(\"Security check failed.\")\n        error.suggestions.append(\"Please refresh the page and try again.\")\n        error.suggestions.append(\"Contact support if you ...",
      "suggested_refactor": "Extract UI rendering to _recover_security_error_ui_layer() + Extract logging to _recover_security_error_audit_layer()"
    },
    {
      "function_name": "_recover_user_input_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 469,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_user_input_error(self, error: StreamlitError):\n        \"\"\"Attempt user input error recovery.\"\"\"\n        error.suggestions.append(\"Please check your input format.\")\n        error.suggestions.append(\"Ensure all fields contain valid data.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_user_input_error_ui_layer() + Extract logging to _recover_user_input_error_audit_layer()"
    },
    {
      "function_name": "_recover_business_logic_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 474,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_business_logic_error(self, error: StreamlitError):\n        \"\"\"Attempt business logic error recovery.\"\"\"\n        error.suggestions.append(\"Business rule validation failed.\")\n        error.suggestions.append(\"Please review your data and try again.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_business_logic_error_ui_layer() + Extract logging to _recover_business_logic_error_audit_layer()"
    },
    {
      "function_name": "_recover_system_error",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 479,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _recover_system_error(self, error: StreamlitError):\n        \"\"\"Attempt system error recovery.\"\"\"\n        error.suggestions.append(\"System error occurred.\")\n        error.suggestions.append(\"Please try again or contact support.\")\n    ",
      "suggested_refactor": "Extract UI rendering to _recover_system_error_ui_layer() + Extract logging to _recover_system_error_audit_layer()"
    },
    {
      "function_name": "get_error_stats",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 484,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_error_stats(self) -> Dict[str, Any]:\n        \"\"\"Get error statistics.\"\"\"\n        with self._stats_lock:\n            return self.error_stats.copy()\n    ",
      "suggested_refactor": "Extract UI rendering to get_error_stats_ui_layer() + Extract logging to get_error_stats_audit_layer()"
    },
    {
      "function_name": "reset_error_stats",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 489,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def reset_error_stats(self):\n        \"\"\"Reset error statistics.\"\"\"\n        with self._stats_lock:\n            self.error_stats = {\n                \"total_errors\": 0,\n                \"errors_by_category\": {},\n                \"errors_by_severity\": {},\n                \"recent_errors\": [],\n         ...",
      "suggested_refactor": "Extract UI rendering to reset_error_stats_ui_layer() + Extract logging to reset_error_stats_audit_layer()"
    },
    {
      "function_name": "decorator",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 528,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def decorator(func: Callable) -> Callable:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                context = {\n                    \"function\": func.__name__,\n            ...",
      "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
    },
    {
      "function_name": "wrapper",
      "file_path": "streamlit_extension/utils/exception_handler.py",
      "line_number": 530,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def wrapper(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                context = {\n                    \"function\": func.__name__,\n                    \"module\": func.__module__,\n                    \"args_count\": len(args)...",
      "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
    },
    {
      "function_name": "handle_api_request",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 40,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_api_request(api_endpoint: str, query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"Main API request handler for TaskExecutionPlanner endpoints.\"\"\"\n    validation = validate_api_request(query_params)\n    if not validation.get(\"success\"):\n        return create_api_error_response(\n      ...",
      "suggested_refactor": "Extract database operations to handle_api_request_data_layer() + Extract UI rendering to handle_api_request_ui_layer() + Extract logging to handle_api_request_audit_layer()"
    },
    {
      "function_name": "_parse_epic_id",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 88,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _parse_epic_id(query_params: Dict[str, str]) -> Tuple[Optional[int], Optional[Dict[str, Any]]]:\n    \"\"\"Helper \u00fanico para ler/validar epic_id.\"\"\"\n    epic_id_str = query_params.get(\"epic_id\")\n    if not epic_id_str:\n        return None, create_api_error_response(\"Missing required parameter: epic_...",
      "suggested_refactor": "Extract database operations to _parse_epic_id_data_layer() + Extract UI rendering to _parse_epic_id_ui_layer() + Extract logging to _parse_epic_id_audit_layer()"
    },
    {
      "function_name": "handle_execution_planning",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 102,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_execution_planning(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle execution planning API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to plan\n        preset (optional): Scoring preset (default: balanced)\n        custom_weights (optional): JSON ...",
      "suggested_refactor": "Extract database operations to handle_execution_planning_data_layer() + Extract UI rendering to handle_execution_planning_ui_layer() + Extract logging to handle_execution_planning_audit_layer()"
    },
    {
      "function_name": "handle_epic_validation",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 153,
      "responsibilities": [
        "logging",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_epic_validation(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle epic dependency validation API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to validate\n        \n    Returns:\n        JSON response with validation results\n    \"\"\"\n    epic_id, err ...",
      "suggested_refactor": "Extract database operations to handle_epic_validation_data_layer() + Extract UI rendering to handle_epic_validation_ui_layer() + Extract logging to handle_epic_validation_audit_layer()"
    },
    {
      "function_name": "handle_scoring_analysis",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 178,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_scoring_analysis(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle task scoring analysis API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to analyze\n        preset (optional): Scoring preset (default: balanced)\n        \n    Returns:\n        JSON r...",
      "suggested_refactor": "Extract database operations to handle_scoring_analysis_data_layer() + Extract UI rendering to handle_scoring_analysis_ui_layer() + Extract logging to handle_scoring_analysis_audit_layer()"
    },
    {
      "function_name": "handle_execution_summary",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 207,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_execution_summary(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle execution summary API endpoint.\n    \n    Query params:\n        epic_id (required): Epic ID to summarize\n        preset (optional): Scoring preset (default: balanced)\n        \n    Returns:\n        JSON re...",
      "suggested_refactor": "Extract database operations to handle_execution_summary_data_layer() + Extract UI rendering to handle_execution_summary_ui_layer() + Extract logging to handle_execution_summary_audit_layer()"
    },
    {
      "function_name": "handle_presets_list",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 236,
      "responsibilities": [
        "network",
        "logging",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def handle_presets_list(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Handle scoring presets listing API endpoint.\n    \n    Query params:\n        None required\n        \n    Returns:\n        JSON response with available scoring presets\n    \"\"\"\n    from ..models.scoring import ScoringSy...",
      "suggested_refactor": "Extract database operations to handle_presets_list_data_layer() + Extract UI rendering to handle_presets_list_ui_layer() + Extract logging to handle_presets_list_audit_layer()"
    },
    {
      "function_name": "get_api_documentation",
      "file_path": "streamlit_extension/endpoints/execution_api.py",
      "line_number": 261,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_api_documentation() -> Dict[str, Any]:\n    \"\"\"\n    Get API documentation for TaskExecutionPlanner endpoints.\n    \n    Returns:\n        Dict containing API documentation\n    \"\"\"\n    return {\n        \"api_version\": \"1.0.0\",\n        \"description\": \"TaskExecutionPlanner API integrated with Strea...",
      "suggested_refactor": "Extract UI rendering to get_api_documentation_ui_layer() + Extract logging to get_api_documentation_audit_layer()"
    },
    {
      "function_name": "check_connection",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 55,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def check_connection(self) -> HealthCheck:\n        \"\"\"Test database connection\"\"\"\n        start_time = time.time()\n        \n        try:\n            conn = sqlite3.connect(self.db_path, timeout=5.0)\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT 1\")\n            result = cu...",
      "suggested_refactor": "Extract database operations to check_connection_data_layer() + Extract UI rendering to check_connection_ui_layer() + Extract logging to check_connection_audit_layer()"
    },
    {
      "function_name": "check_performance",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 98,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def check_performance(self) -> HealthCheck:\n        \"\"\"Test database performance\"\"\"\n        start_time = time.time()\n        \n        try:\n            conn = sqlite3.connect(self.db_path)\n            cursor = conn.cursor()\n            \n            # Test query performance\n            test_querie...",
      "suggested_refactor": "Extract database operations to check_performance_data_layer() + Extract UI rendering to check_performance_ui_layer() + Extract logging to check_performance_audit_layer()"
    },
    {
      "function_name": "check_resources",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 179,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def check_resources(self) -> List[HealthCheck]:\n        \"\"\"Check system resource health\"\"\"\n        metrics = self.get_system_metrics()\n        checks = []\n\n        # CPU check\n        start_cpu = time.time()\n        if metrics.cpu_percent > 90:\n            cpu_status = HealthStatus.CRITICAL\n    ...",
      "suggested_refactor": "Extract UI rendering to check_resources_ui_layer() + Extract logging to check_resources_audit_layer()"
    },
    {
      "function_name": "check_streamlit_session",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 258,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def check_streamlit_session(self) -> HealthCheck:\n        \"\"\"Check Streamlit session health\"\"\"\n        start_time = time.time()\n        \n        if not STREAMLIT_AVAILABLE:\n            return HealthCheck(\n                name=\"streamlit_availability\",\n                status=HealthStatus.WARNING,...",
      "suggested_refactor": "Extract UI rendering to check_streamlit_session_ui_layer() + Extract logging to check_streamlit_session_audit_layer()"
    },
    {
      "function_name": "check_cache_system",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 304,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def check_cache_system(self) -> HealthCheck:\n        \"\"\"Check caching system health\"\"\"\n        start_time = time.time()\n        \n        try:\n            # Test cache functionality\n            if STREAMLIT_AVAILABLE and hasattr(st, 'cache_data'):\n                # Streamlit's new caching\n       ...",
      "suggested_refactor": "Extract UI rendering to check_cache_system_ui_layer() + Extract logging to check_cache_system_audit_layer()"
    },
    {
      "function_name": "run_all_checks",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 350,
      "responsibilities": [
        "logging",
        "validation",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def run_all_checks(self, force_refresh: bool = False) -> Dict[str, Any]:\n        \"\"\"Run all health checks\"\"\"\n        current_time = time.time()\n        \n        # Use cached results if recent and not forced\n        if (not force_refresh and \n            self._last_check_time and \n            sel...",
      "suggested_refactor": "Extract UI rendering to run_all_checks_ui_layer() + Extract logging to run_all_checks_audit_layer() + Extract validation to run_all_checks_validator()"
    },
    {
      "function_name": "_determine_overall_status",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 404,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _determine_overall_status(self, checks: List[HealthCheck]) -> HealthStatus:\n        \"\"\"Determine overall health status from individual checks\"\"\"\n        if any(check.status == HealthStatus.CRITICAL for check in checks):\n            return HealthStatus.CRITICAL\n        elif any(check.status =...",
      "suggested_refactor": "Extract UI rendering to _determine_overall_status_ui_layer() + Extract logging to _determine_overall_status_audit_layer()"
    },
    {
      "function_name": "get_readiness_status",
      "file_path": "streamlit_extension/endpoints/health_monitoring.py",
      "line_number": 415,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_readiness_status(self) -> Dict[str, Any]:\n        \"\"\"Kubernetes readiness probe endpoint\"\"\"\n        critical_checks = [\n            \"database_connection\",\n            \"system_memory\",\n            \"system_disk\"\n        ]\n        \n        results = self.run_all_checks()\n        \n        # ...",
      "suggested_refactor": "Extract UI rendering to get_readiness_status_ui_layer() + Extract logging to get_readiness_status_audit_layer()"
    },
    {
      "function_name": "detailed_health",
      "file_path": "streamlit_extension/endpoints/health.py",
      "line_number": 91,
      "responsibilities": [
        "validation",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def detailed_health(self) -> Dict[str, object]:\n        \"\"\"Return detailed component information.\n\n        The overall status is derived from the status of individual\n        components \u2013 ``unhealthy`` takes precedence over ``degraded``\n        which in turn takes precedence over ``healthy``.\n  ...",
      "suggested_refactor": "Extract UI rendering to detailed_health_ui_layer() + Extract validation to detailed_health_validator()"
    },
    {
      "function_name": "readiness_check",
      "file_path": "streamlit_extension/endpoints/health.py",
      "line_number": 129,
      "responsibilities": [
        "network",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def readiness_check(self) -> Tuple[int, Dict[str, object]]:\n        \"\"\"Readiness probe suitable for Kubernetes.\"\"\"\n\n        db = self.checker.check_database()\n        cache = self.checker.check_cache()\n        ready = db.get(\"status\") == HealthStatus.HEALTHY.value and cache.get(\"status\") == Heal...",
      "suggested_refactor": "Extract validation to readiness_check_validator()"
    },
    {
      "function_name": "verify_api_key",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 38,
      "responsibilities": [
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def verify_api_key(api_key: str) -> Tuple[bool, Optional[str]]:\n    \"\"\"\n    Verify API key if provided.\n    \n    Args:\n        api_key: API key to verify\n        \n    Returns:\n        Tuple of (is_valid, user_id)\n    \"\"\"\n    if not api_key:\n        return False, None\n    \n    # For demo purposes, ac...",
      "suggested_refactor": "Extract UI rendering to verify_api_key_ui_layer() + Extract logging to verify_api_key_audit_layer() + Extract validation to verify_api_key_validator()"
    },
    {
      "function_name": "check_api_rate_limit",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 66,
      "responsibilities": [
        "auth",
        "network",
        "validation"
      ],
      "severity": "HIGH",
      "code_snippet": "def check_api_rate_limit(request_type: str = \"api_request\", user_id: Optional[str] = None) -> Tuple[bool, Optional[str]]:\n    \"\"\"\n    Check rate limits for API requests with specific limits.\n    \n    Args:\n        request_type: Type of request (api_request, api_heavy, etc.)\n        user_id: User ID ...",
      "suggested_refactor": "Extract validation to check_api_rate_limit_validator()"
    },
    {
      "function_name": "authenticate_api_request",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 102,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def authenticate_api_request(query_params: Dict[str, str]) -> Tuple[bool, Optional[str], Optional[str]]:\n    \"\"\"\n    Authenticate API request using multiple methods.\n    \n    Args:\n        query_params: Query parameters from request\n        \n    Returns:\n        Tuple of (is_authenticated, user_id, ...",
      "suggested_refactor": "Extract database operations to authenticate_api_request_data_layer() + Extract UI rendering to authenticate_api_request_ui_layer() + Extract logging to authenticate_api_request_audit_layer() + Extract validation to authenticate_api_request_validator()"
    },
    {
      "function_name": "validate_api_request",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 130,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def validate_api_request(query_params: Dict[str, str]) -> Dict[str, Any]:\n    \"\"\"\n    Comprehensive API request validation.\n    \n    Args:\n        query_params: Query parameters from request\n        \n    Returns:\n        Dict with validation results and user info\n    \"\"\"\n    validation_result = {\n  ...",
      "suggested_refactor": "Extract database operations to validate_api_request_data_layer() + Extract UI rendering to validate_api_request_ui_layer() + Extract logging to validate_api_request_audit_layer() + Extract validation to validate_api_request_validator()"
    },
    {
      "function_name": "log_api_request",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 206,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def log_api_request(query_params: Dict[str, str], user_id: Optional[str], \n                   auth_method: Optional[str], response_time: float = 0.0):\n    \"\"\"\n    Log API request for monitoring and analytics.\n    \n    Args:\n        query_params: Request parameters\n        user_id: Authenticated user...",
      "suggested_refactor": "Extract database operations to log_api_request_data_layer() + Extract UI rendering to log_api_request_ui_layer() + Extract logging to log_api_request_audit_layer()"
    },
    {
      "function_name": "generate_request_id",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 231,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def generate_request_id(user_id: Optional[str], api_endpoint: str) -> str:\n    \"\"\"\n    Generate unique request ID for tracing.\n    \n    Args:\n        user_id: User ID\n        api_endpoint: API endpoint\n        \n    Returns:\n        Unique request ID\n    \"\"\"\n    timestamp = str(int(time.time() * 1000...",
      "suggested_refactor": ""
    },
    {
      "function_name": "create_api_error_response",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 253,
      "responsibilities": [
        "logging",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def create_api_error_response(error_message: str, error_code: str, \n                            details: Optional[Any] = None) -> Dict[str, Any]:\n    \"\"\"\n    Create standardized API error response.\n    \n    Args:\n        error_message: Human-readable error message\n        error_code: Machine-readabl...",
      "suggested_refactor": "Extract UI rendering to create_api_error_response_ui_layer() + Extract logging to create_api_error_response_audit_layer()"
    },
    {
      "function_name": "create_api_success_response",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 278,
      "responsibilities": [
        "network",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def create_api_success_response(data: Any, metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n    \"\"\"\n    Create standardized API success response.\n    \n    Args:\n        data: Response data\n        metadata: Optional metadata (pagination, etc.)\n        \n    Returns:\n        Standardized ...",
      "suggested_refactor": "Extract UI rendering to create_api_success_response_ui_layer()"
    },
    {
      "function_name": "generate_dev_api_key",
      "file_path": "streamlit_extension/endpoints/api_middleware.py",
      "line_number": 301,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def generate_dev_api_key(user_id: str) -> str:\n    \"\"\"\n    Generate development API key.\n    \n    Args:\n        user_id: User identifier\n        \n    Returns:\n        Development API key\n    \"\"\"\n    timestamp = str(int(time.time()))\n    key_data = f\"{user_id}_{timestamp}\"\n    return f\"tdd_api_{user_...",
      "suggested_refactor": ""
    },
    {
      "function_name": "render_project_card",
      "file_path": "streamlit_extension/pages/projects.py",
      "line_number": 52,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_project_card(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render an individual project card.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.container():\n        # Card header with status indicator\n        status_colors = {\n...",
      "suggested_refactor": "Extract database operations to render_project_card_data_layer() + Extract UI rendering to render_project_card_ui_layer() + Extract validation to render_project_card_validator()"
    },
    {
      "function_name": "render_edit_project_modal",
      "file_path": "streamlit_extension/pages/projects.py",
      "line_number": 158,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_edit_project_modal(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the edit project modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Edit Project: {project['name']}\", width=\"large\"):\n        with st.form(f\"...",
      "suggested_refactor": "Extract database operations to render_edit_project_modal_data_layer() + Extract UI rendering to render_edit_project_modal_ui_layer() + Extract logging to render_edit_project_modal_audit_layer() + Extract validation to render_edit_project_modal_validator()"
    },
    {
      "function_name": "render_delete_project_modal",
      "file_path": "streamlit_extension/pages/projects.py",
      "line_number": 338,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_delete_project_modal(project: Dict[str, Any], db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the delete project confirmation modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    # Apply XSS sanitization to modal content\n    safe_project_name = saniti...",
      "suggested_refactor": "Extract database operations to render_delete_project_modal_data_layer() + Extract UI rendering to render_delete_project_modal_ui_layer() + Extract logging to render_delete_project_modal_audit_layer() + Extract validation to render_delete_project_modal_validator()"
    },
    {
      "function_name": "render_create_project_form",
      "file_path": "streamlit_extension/pages/projects.py",
      "line_number": 383,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_create_project_form(db_manager: DatabaseManager, clients_map: Dict[int, str]):\n    \"\"\"Render the create new project form.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.expander(\"\u2795 Create New Project\", expanded=False):\n        with st.form(\"create_project_form\"):\n     ...",
      "suggested_refactor": "Extract database operations to render_create_project_form_data_layer() + Extract UI rendering to render_create_project_form_ui_layer() + Extract logging to render_create_project_form_audit_layer() + Extract validation to render_create_project_form_validator()"
    },
    {
      "function_name": "render_projects_page",
      "file_path": "streamlit_extension/pages/projects.py",
      "line_number": 550,
      "responsibilities": [
        "logging",
        "database",
        "ui",
        "auth",
        "file_io",
        "network",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_projects_page():\n    \"\"\"Render the main projects management page.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    if not DATABASE_UTILS_AVAILABLE:\n        st.error(\n            ErrorMessages.LOADING_ERROR.format(\n                entity=\"data...",
      "suggested_refactor": "Extract database operations to render_projects_page_data_layer() + Extract UI rendering to render_projects_page_ui_layer() + Extract logging to render_projects_page_audit_layer() + Extract validation to render_projects_page_validator()"
    },
    {
      "function_name": "get_available_pages",
      "file_path": "streamlit_extension/pages/__init__.py",
      "line_number": 111,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_available_pages():\n    \"\"\"Get list of available pages for navigation.\"\"\"\n    return {\n        page_id: page_info \n        for page_id, page_info in PAGE_REGISTRY.items() \n        if page_info[\"available\"]\n    }\n\n",
      "suggested_refactor": "Extract UI rendering to get_available_pages_ui_layer() + Extract logging to get_available_pages_audit_layer()"
    },
    {
      "function_name": "render_page",
      "file_path": "streamlit_extension/pages/__init__.py",
      "line_number": 120,
      "responsibilities": [
        "logging",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_page(page_id: str):\n    \"\"\"Render a specific page by ID.\"\"\"\n    if page_id not in PAGE_REGISTRY:\n        return {\"error\": f\"Unknown page: {page_id}\"}\n    \n    page_info = PAGE_REGISTRY[page_id]\n    \n    if not page_info[\"available\"]:\n        return {\"error\": f\"Page '{page_id}' is not avai...",
      "suggested_refactor": "Extract UI rendering to render_page_ui_layer() + Extract logging to render_page_audit_layer()"
    },
    {
      "function_name": "render_client_card",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 65,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_client_card(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render an individual client card.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.container():\n        # Card header with status indicator\n        status_colors = {\n            StatusValues.ACTIVE....",
      "suggested_refactor": "Extract database operations to render_client_card_data_layer() + Extract UI rendering to render_client_card_ui_layer() + Extract logging to render_client_card_audit_layer() + Extract validation to render_client_card_validator()"
    },
    {
      "function_name": "render_edit_client_modal",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 150,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_edit_client_modal(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render the edit client modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Edit Client: {client['name']}\", width=\"large\"):\n        with st.form(f\"edit_client_form_{client['id']}\"):...",
      "suggested_refactor": "Extract database operations to render_edit_client_modal_data_layer() + Extract UI rendering to render_edit_client_modal_ui_layer() + Extract logging to render_edit_client_modal_audit_layer() + Extract validation to render_edit_client_modal_validator()"
    },
    {
      "function_name": "render_delete_client_modal",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 297,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_delete_client_modal(client: Dict[str, Any], db_manager: DatabaseManager):\n    \"\"\"Render the delete client confirmation modal.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.modal(f\"Delete Client: {client['name']}\", width=\"medium\"):\n        st.markdown(\"### \u26a0\ufe0f Confirm D...",
      "suggested_refactor": "Extract database operations to render_delete_client_modal_data_layer() + Extract UI rendering to render_delete_client_modal_ui_layer() + Extract logging to render_delete_client_modal_audit_layer() + Extract validation to render_delete_client_modal_validator()"
    },
    {
      "function_name": "render_create_client_form",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 368,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_create_client_form(db_manager: DatabaseManager):\n    \"\"\"Render the create new client form.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    with st.expander(\"\u2795 Create New Client\", expanded=False):\n        with st.form(\"create_client_form\"):\n            st.markdown(f\"### {UIConst...",
      "suggested_refactor": "Extract database operations to render_create_client_form_data_layer() + Extract UI rendering to render_create_client_form_ui_layer() + Extract logging to render_create_client_form_audit_layer() + Extract validation to render_create_client_form_validator()"
    },
    {
      "function_name": "render_clients_page",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 506,
      "responsibilities": [
        "logging",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_clients_page():\n    \"\"\"Render the main clients management page.\"\"\"\n    # Initialize page and validate dependencies\n    init_result = _initialize_clients_page()\n    if \"error\" in init_result:\n        return init_result\n    \n    # Setup database connection\n    db_manager = _setup_database_c...",
      "suggested_refactor": "Extract database operations to render_clients_page_data_layer() + Extract UI rendering to render_clients_page_ui_layer() + Extract logging to render_clients_page_audit_layer()"
    },
    {
      "function_name": "_initialize_clients_page",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 529,
      "responsibilities": [
        "auth",
        "logging",
        "validation",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _initialize_clients_page():\n    \"\"\"Initialize page, check dependencies and authentication.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    if not DATABASE_UTILS_AVAILABLE:\n        st.error(\n            ErrorMessages.LOADING_ERROR.format(\n          ...",
      "suggested_refactor": "Extract UI rendering to _initialize_clients_page_ui_layer() + Extract logging to _initialize_clients_page_audit_layer() + Extract validation to _initialize_clients_page_validator()"
    },
    {
      "function_name": "_setup_database_connection",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 572,
      "responsibilities": [
        "logging",
        "database",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _setup_database_connection():\n    \"\"\"Setup and return database manager instance.\"\"\"\n    with streamlit_error_boundary(\"database_initialization\"):\n        config = safe_streamlit_operation(\n            load_config,\n            default_return=None,\n            operation_name=\"load_config\",\n       ...",
      "suggested_refactor": "Extract database operations to _setup_database_connection_data_layer() + Extract UI rendering to _setup_database_connection_ui_layer() + Extract logging to _setup_database_connection_audit_layer()"
    },
    {
      "function_name": "_render_client_filters",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 605,
      "responsibilities": [
        "network",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _render_client_filters():\n    \"\"\"Render filter controls and return filter values using DRY component.\"\"\"\n    if FORM_COMPONENTS_AVAILABLE and render_entity_filters:\n        # Use DRY entity filters component\n        status_options = [\"all\"] + (StatusValues.get_all_values() if StatusValues else [...",
      "suggested_refactor": "Extract database operations to _render_client_filters_data_layer() + Extract UI rendering to _render_client_filters_ui_layer()"
    },
    {
      "function_name": "_load_and_display_clients",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 662,
      "responsibilities": [
        "database",
        "ui",
        "network",
        "logging",
        "validation"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _load_and_display_clients(db_manager, filter_values):\n    \"\"\"Load clients from database, apply filters and display results.\"\"\"\n    with streamlit_error_boundary(\"client_loading\"):\n        # Check rate limit for database read\n        db_read_allowed, db_read_error = check_rate_limit(\"db_read\") if...",
      "suggested_refactor": "Extract database operations to _load_and_display_clients_data_layer() + Extract UI rendering to _load_and_display_clients_ui_layer() + Extract logging to _load_and_display_clients_audit_layer() + Extract validation to _load_and_display_clients_validator()"
    },
    {
      "function_name": "_display_client_results",
      "file_path": "streamlit_extension/pages/clients.py",
      "line_number": 711,
      "responsibilities": [
        "logging",
        "auth",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def _display_client_results(clients_result, all_clients, filtered_clients, db_manager):\n    \"\"\"Display client results with count and debug info.\"\"\"\n    # Display results count\n    total_count = clients_result.get(\"total\", len(all_clients)) if isinstance(clients_result, dict) else len(all_clients)\n  ...",
      "suggested_refactor": "Extract database operations to _display_client_results_data_layer() + Extract UI rendering to _display_client_results_ui_layer() + Extract logging to _display_client_results_audit_layer()"
    },
    {
      "function_name": "_ensure_auth_tables",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 98,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def _ensure_auth_tables(self) -> None:\n        \"\"\"Create authentication tables if they don't exist.\"\"\"\n        with sqlite3.connect(self.db_path) as conn:\n            conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS auth_users (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT...",
      "suggested_refactor": "Extract database operations to _ensure_auth_tables_data_layer()"
    },
    {
      "function_name": "authenticate",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 211,
      "responsibilities": [
        "auth",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def authenticate(self, username: str, password: str) -> AuthResult:\n        \"\"\"Authenticate a user and create a session.\n\n        Args:\n            username: Username used for login.\n            password: Raw password string.\n\n        Returns:\n            AuthResult: Authentication outcome inclu...",
      "suggested_refactor": "Extract database operations to authenticate_data_layer() + Extract UI rendering to authenticate_ui_layer()"
    },
    {
      "function_name": "get_current_user",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 302,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_current_user(self, session_id: str) -> Optional[User]:\n        \"\"\"Get current user from session.\"\"\"\n        session_data = self.session_handler.get_session(session_id)\n        return session_data.user if session_data else None\n    ",
      "suggested_refactor": ""
    },
    {
      "function_name": "is_authenticated",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 307,
      "responsibilities": [
        "auth",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def is_authenticated(self, session_id: str) -> bool:\n        \"\"\"Check if session is valid and user is authenticated.\"\"\"\n        return self.session_handler.is_valid_session(session_id)\n    ",
      "suggested_refactor": "Extract validation to is_authenticated_validator()"
    },
    {
      "function_name": "change_password",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 311,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def change_password(self, user_id: int, old_password: str, new_password: str) -> AuthResult:\n        \"\"\"Change user password with validation.\"\"\"\n        if len(new_password) < 8:\n            return AuthResult(False, message=\"New password must be at least 8 characters\")\n        \n        try:\n    ...",
      "suggested_refactor": "Extract database operations to change_password_data_layer()"
    },
    {
      "function_name": "get_user_by_id",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 346,
      "responsibilities": [
        "auth",
        "database",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def get_user_by_id(self, user_id: int) -> Optional[User]:\n        \"\"\"Get user by ID.\"\"\"\n        try:\n            with sqlite3.connect(self.db_path) as conn:\n                row = conn.execute(\"\"\"\n                    SELECT id, username, email, role, is_active, created_at, last_login\n            ...",
      "suggested_refactor": "Extract database operations to get_user_by_id_data_layer() + Extract UI rendering to get_user_by_id_ui_layer()"
    },
    {
      "function_name": "is_valid_session",
      "file_path": "streamlit_extension/auth/auth_manager.py",
      "line_number": 59,
      "responsibilities": [
        "auth",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "        def is_valid_session(self, session_id: str) -> bool:  # pragma: no cover\n            return False\n\n",
      "suggested_refactor": "Extract validation to is_valid_session_validator()"
    },
    {
      "function_name": "_fallback_get_authenticated_user",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 67,
      "responsibilities": [
        "logging",
        "auth",
        "network"
      ],
      "severity": "HIGH",
      "code_snippet": "def _fallback_get_authenticated_user() -> Optional[Dict[str, Any]]:  # pragma: no cover\n    logger.warning(\"get_authenticated_user(): OAuth indispon\u00edvel \u2014 retornando None.\")\n    return None\n",
      "suggested_refactor": "Extract logging to _fallback_get_authenticated_user_audit_layer()"
    },
    {
      "function_name": "_fallback_is_user_authenticated",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 71,
      "responsibilities": [
        "auth",
        "logging"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def _fallback_is_user_authenticated() -> bool:  # pragma: no cover\n    logger.warning(\"is_user_authenticated(): OAuth indispon\u00edvel \u2014 retornando False.\")\n    return False\n",
      "suggested_refactor": "Extract logging to _fallback_is_user_authenticated_audit_layer()"
    },
    {
      "function_name": "_fallback_render_login_page",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 75,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _fallback_render_login_page() -> None:  # pragma: no cover\n    msg = \"Google OAuth n\u00e3o configurado. Contate o administrador.\"\n    if _STREAMLIT_AVAILABLE:\n        st.error(msg)  # type: ignore\n        st.stop()      # type: ignore\n    else:\n        raise RuntimeError(msg)\n",
      "suggested_refactor": "Extract UI rendering to _fallback_render_login_page_ui_layer() + Extract logging to _fallback_render_login_page_audit_layer()"
    },
    {
      "function_name": "_fallback_require_authentication",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 83,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def _fallback_require_authentication(func: F) -> F:  # pragma: no cover\n    @wraps(func)\n    def _wrapper(*args: Any, **kwargs: Any):\n        if _STREAMLIT_AVAILABLE and st is not None:\n            st.warning(\"Autentica\u00e7\u00e3o obrigat\u00f3ria. Fa\u00e7a login para continuar.\")  # type: ignore\n            _fallba...",
      "suggested_refactor": "Extract UI rendering to _fallback_require_authentication_ui_layer() + Extract logging to _fallback_require_authentication_audit_layer()"
    },
    {
      "function_name": "auth_middleware",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 126,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def auth_middleware() -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Alias de compatibilidade. Retorna o usu\u00e1rio autenticado (ou None).\n    Preferir `get_authenticated_user()`.\n    \"\"\"\n    return get_authenticated_user()\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "get_current_user",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 140,
      "responsibilities": [
        "auth",
        "network"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_current_user() -> Optional[Dict[str, Any]]:\n    \"\"\"\n    Alias de compatibilidade. Retorna o usu\u00e1rio corrente (ou None).\n    Preferir `get_authenticated_user()`.\n    \"\"\"\n    return get_authenticated_user()\n\n",
      "suggested_refactor": ""
    },
    {
      "function_name": "ensure_oauth_available",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 152,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def ensure_oauth_available(raise_error: bool = False) -> bool:\n    \"\"\"\n    Indica se o backend de OAuth real est\u00e1 dispon\u00edvel.\n    - Se `raise_error=True` e indispon\u00edvel, lan\u00e7a `RuntimeError`.\n    \"\"\"\n    if not _OAUTH_AVAILABLE and raise_error:\n        raise RuntimeError(\n            \"Google OAuth n...",
      "suggested_refactor": "Extract UI rendering to ensure_oauth_available_ui_layer() + Extract logging to ensure_oauth_available_audit_layer()"
    },
    {
      "function_name": "_wrapper",
      "file_path": "streamlit_extension/auth/__init__.py",
      "line_number": 85,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _wrapper(*args: Any, **kwargs: Any):\n        if _STREAMLIT_AVAILABLE and st is not None:\n            st.warning(\"Autentica\u00e7\u00e3o obrigat\u00f3ria. Fa\u00e7a login para continuar.\")  # type: ignore\n            _fallback_render_login_page()\n            st.stop()  # type: ignore\n        raise RuntimeError(\"...",
      "suggested_refactor": "Extract UI rendering to _wrapper_ui_layer() + Extract logging to _wrapper_audit_layer()"
    },
    {
      "function_name": "require_auth",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 30,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def require_auth(roles: Optional[list[UserRole]] = None):\n    \"\"\"Decorator to require authentication for Streamlit functions.\"\"\"\n    def decorator(func: Callable):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.sess...",
      "suggested_refactor": "Extract UI rendering to require_auth_ui_layer() + Extract logging to require_auth_audit_layer()"
    },
    {
      "function_name": "auth_middleware",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 67,
      "responsibilities": [
        "auth",
        "network",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def auth_middleware() -> Optional[User]:\n    \"\"\"Middleware to check authentication state.\"\"\"\n    session_id = st.session_state.get(\"session_id\")\n    if not session_id:\n        return None\n    auth_manager = get_auth_manager()\n    user = auth_manager.get_current_user(session_id)\n    if not user:\n    ...",
      "suggested_refactor": "Extract UI rendering to auth_middleware_ui_layer()"
    },
    {
      "function_name": "logout_user",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 92,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def logout_user():\n    \"\"\"Logout current user.\"\"\"\n    if \"session_id\" in st.session_state:\n        auth_manager = get_auth_manager()\n        auth_manager.logout(st.session_state.session_id)\n        del st.session_state.session_id\n    \n    if \"current_user\" in st.session_state:\n        del st.session...",
      "suggested_refactor": "Extract UI rendering to logout_user_ui_layer()"
    },
    {
      "function_name": "show_user_info",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 105,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def show_user_info():\n    \"\"\"Display current user information in sidebar.\"\"\"\n    user = get_current_user()\n    if user:\n        with st.sidebar:\n            st.markdown(\"---\")\n            st.markdown(\"### \ud83d\udc64 User Info\")\n            st.markdown(f\"**Username:** {user.username}\")\n            st.markdown...",
      "suggested_refactor": "Extract UI rendering to show_user_info_ui_layer() + Extract logging to show_user_info_audit_layer()"
    },
    {
      "function_name": "init_protected_page",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 119,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def init_protected_page(page_title: str, required_roles: Optional[list[UserRole]] = None):\n    \"\"\"Initialize a protected page with authentication checks.\n    \n    Args:\n        page_title: Title to display on the page\n        required_roles: Optional list of required roles\n    \n    Returns:\n        ...",
      "suggested_refactor": "Extract UI rendering to init_protected_page_ui_layer() + Extract logging to init_protected_page_audit_layer()"
    },
    {
      "function_name": "decorator",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 32,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def decorator(func: Callable):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.session_state:\n                st.error(\"\ud83d\udd12 Access denied. Please log in.\")\n                st.stop()\n            \n            auth_ma...",
      "suggested_refactor": "Extract UI rendering to decorator_ui_layer() + Extract logging to decorator_audit_layer()"
    },
    {
      "function_name": "wrapper",
      "file_path": "streamlit_extension/auth/middleware.py",
      "line_number": 34,
      "responsibilities": [
        "logging",
        "auth",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "        def wrapper(*args, **kwargs):\n            # Check authentication\n            if \"session_id\" not in st.session_state:\n                st.error(\"\ud83d\udd12 Access denied. Please log in.\")\n                st.stop()\n            \n            auth_manager = get_auth_manager()\n            user = auth_manag...",
      "suggested_refactor": "Extract UI rendering to wrapper_ui_layer() + Extract logging to wrapper_audit_layer()"
    },
    {
      "function_name": "render_login_page",
      "file_path": "streamlit_extension/auth/login_page.py",
      "line_number": 8,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def render_login_page():\n    \"\"\"Render login/registration page.\"\"\"\n    st.title(\"\ud83d\udd10 Authentication\")\n    \n    auth_manager = AuthManager()\n    \n    # Create tabs for login and registration\n    login_tab, register_tab = st.tabs([\"Login\", \"Register\"])\n    \n    with login_tab:\n        render_login_form(...",
      "suggested_refactor": "Extract UI rendering to render_login_page_ui_layer()"
    },
    {
      "function_name": "render_login_form",
      "file_path": "streamlit_extension/auth/login_page.py",
      "line_number": 24,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_login_form(auth_manager: AuthManager):\n    \"\"\"Render login form.\"\"\"\n    st.subheader(\"Login\")\n    \n    with st.form(\"login_form\"):\n        username = st.text_input(\"Username\", key=\"login_username\")\n        password = st.text_input(\"Password\", type=\"password\", key=\"login_password\")\n       ...",
      "suggested_refactor": "Extract UI rendering to render_login_form_ui_layer() + Extract logging to render_login_form_audit_layer()"
    },
    {
      "function_name": "render_registration_form",
      "file_path": "streamlit_extension/auth/login_page.py",
      "line_number": 47,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "def render_registration_form(auth_manager: AuthManager):\n    \"\"\"Render registration form.\"\"\"\n    st.subheader(\"Register New Account\")\n    \n    with st.form(\"register_form\"):\n        username = st.text_input(\"Username\", key=\"reg_username\")\n        email = st.text_input(\"Email\", key=\"reg_email\")\n     ...",
      "suggested_refactor": "Extract UI rendering to render_registration_form_ui_layer() + Extract logging to render_registration_form_audit_layer()"
    },
    {
      "function_name": "render_user_profile",
      "file_path": "streamlit_extension/auth/login_page.py",
      "line_number": 72,
      "responsibilities": [
        "auth",
        "logging",
        "file_io",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_user_profile():\n    \"\"\"Render user profile page.\"\"\"\n    if \"current_user\" not in st.session_state:\n        st.error(\"Please log in to view profile.\")\n        return\n    \n    user = st.session_state.current_user\n    auth_manager = AuthManager()\n    \n    st.title(\"\ud83d\udc64 User Profile\")\n    \n    ...",
      "suggested_refactor": "Extract UI rendering to render_user_profile_ui_layer() + Extract logging to render_user_profile_audit_layer()"
    },
    {
      "function_name": "is_valid_session",
      "file_path": "streamlit_extension/auth/session_handler.py",
      "line_number": 68,
      "responsibilities": [
        "auth",
        "validation"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def is_valid_session(self, session_id: str) -> bool:\n        \"\"\"Check if session is valid.\"\"\"\n        return self.get_session(session_id) is not None\n    ",
      "suggested_refactor": "Extract validation to is_valid_session_validator()"
    },
    {
      "function_name": "display_name",
      "file_path": "streamlit_extension/auth/user_model.py",
      "line_number": 20,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def display_name(self) -> str:\n        \"\"\"Get display name for role.\"\"\"\n        return {\n            UserRole.ADMIN: \"Administrator\",\n            UserRole.USER: \"User\", \n            UserRole.READONLY: \"Read Only\"\n        }[self]\n    ",
      "suggested_refactor": "Extract UI rendering to display_name_ui_layer()"
    },
    {
      "function_name": "to_dict",
      "file_path": "streamlit_extension/auth/user_model.py",
      "line_number": 68,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def to_dict(self) -> dict:\n        \"\"\"Convert to dictionary.\"\"\"\n        return {\n            \"id\": self.id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"role\": self.role.value,\n            \"is_active\": self.is_active,\n            \"created_at\": self.created...",
      "suggested_refactor": "Extract UI rendering to to_dict_ui_layer()"
    },
    {
      "function_name": "from_dict",
      "file_path": "streamlit_extension/auth/user_model.py",
      "line_number": 81,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def from_dict(cls, data: dict) -> User:\n        \"\"\"Create from dictionary.\"\"\"\n        return cls(\n            id=data.get(\"id\", 0),\n            username=data.get(\"username\", \"\"),\n            email=data.get(\"email\", \"\"),\n            role=UserRole(data.get(\"role\", \"user\")),\n            is_active=d...",
      "suggested_refactor": "Extract UI rendering to from_dict_ui_layer()"
    },
    {
      "function_name": "get_focus_time_from_db",
      "file_path": "streamlit_extension/components/sidebar/database_utils.py",
      "line_number": 23,
      "responsibilities": [
        "auth",
        "network",
        "database",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_focus_time_from_db(user_id: int = 1) -> tuple[str, Optional[str]]:\n    \"\"\"\n    Get real focus time from work_sessions table.\n    \n    Returns:\n        Tuple of (focus_display, delta_display)\n    \"\"\"\n    if not DATABASE_AVAILABLE or not get_connection_context:\n        return \"2.5h\", \"0.5h\"  #...",
      "suggested_refactor": "Extract database operations to get_focus_time_from_db_data_layer() + Extract UI rendering to get_focus_time_from_db_ui_layer()"
    },
    {
      "function_name": "initialize_timer_state",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 19,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def initialize_timer_state() -> None:\n    \"\"\"Initialize timer state in session state if not exists.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    if \"timer_running\" not in st.session_state:\n        st.session_state.timer_running = False\n        st.session_state.timer_start_time = None\n ...",
      "suggested_refactor": "Extract UI rendering to initialize_timer_state_ui_layer()"
    },
    {
      "function_name": "start_timer",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 31,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def start_timer() -> None:\n    \"\"\"Start or resume the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = True\n    st.session_state.timer_start_time = datetime.now()\n\n",
      "suggested_refactor": "Extract UI rendering to start_timer_ui_layer()"
    },
    {
      "function_name": "pause_timer",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 40,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def pause_timer() -> None:\n    \"\"\"Pause the timer and accumulate elapsed time.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = False\n    if st.session_state.timer_start_time:\n        st.session_state.elapsed_seconds += int(\n            (datetime.now() - st...",
      "suggested_refactor": "Extract UI rendering to pause_timer_ui_layer()"
    },
    {
      "function_name": "stop_timer",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 53,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def stop_timer() -> None:\n    \"\"\"Stop and reset the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    st.session_state.timer_running = False\n    st.session_state.timer_start_time = None\n    st.session_state.elapsed_seconds = 0\n\n",
      "suggested_refactor": "Extract UI rendering to stop_timer_ui_layer()"
    },
    {
      "function_name": "get_elapsed_time",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 63,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_elapsed_time() -> tuple[int, int]:\n    \"\"\"Get current elapsed time as (minutes, seconds).\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return 0, 0\n    \n    # Calculate total elapsed time\n    total_secs = st.session_state.get(\"elapsed_seconds\", 0)\n    if st.session_state.get(\"timer_running\") an...",
      "suggested_refactor": "Extract UI rendering to get_elapsed_time_ui_layer()"
    },
    {
      "function_name": "get_timer_state",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 79,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def get_timer_state() -> Dict[str, Any]:\n    \"\"\"Get current timer state for sidebar state.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\n            \"timer_running\": False,\n            \"current_task\": None,\n            \"elapsed_seconds\": 0\n        }\n    \n    return {\n        \"timer_running\": s...",
      "suggested_refactor": "Extract UI rendering to get_timer_state_ui_layer()"
    },
    {
      "function_name": "set_current_task",
      "file_path": "streamlit_extension/components/sidebar/timer.py",
      "line_number": 95,
      "responsibilities": [
        "auth",
        "ui"
      ],
      "severity": "MEDIUM",
      "code_snippet": "def set_current_task(task: str) -> None:\n    \"\"\"Set the current task for the timer.\"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return\n    \n    if task != \"No task selected\":\n        st.session_state.current_task = task",
      "suggested_refactor": "Extract UI rendering to set_current_task_ui_layer()"
    },
    {
      "function_name": "get_gamification_data",
      "file_path": "streamlit_extension/components/sidebar/gamification.py",
      "line_number": 28,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "network"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def get_gamification_data(user_id: int = 1) -> Dict[str, Any]:\n    \"\"\"Get real gamification data from database.\"\"\"\n    if not DATABASE_AVAILABLE:\n        return get_fallback_gamification_data()\n\n    try:\n        if DATABASE_AVAILABLE:\n            # Get user stats (points, completed tasks)\n          ...",
      "suggested_refactor": "Extract logging to get_gamification_data_audit_layer() + Extract business logic to get_gamification_data_processor()"
    },
    {
      "function_name": "calculate_streaks",
      "file_path": "streamlit_extension/components/sidebar/streaks.py",
      "line_number": 16,
      "responsibilities": [
        "business_logic",
        "auth",
        "logging",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def calculate_streaks(timer_sessions: List[Dict[str, Any]]) -> Tuple[int, str]:\n    \"\"\"Calculate current streak from timer sessions.\"\"\"\n    if not timer_sessions:\n        return 0, \"daily focus\"\n    \n    # Group sessions by date\n    sessions_by_date = defaultdict(list)\n    \n    for session in timer_...",
      "suggested_refactor": "Extract UI rendering to calculate_streaks_ui_layer() + Extract logging to calculate_streaks_audit_layer() + Extract business logic to calculate_streaks_processor()"
    },
    {
      "function_name": "render_sidebar",
      "file_path": "streamlit_extension/components/sidebar/layout.py",
      "line_number": 32,
      "responsibilities": [
        "database",
        "ui",
        "auth",
        "network",
        "logging"
      ],
      "severity": "CRITICAL",
      "code_snippet": "def render_sidebar(user_id: int = 1) -> Dict[str, Any]:\n    \"\"\"\n    Render the persistent sidebar with timer and navigation.\n    \n    Returns:\n        Dict containing sidebar state and user actions\n    \"\"\"\n    if not STREAMLIT_AVAILABLE:\n        return {\"error\": \"Streamlit not available\"}\n    \n    s...",
      "suggested_refactor": "Extract database operations to render_sidebar_data_layer() + Extract UI rendering to render_sidebar_ui_layer() + Extract logging to render_sidebar_audit_layer()"
    },
    {
      "function_name": "calculate_recent_points",
      "file_path": "streamlit_extension/components/sidebar/points.py",
      "line_number": 18,
      "responsibilities": [
        "business_logic",
        "auth",
        "network"
      ],
      "severity": "HIGH",
      "code_snippet": "def calculate_recent_points(timer_sessions: List[Dict[str, Any]], achievements: List[Dict[str, Any]]) -> int:\n    \"\"\"Calculate points earned in last 7 days.\"\"\"\n    recent_points = 0\n    cutoff_date = (datetime.now() - timedelta(days=7)).isoformat()\n    \n    # Points from timer sessions (focus time)\n...",
      "suggested_refactor": "Extract business logic to calculate_recent_points_processor()"
    },
    {
      "function_name": "get_bucket_state",
      "file_path": "streamlit_extension/middleware/rate_limiting/storage.py",
      "line_number": 164,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def get_bucket_state(self, key: str) -> Dict[str, Any]:\n        with self._lock, self._conn:\n            cur = self._conn.execute(\"SELECT tokens, last_refill FROM rl_buckets WHERE key=?\", (key,))\n            row = cur.fetchone()\n            if not row:\n                return {\"tokens\": 0.0, \"las...",
      "suggested_refactor": "Extract database operations to get_bucket_state_data_layer()"
    },
    {
      "function_name": "update_bucket_state",
      "file_path": "streamlit_extension/middleware/rate_limiting/storage.py",
      "line_number": 172,
      "responsibilities": [
        "auth",
        "database"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def update_bucket_state(self, key: str, *, tokens: float, last_refill: float) -> None:\n        with self._lock, self._conn:\n            self._conn.execute(\n                \"\"\"\n                INSERT INTO rl_buckets(key, tokens, last_refill) VALUES(?,?,?)\n                ON CONFLICT(key) DO UPDAT...",
      "suggested_refactor": "Extract database operations to update_bucket_state_data_layer()"
    },
    {
      "function_name": "check_endpoint_rate_limit",
      "file_path": "streamlit_extension/middleware/rate_limiting/core.py",
      "line_number": 115,
      "responsibilities": [
        "business_logic",
        "auth"
      ],
      "severity": "MEDIUM",
      "code_snippet": "    def check_endpoint_rate_limit(self, endpoint: str) -> bool:\n        config = self._match_endpoint(endpoint)\n        if not config:\n            return True\n        count, period = self._parse_rate(config[\"rate_limit\"])\n        alg = config.get(\"algorithm\", \"sliding_window\")\n        key = f\"endpoi...",
      "suggested_refactor": "Extract business logic to check_endpoint_rate_limit_processor()"
    },
    {
      "function_name": "extract_request_info",
      "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
      "line_number": 36,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def extract_request_info(self, request: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Extract minimal request information.\"\"\"\n        return {\n            \"ip\": request.get(\"ip\"),\n            \"user_id\": request.get(\"user_id\"),\n            \"tier\": request.get(\"tier\", \"free\"),\n            \"endpoin...",
      "suggested_refactor": "Extract UI rendering to extract_request_info_ui_layer() + Extract logging to extract_request_info_audit_layer()"
    },
    {
      "function_name": "_build_headers",
      "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
      "line_number": 45,
      "responsibilities": [
        "auth",
        "logging",
        "ui"
      ],
      "severity": "HIGH",
      "code_snippet": "    def _build_headers(self, info: Dict[str, Any], reason_hint: Optional[str]) -> Dict[str, str]:\n        try:\n            return self.rate_limiter.build_rate_limit_headers(\n                ip=info[\"ip\"],\n                user_id=info[\"user_id\"],\n                tier=info[\"tier\"],\n                end...",
      "suggested_refactor": "Extract UI rendering to _build_headers_ui_layer() + Extract logging to _build_headers_audit_layer()"
    },
    {
      "function_name": "process_request",
      "file_path": "streamlit_extension/middleware/rate_limiting/middleware.py",
      "line_number": 57,
      "responsibilities": [
        "auth",
        "logging",
        "network",
        "ui"
      ],
      "severity": "CRITICAL",
      "code_snippet": "    def process_request(self, request: Dict[str, Any]) -> MiddlewareResponse:\n        info = self.extract_request_info(request)\n        if not self.dos.record_request(info[\"ip\"]):\n            self.logger.warning(\n                \"dos_block\",\n                extra={\"ip\": info[\"ip\"], \"endpoint\": info[...",
      "suggested_refactor": "Extract UI rendering to process_request_ui_layer() + Extract logging to process_request_audit_layer()"
    }
  ]
}