 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/streamlit_extension/components/dashboard_widgets.py b/streamlit_extension/components/dashboard_widgets.py
index a9a0d1435671733ff620fca24e03c43e040daa29..ae3ff91a0eebc9ee8b76f9e9bc5dd6eeebad7be9 100644
--- a/streamlit_extension/components/dashboard_widgets.py
+++ b/streamlit_extension/components/dashboard_widgets.py
@@ -321,80 +321,62 @@ class NotificationToast:
             return
         
         # Type to style mapping
         styles = {
             "success": {"bg": "#d4edda", "border": "#c3e6cb", "text": "#155724", "icon": "✅"},
             "error": {"bg": "#f8d7da", "border": "#f5c6cb", "text": "#721c24", "icon": "❌"},
             "warning": {"bg": "#fff3cd", "border": "#ffeaa7", "text": "#856404", "icon": "⚠️"},
             "info": {"bg": "#d1ecf1", "border": "#bee5eb", "text": "#0c5460", "icon": "ℹ️"}
         }
         
         style = styles.get(notification.type, styles["info"])
         icon = notification.icon or style["icon"]
         
         # Create columns for layout
         col1, col2, col3 = st.columns([1, 10, 1])
         
         with col2:
             toast_html = f"""
             <div style="
                 background-color: {style['bg']};
                 border: 1px solid {style['border']};
                 border-radius: 8px;
                 padding: 12px 15px;
                 margin: 10px 0;
                 color: {style['text']};
-                animation: slideIn 0.3s ease;
             ">
                 <div style="display: flex; align-items: start;">
                     <span style="font-size: 20px; margin-right: 10px;">{icon}</span>
                     <div style="flex-grow: 1;">
                         <div style="font-weight: bold; margin-bottom: 3px;">{notification.title}</div>
                         <div style="font-size: 14px;">{notification.message}</div>
                         <div style="font-size: 11px; color: #888; margin-top: 5px;">
                             {notification.timestamp.strftime("%H:%M:%S")}
                         </div>
                     </div>
                 </div>
             </div>
-            
-            <style>
-                @keyframes slideIn {{
-                    from {{
-# Auth imports
-from streamlit_extension.auth.middleware import require_auth, require_admin
-from streamlit_extension.auth.user_model import UserRole
-
-                        transform: translateX(100%);
-                        opacity: 0;
-                    }}
-                    to {{
-                        transform: translateX(0);
-                        opacity: 1;
-                    }}
-                }}
-            </style>
             """
             
             st.markdown(toast_html, unsafe_allow_html=True)
             
             if notification.action_label and notification.action_callback:
                 if st.button(notification.action_label, key=f"notif_action_{notification.timestamp}"):
                     notification.action_callback()
 
 
 class QuickActionButton:
     """Quick action buttons for common tasks."""
     
     @staticmethod
     def render(label: str, icon: str, callback: callable, 
               color: str = "primary", disabled: bool = False,
               tooltip: Optional[str] = None) -> bool:
         """
         Render a quick action button.
         
         Args:
             label: Button label
             icon: Icon/emoji for the button
             callback: Function to call on click
             color: Button color theme
             disabled: Whether button is disabled
 
EOF
)