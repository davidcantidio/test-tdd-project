 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/streamlit_extension/auth/login_page.py b/streamlit_extension/auth/login_page.py
index d5556e83aae09192d5c75470a2164110ada1a4cf..b117271dd56fa3359086e7429ce1d6492bbf53c5 100644
--- a/streamlit_extension/auth/login_page.py
+++ b/streamlit_extension/auth/login_page.py
@@ -157,51 +157,51 @@ def render_login_page():
     active = st.selectbox(
         "Choose action:",
         ["Login", "Register"],
         index=0 if SS.get(K.ACTIVE_TAB, "Login") == "Login" else 1,
         key=K.MODE_SELECT,
         help="Switch between login and registration",
     )
     SS[K.ACTIVE_TAB] = active
 
     if active == "Login":
         _render_login_form(auth_manager)
     else:
         _render_registration_form(auth_manager)
 
 
 def _render_login_form(auth_manager: AuthManager):
     st.subheader("Login")
 
     allowed, msg = _ratelimit_login()
     if not allowed:
         st.error(msg)
         return
 
     csrf_token = _csrf_get_or_create(K.CSRF_LOGIN)
 
-    with st.form("login_form", clear_on_submit=False):
+    with st.form(key="login_form", clear_on_submit=False):
         username = st.text_input("Username", key=K.F_LOGIN_USER)
         # Campo oculto para CSRF (valor exibido oculto)
         st.text_input(
             "csrf",
             key=K.F_LOGIN_CSRF,
             value=csrf_token,
             type="password",
             label_visibility="collapsed",
         )
 
         pw_col1, pw_col2 = st.columns([4, 1])
         with pw_col1:
             show_pw = st.checkbox("Show password", key=K.F_LOGIN_SHOW, value=False)
         with pw_col2:
             st.empty()
 
         password = st.text_input(
             "Password",
             type="default" if SS.get(K.F_LOGIN_SHOW) else "password",
             key=K.F_LOGIN_PW,
         )
 
         col_a, col_b = st.columns([1, 1])
         with col_a:
             remember = st.checkbox("Remember this device", key=K.F_LOGIN_REMEMBER, value=False)
@@ -253,51 +253,51 @@ def _render_login_form(auth_manager: AuthManager):
                 try:
                     auth_manager.issue_persistent_session(result.user)
                 except Exception as e:
                     if AUTH_DEBUG:
                         st.warning(f"Persistent session not issued: {e}")
         else:
             SS[K.EXTENDED] = False
             SS[K.DURATION] = 2 * 60 * 60  # 2 hours
             session_info = "Your session will last 2 hours"
 
         _register_attempt(failed=False)
         st.success(f"Welcome back, {result.user.username}!")
         st.info(f"ðŸ’¡ **{session_info}** with gentle reminders before expiring.")
         _clear_login_fields()
         st.rerun()
     else:
         st.error(getattr(result, "message", "Invalid credentials."))
         _register_attempt(failed=True)
 
 
 def _render_registration_form(auth_manager: AuthManager):
     st.subheader("Register New Account")
 
     csrf_token = _csrf_get_or_create(K.CSRF_REG)
 
-    with st.form("register_form", clear_on_submit=False):
+    with st.form(key="register_form", clear_on_submit=False):
         username = st.text_input("Username", key=K.F_REG_USER, help="3â€“32 chars: letters, numbers, . _ -")
         email = st.text_input("Email", key=K.F_REG_EMAIL)
         # Campo oculto para CSRF
         st.text_input(
             "csrf",
             key=K.F_REG_CSRF,
             value=csrf_token,
             type="password",
             label_visibility="collapsed",
         )
 
         pw_col1, pw_col2 = st.columns([3, 2])
         with pw_col1:
             password = st.text_input("Password", type="password", key=K.F_REG_PW)
         with pw_col2:
             ok_tmp, _, score = _password_ok(SS.get(K.F_REG_PW) or "")
             st.progress(min(score, 4) / 4)
 
         confirm_password = st.text_input("Confirm Password", type="password", key=K.F_REG_CONFIRM)
         submit = st.form_submit_button("Register")
 
     if not submit:
         return
 
     # CSRF
 
EOF
)