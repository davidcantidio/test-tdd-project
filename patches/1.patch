*** a/streamlit_extension/streamlit_app.py
--- b/streamlit_extension/streamlit_app.py
@@
-import sys
-import time
-from pathlib import Path
-from typing import Dict, Any
-from datetime import datetime
+import sys
+import time
+from pathlib import Path
+from typing import Dict, Any
+from datetime import datetime
 
-# Add parent directory to path for imports
-sys.path.append(str(Path(__file__).parent.parent))
+# Add parent directory to path for imports (ensure precedence)
+project_root = str(Path(__file__).parent.parent.resolve())
+if project_root not in sys.path:
+    sys.path.insert(0, project_root)
 
 # Graceful imports
 try:
     import streamlit as st
     STREAMLIT_AVAILABLE = True
@@
-    # Mock streamlit module for testing
-    class MockStreamlit:
-        def __getattr__(self, name):
-            def mock_func(*args, **kwargs):
-                return None
-            return mock_func
-    
-    st = MockStreamlit()
+    # Mock streamlit module for testing/headless environments
+    class _MockSessionState(dict):
+        """Simple dict-backed session_state mock."""
+        pass
+
+    class MockStreamlit:
+        def __init__(self):
+            self.session_state = _MockSessionState()
+            # emulate Streamlit query params as a dict-like with .get/.clear
+            self.query_params = {}
+
+        # Basic UI no-ops
+        def set_page_config(self, *args, **kwargs): return None
+        def columns(self, spec): return [self] * (spec if isinstance(spec, int) else len(spec))
+        def expander(self, *args, **kwargs):
+            class _NoOpCtx:
+                def __enter__(self_inner): return self
+                def __exit__(self_inner, *exc): return False
+            return _NoOpCtx()
+        def container(self): return self
+        def button(self, *args, **kwargs): return False
+        def progress(self, *args, **kwargs): return None
+        def metric(self, *args, **kwargs): return None
+        def json(self, *args, **kwargs): return None
+        def code(self, *args, **kwargs): return None
+        def write(self, *args, **kwargs): return None
+        def markdown(self, *args, **kwargs): return None
+        def caption(self, *args, **kwargs): return None
+        def error(self, *args, **kwargs): return None
+        def warning(self, *args, **kwargs): return None
+        def info(self, *args, **kwargs): return None
+        def success(self, *args, **kwargs): return None
+        def stop(self): return None
+        def spinner(self, *args, **kwargs):
+            class _NoOpCtx:
+                def __enter__(self_inner): return self
+                def __exit__(self_inner, *exc): return False
+            return _NoOpCtx()
+        def rerun(self): return None
+
+    st = MockStreamlit()
@@
-    from streamlit_extension.utils.auth import GoogleOAuthManager, render_login_page, get_authenticated_user, is_user_authenticated
-    from streamlit_extension.config import load_config, load_config
+    from streamlit_extension.utils.auth import GoogleOAuthManager, render_login_page, get_authenticated_user, is_user_authenticated
+    from streamlit_extension.config import load_config
@@
     except Exception as e:
         st.error(f"‚ùå Authentication Error: {e}")
         st.error("Please check your Google OAuth configuration.")
         st.stop()
 
@@
-    # API endpoints integration via query parameters
-    query_params = st.query_params
+    # API endpoints integration via query parameters
+    # In headless/mock, ensure dict-like
+    query_params = getattr(st, "query_params", {}) or {}
@@
-            # Log API request for monitoring
-            processing_time = time.time() - start_time
-            user = get_current_user()
-            user_id = user.username if user else "anonymous"
+            # Log API request for monitoring
+            processing_time = time.time() - start_time
+            # Use current_user from auth manager/session for logging
+            user = st.session_state.get("current_user")
+            user_id = getattr(user, "username", None) or getattr(user, "email", None) or "anonymous"
@@
 def render_footer():
     """Render the application footer."""
     # Footer with enhanced information
     st.markdown("---")
     col1, col2, col3, col4 = st.columns(4)
@@
     with col4:
         if st.button("üîÑ Refresh", key="footer_refresh"):
             st.rerun()
 
-
 if __name__ == "__main__":
     main()
