--- a/audit_intelligent.sh
+++ b/audit_intelligent.sh
@@ -1,10 +1,67 @@
 #!/bin/bash
 # 🧠 AUDIT SCRIPT INTELIGENTE - Auditoria Extensiva com Real LLM Analysis
 # 
 # Baseado na infraestrutura de agentes inteligentes testada e validada
 # Realiza auditoria semântica profunda de todo o projeto
 
-set -euo pipefail
+set -euo pipefail
+shopt -s lastpipe
+export LC_ALL=C.UTF-8
+umask 077
+
+## -------------------------
+## Flags & helpers
+## -------------------------
+VERBOSE=0
+KEEP=0
+LIMIT=""
+
+usage() {
+  cat <<'USAGE'
+Uso: ./audit_intelligent.sh [opções]
+  --verbose          Liga modo verboso (set -x)
+  --keep             Não apaga .audit_intelligent antes de rodar
+  --limit N          Limita a análise a N arquivos prioritários (propagado aos blocos python)
+  -h|--help          Mostra esta ajuda
+USAGE
+}
+
+die() { echo "❌ ERRO: $*" >&2; exit 1; }
+info(){ printf '%s\n' "$*"; }
+
+on_err() {
+  local lineno=$1
+  echo "💥 Falha na linha ${lineno}. Consulte os artefatos em ${AUDIT_DIR}/ (se já criados)." >&2
+}
+trap 'on_err $LINENO' ERR
+set -o errtrace
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    --verbose) VERBOSE=1; shift ;;
+    --keep)    KEEP=1;    shift ;;
+    --limit)   LIMIT="${2:-}"; [[ -n "${LIMIT}" ]] || die "--limit requer um valor"; shift 2 ;;
+    -h|--help) usage; exit 0 ;;
+    *) die "Opção inválida: $1";;
+  esac
+done
+
+if [[ ${VERBOSE} -eq 1 ]]; then
+  set -x
+fi
+
+command -v python3 >/dev/null 2>&1 || die "python3 não encontrado no PATH"
 
 # Configuração
 AUDIT_DIR=".audit_intelligent"
 PROJECT_ROOT="."
 TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
 REPORT_FILE="${AUDIT_DIR}/intelligent_audit_report_${TIMESTAMP}.md"
 
-echo "🧠 Iniciando AUDITORIA INTELIGENTE EXTENSIVA..."
-echo "📅 Timestamp: ${TIMESTAMP}"
+run_step() {
+  # Uso: run_step "Descrição" comando...
+  local desc="$1"; shift
+  info "▶️  ${desc}"
+  "$@"
+  local rc=$?
+  info "✅ ${desc} (rc=${rc})"
+}
+
+echo "🧠 Iniciando AUDITORIA INTELIGENTE EXTENSIVA…"
+echo "📅 Timestamp: ${TIMESTAMP}"
@@ -16,9 +73,20 @@
 
 # Limpar e criar diretório de auditoria
-rm -rf "${AUDIT_DIR}"
-mkdir -p "${AUDIT_DIR}"/{reports,analysis,recommendations,performance}
+if [[ ${KEEP} -eq 0 ]]; then
+  # Defesa adicional: garanta que a var não está vazia
+  [[ -n "${AUDIT_DIR}" && "${AUDIT_DIR}" != "/" ]] || die "AUDIT_DIR inválido"
+  rm -rf -- "${AUDIT_DIR}"
+fi
+mkdir -p -- "${AUDIT_DIR}"/{reports,analysis,recommendations,performance}
+
+# Registrar meta-informações da execução
+{
+  echo "timestamp=${TIMESTAMP}"
+  echo "project_root=${PROJECT_ROOT}"
+  echo "keep=${KEEP}"
+  echo "limit=${LIMIT}"
+  python3 --version 2>&1 | sed 's/^/python_version=/'
+} > "${AUDIT_DIR}/run.meta"
 
 # Banner de início
 cat > "${REPORT_FILE}" << 'EOF'
@@ -34,6 +102,20 @@
 **Agentes:** 5 agentes inteligentes + context integration  
 
 EOF
+
+# Helper para injetar LIMIT para os blocos Python (via variável de ambiente)
+export AI_AUDIT_LIMIT="${LIMIT}"
+
+# Pequeno wrapper para rodar blocos Python com padronização de log
+pyblock() { python3 - "$@"; }
+
+## Exemplo de uso uniformizado
+## run_step "Fase 1: Inventário Completo do Sistema" \
+##   pyblock <<'EOF'
+##   # código python…
+## EOF
+
+echo "📊 Executando análise de inventário completo..."
 
 # 1. INVENTÁRIO COMPLETO DO PROJETO
-echo "🔍 Fase 1: Inventário Completo do Sistema"
+echo "🔍 Fase 1: Inventário Completo do Sistema"
