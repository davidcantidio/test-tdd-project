#!/usr/bin/env python3
"""
Fase 3.3.3.3 - Valida√ß√£o Funcional
Testa funcionalidades espec√≠ficas dos m√≥dulos cr√≠ticos
"""

import sys
import traceback
import sqlite3
sys.path.insert(0, '/home/david/Documentos/canimport/test-tdd-project')

def test_database_operations():
    """Testa opera√ß√µes b√°sicas de banco de dados"""
    print("\nüóÑÔ∏è Testando Opera√ß√µes de Banco...")
    
    test_results = {
        'modular_api': False,
        'legacy_api': False,
        'hybrid_operations': False
    }
    
    try:
        # Teste API Modular
        print("   üìä Testando API Modular...")
        from streamlit_extension.database import list_epics, get_connection
        try:
            epics = list_epics()
            conn = get_connection()
            print(f"      ‚úÖ API Modular: {len(epics)} epics, conex√£o OK")
            test_results['modular_api'] = True
        except Exception as e:
            print(f"      ‚ùå API Modular: {str(e)[:100]}")
        
        # Teste API Legacy (h√≠brida)
        print("   üìä Testando API Legacy...")
        from streamlit_extension.utils.database import DatabaseManager
        try:
            db = DatabaseManager()
            legacy_epics = db.get_epics()
            legacy_tasks = db.get_tasks()
            print(f"      ‚úÖ API Legacy: {len(legacy_epics)} epics, {len(legacy_tasks)} tasks")
            test_results['legacy_api'] = True
        except Exception as e:
            print(f"      ‚ùå API Legacy: {str(e)[:100]}")
        
        # Teste opera√ß√µes h√≠bridas
        print("   üìä Testando Opera√ß√µes H√≠bridas...")
        if test_results['modular_api'] and test_results['legacy_api']:
            print(f"      ‚úÖ H√≠brido: Ambas APIs funcionais")
            test_results['hybrid_operations'] = True
        else:
            print(f"      ‚ö†Ô∏è H√≠brido: Apenas uma API funcional")
        
        return sum(test_results.values()) >= 2  # Pelo menos 2 de 3 funcionando
        
    except Exception as e:
        print(f"   ‚ùå Opera√ß√µes DB: {e}")
        return False

def test_ui_pages():
    """Testa p√°ginas de UI cr√≠ticas"""
    print("\nüì± Testando P√°ginas de UI...")
    
    ui_tests = [
        ('Analytics', 'streamlit_extension.pages.analytics', 'render_analytics_page'),
        ('Kanban', 'streamlit_extension.pages.kanban', 'render_kanban_page'),
        ('Projects', 'streamlit_extension.pages.projects', 'render_projects_page'),
        ('Timer', 'streamlit_extension.pages.timer', 'render_timer_page'),
        ('Settings', 'streamlit_extension.pages.settings', 'render_settings_page'),
        ('Gantt', 'streamlit_extension.pages.gantt', 'render_gantt_page'),
        ('Wizard', 'streamlit_extension.pages.projeto_wizard', 'render_projeto_wizard_page'),
    ]
    
    success_count = 0
    for page_name, module_name, function_name in ui_tests:
        try:
            module = __import__(module_name, fromlist=[function_name])
            if hasattr(module, function_name):
                print(f"   ‚úÖ {page_name}: Fun√ß√£o {function_name} dispon√≠vel")
                success_count += 1
            else:
                print(f"   ‚ö†Ô∏è {page_name}: Fun√ß√£o {function_name} n√£o encontrada")
        except Exception as e:
            print(f"   ‚ùå {page_name}: {str(e)[:100]}")
    
    success_rate = success_count / len(ui_tests)
    print(f"   üìä Taxa de sucesso UI: {success_rate*100:.1f}% ({success_count}/{len(ui_tests)})")
    return success_rate >= 0.8  # 80% de sucesso

def test_service_layer():
    """Testa camada de servi√ßos"""
    print("\nüè¢ Testando Service Layer...")
    
    try:
        from streamlit_extension.services import ServiceContainer
        container = ServiceContainer()
        
        # Teste services b√°sicos (ClientService removido na Phase 3.1)
        services = ['get_project_service', 'get_epic_service', 'get_task_service', 
                   'get_analytics_service', 'get_timer_service']
        success_count = 0
        
        for service_name in services:
            try:
                if hasattr(container, service_name):
                    service = getattr(container, service_name)()
                    print(f"   ‚úÖ {service_name}: Dispon√≠vel")
                    success_count += 1
                else:
                    print(f"   ‚ùå {service_name}: N√£o encontrado")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {service_name}: Erro ao instanciar - {str(e)[:50]}")
        
        success_rate = success_count / len(services)
        print(f"   üìä Taxa de sucesso Services: {success_rate*100:.1f}% ({success_count}/{len(services)})")
        return success_rate >= 0.6  # 60% de sucesso
        
    except Exception as e:
        print(f"   ‚ùå Service Layer: {e}")
        return False

def test_database_integrity():
    """Testa integridade do banco de dados"""
    print("\nüîç Testando Integridade do Banco...")
    
    try:
        # Conectar diretamente ao banco
        conn = sqlite3.connect('framework.db')
        cursor = conn.cursor()
        
        # Verificar tabelas principais
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['framework_projects', 'framework_epics', 'framework_tasks']
        missing_tables = [t for t in required_tables if t not in tables]
        
        if missing_tables:
            print(f"   ‚ùå Tabelas faltando: {missing_tables}")
            return False
        
        # Verificar contagem de registros
        for table in required_tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"   ‚úÖ {table}: {count} registros")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"   ‚ùå Integridade do banco: {e}")
        return False

def test_hybrid_architecture():
    """Testa arquitetura h√≠brida completa"""
    print("\nüîÑ Testando Arquitetura H√≠brida...")
    
    try:
        # Teste de coexist√™ncia
        from streamlit_extension.utils.database import DatabaseManager
        from streamlit_extension.database import list_epics
        
        # Legacy
        db = DatabaseManager()
        legacy_data = db.get_epics()
        
        # Modular
        modular_data = list_epics()
        
        # Comparar resultados
        print(f"   üìä Legacy: {len(legacy_data)} epics")
        print(f"   üìä Modular: {len(modular_data)} epics")
        
        if len(legacy_data) == len(modular_data):
            print(f"   ‚úÖ Arquitetura H√≠brida: Dados consistentes")
            return True
        else:
            print(f"   ‚ö†Ô∏è Arquitetura H√≠brida: Diferen√ßa nos dados")
            return True  # Ainda funcional, apenas inconsistente
            
    except Exception as e:
        print(f"   ‚ùå Arquitetura H√≠brida: {e}")
        return False

def main():
    print("üîç FASE 3.3.3.3 - VALIDA√á√ÉO FUNCIONAL")
    print("=" * 60)
    
    tests = [
        ("Database Operations", test_database_operations),
        ("UI Pages", test_ui_pages), 
        ("Service Layer", test_service_layer),
        ("Database Integrity", test_database_integrity),
        ("Hybrid Architecture", test_hybrid_architecture),
    ]
    
    success_count = 0
    total_tests = len(tests)
    failed_tests = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ Executando: {test_name}")
        try:
            if test_func():
                success_count += 1
                print(f"   ‚úÖ {test_name}: PASSOU")
            else:
                print(f"   ‚ùå {test_name}: FALHOU")
                failed_tests.append(test_name)
        except Exception as e:
            print(f"   ‚ùå {test_name}: ERRO - {e}")
            failed_tests.append(test_name)
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADOS FUNCIONAIS:")
    print(f"   Testes Aprovados: {success_count}/{total_tests}")
    print(f"   Taxa de Sucesso: {success_count/total_tests*100:.1f}%")
    
    if failed_tests:
        print(f"\n‚ùå TESTES FALHOS ({len(failed_tests)}):")
        for test in failed_tests:
            print(f"   - {test}")
    
    if success_count == total_tests:
        print("\nüéâ FASE 3.3.3.3 COMPLETA - Toda funcionalidade operacional")
        return True
    elif success_count >= total_tests * 0.8:  # 80% de sucesso
        print("\n‚úÖ FASE 3.3.3.3 APROVADA - Funcionalidade aceit√°vel (>80%)")
        return True
    else:
        print("\n‚ö†Ô∏è FASE 3.3.3.3 PARCIAL - Algumas funcionalidades falharam")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)