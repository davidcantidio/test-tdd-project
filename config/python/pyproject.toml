[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "[PROJECT_NAME]"
version = "0.1.0"
description = "TDD project with epic management and automated progress tracking"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "[AUTHOR_NAME]", email = "[AUTHOR_EMAIL]"}
]
maintainers = [
    {name = "[AUTHOR_NAME]", email = "[AUTHOR_EMAIL]"}
]
keywords = ["tdd", "testing", "project-management", "epic"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "coverage[toml]>=7.0.0",
]

# Development dependencies
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

# Documentation dependencies  
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

# Analytics and visualization
analytics = [
    "pandas>=2.0.0",
    "plotly>=5.15.0",
    "jupyter>=1.0.0",
    "numpy>=1.24.0",
]

# All development dependencies
all = ["[PROJECT_NAME][test,dev,docs,analytics]"]

[project.urls]
Homepage = "https://github.com/[USERNAME]/[REPOSITORY_NAME]"
Documentation = "https://[USERNAME].github.io/[REPOSITORY_NAME]/"
Repository = "https://github.com/[USERNAME]/[REPOSITORY_NAME].git"
"Bug Tracker" = "https://github.com/[USERNAME]/[REPOSITORY_NAME]/issues"
Changelog = "https://github.com/[USERNAME]/[REPOSITORY_NAME]/blob/main/CHANGELOG.md"

[project.scripts]
tdd-timer = "tdah_tools.task_timer:main"
epic-validator = "scripts.validate_epic:main"
tdd-converter = "scripts.convert_to_tdd:main"
diagram-generator = "scripts.visualization.tdd_diagram_generator:main"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | env
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests", "tdah_tools", "scripts"]
known_third_party = ["pytest", "click", "pydantic", "rich", "typer"]
skip = ["venv", "env", ".venv", ".env"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "env",
    ".venv",
    ".env",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["plotly.*", "pandas.*", "numpy.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "tdd: marks tests as TDD methodology tests",
    "epic: marks tests related to epic management",
    "analytics: marks tests for analytics features",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv", ".env"]
skips = ["B101", "B601"]  # Skip assert and shell usage in tests

# Safety dependency scanning
[tool.safety]
ignore = []
output = "json"

# Pre-commit hooks configuration
[tool.pre-commit]
default_stages = ["commit"]
fail_fast = true

# Development scripts
[tool.setuptools.cmdclass]
test = "pytest"
lint = "flake8"
format = "black"