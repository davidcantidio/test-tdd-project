# üåç Environment Variables Example
# TDD Framework - Secure Configuration via Environment Variables

# =============================================================================
# ENVIRONMENT SETUP
# =============================================================================
# Set this to determine which config file to load
TDD_ENVIRONMENT=development  # development | staging | production

# =============================================================================
# GOOGLE OAUTH 2.0 CREDENTIALS (REQUIRED FOR AUTH)
# =============================================================================
# Get these from Google Cloud Console
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Override database file paths
FRAMEWORK_DB_PATH=/path/to/framework.db
TIMER_DB_PATH=/path/to/task_timer.db

# Database encryption (production only)
DATABASE_ENCRYPTION_KEY=your-32-character-encryption-key

# =============================================================================
# REDIS CACHING (PRODUCTION/STAGING)
# =============================================================================
# Redis connection string for caching
REDIS_URL=redis://localhost:6379/0
# Or for Redis with auth:
# REDIS_URL=redis://:password@localhost:6379/0
# Or for Redis Cloud:
# REDIS_URL=rediss://username:password@host:port/db

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# Session configuration
SESSION_TIMEOUT_MINUTES=120
SESSION_SECRET_KEY=your-secret-key-for-session-signing

# CSRF protection
CSRF_SECRET_KEY=your-csrf-secret-key

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Server host and port (useful for deployment)
HOST=0.0.0.0
PORT=8501

# Force HTTPS (production)
FORCE_HTTPS=true

# =============================================================================
# MONITORING & LOGGING
# =============================================================================
# Logging configuration
LOG_LEVEL=INFO  # DEBUG | INFO | WARNING | ERROR | CRITICAL
LOG_FILE_PATH=/app/logs/tdd_framework.log

# Health check configuration
HEALTH_CHECK_PORT=8080
METRICS_PORT=9090

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================
# Email service (if implemented)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# File storage (if implemented)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_BUCKET_NAME=your-s3-bucket

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Enable/disable features
ENABLE_ANALYTICS=true
ENABLE_NOTIFICATIONS=false
ENABLE_EXPERIMENTAL_FEATURES=false

# =============================================================================
# DEVELOPMENT OVERRIDES
# =============================================================================
# These only apply in development environment
DEV_SKIP_AUTH=false
DEV_USE_MOCK_DATA=false
DEV_ENABLE_DEBUG_TOOLBAR=true

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never commit this file with actual secrets to version control
# 2. Use different values for each environment (dev/staging/prod)
# 3. In production, use a secrets management service like:
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - HashiCorp Vault
# 4. Rotate secrets regularly
# 5. Use strong, randomly generated values for all secret keys